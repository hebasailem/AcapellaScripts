//Author: Heba Sailem
//Date: March 2014

singlewell()
if(1)
//Setting the parameters for Star features
set(RequestContainer=cnt(
	bArea=0,

	// Which morphology properties on Original image
	bOrigAxial=1,
	bOrigInten=0,  // use of intensity is not recommended
	bOrigProfile=1,
	bOrigRadial=1,
	bOrigSymm=1,
	bOrigThresh=1,

	// Which morphology properties on Parabola filtered image
	bSPAxial=0,
	bSPInten=0,
	bSPProfile=0,
	bSPRadial=0,
	bSPSymm=0,
	bSPThresh=0,

	// Which texture features we take
	bBright=0,
	bDark=0,
	bEdge=0,
	bHole=0,
	bRidge=0,
	bSaddle=0,
	bSpot=0,
	bValley=0,

	// Which morphology properties on texture filtered images
	bTextuAxial=0,
	bTextuInten=0,
	bTextuProfile=0,
	bTextuRadial=0,
	bTextuSymm=0,
	bTextuThresh=0,

	// How to calculate mass center
	CenterMode="Original", // Not original: Sliding Parabola used

	// optional
	ProfileDistance=10.0, // default=10

	// Normalize texture filter
	NormalizationMode="kernel",  // Values: "kernel", "none"
	TextureScale=0.5,  // default=0.5

	ParabolaCurvature=10,

	
	))
End()
if(1)
set(RequestContainerAxial=cnt(
	bArea=0,

	// Which morphology properties on Original image
	bOrigAxial=1,
	bOrigInten=0,  // use of intensity is not recommended
	bOrigProfile=0,
	bOrigRadial=0,
	bOrigSymm=0,
	bOrigThresh=0,

	// Which morphology properties on Parabola filtered image
	bSPAxial=0,
	bSPInten=0,
	bSPProfile=0,
	bSPRadial=0,
	bSPSymm=0,
	bSPThresh=0,

	// Which texture features we take
	bBright=0,
	bDark=0,
	bEdge=0,
	bHole=0,
	bRidge=0,
	bSaddle=0,
	bSpot=0,
	bValley=0,

	// Which morphology properties on texture filtered images
	bTextuAxial=0,
	bTextuInten=0,
	bTextuProfile=0,
	bTextuRadial=0,
	bTextuSymm=0,
	bTextuThresh=0,

	// How to calculate mass center
	CenterMode="Original", // Not original: Sliding Parabola used

	// optional
	ProfileDistance=10.0, // default=10

	// Normalize texture filter
	NormalizationMode="kernel",  // Values: "kernel", "none"
	TextureScale=0.5,  // default=0.5

	ParabolaCurvature=10,

	
	))
End()

if(1)
set(RequestContainerVesicles=cnt(
	bArea=0,

	// Which morphology properties on Original image
	bOrigAxial=0,
	bOrigInten=0,  // use of intensity is not recommended
	bOrigProfile=1,
	bOrigRadial=0,
	bOrigSymm=1,
	bOrigThresh=1,

	// Which morphology properties on Parabola filtered image
	bSPAxial=0,
	bSPInten=0,
	bSPProfile=1,
	bSPRadial=0,
	bSPSymm=0,
	bSPThresh=0,

	// Which texture features we take
	bBright=1,
	bDark=1,
	bEdge=1,
	bHole=1,
	bRidge=1,
	bSaddle=1,
	bSpot=1,
	bValley=1,

	// Which morphology properties on texture filtered images
	bTextuAxial=0,
	bTextuInten=1,
	bTextuProfile=1,
	bTextuRadial=1,
	bTextuSymm=1,
	bTextuThresh=1,

	// How to calculate mass center
	CenterMode="Original", // Not original: Sliding Parabola used

	// optional
	ProfileDistance=10.0, // default=10

	// Normalize texture filter
	NormalizationMode="kernel",  // Values: "kernel", "none"
	TextureScale=0.5,  // default=0.5

	ParabolaCurvature=10,

	
	))
End()


// Prepare multifield images
input(IN_ImageField, 0, "Image Field", "i", "Number of the image field to analyze. If set to 0 all image fields of the well get processed.")
OperaTemplates::ControlImages()

// Channels info
input(NumberOfChannels, 3, "Number of Channels:Channels", "i", "Number of channels recorded in each field")

input(IN_ChanNuc, 1, "Channel for Nucleus Detection:Channels", "i","if not available use 0")
input(IN_ChanCyto, 4, "Channel for Cytoplasm Detection:Channels", "i","if not available use 0")

input(IN_ChanMemb, 4, "Channel for Membrane Detection:Channels", "i","if not available use 0")
input(IN_ChanActin, 0, "Channel for Actin Determination:Channels", "i","if not available use 0")
input(IN_ChanDAPI, 3, "Channel for DAPI Determination:Channels", "i","if not available use 0")
input(IN_ChanER, 3, "Channel for ER Determination:Channels", "i","if not available use 0")
input(IN_ChanGolgi, 0, "Channel for Golgi Determination:Channels", "i","if not available use 0")
input(IN_ChanMito, 0, "Channel for Mito Determination:Channels", "i","if not available use 0")
input(IN_ChanNFKB, 0, "Channel for NFKB Determination:Channels", "i","if not available use 0")
input(IN_ChanProt, 0, "Channel for Protrusion Determination:Channels", "i","if not available use 0")
input(IN_ChanTublin, 4, "Channel for Tublin Determination:Channels", "i","if not available use 0")
input(IN_ChanYAP, 0, "Channel for YAP Determination:Channels", "i","if not available use 0")
input(IN_ChanVesicles, 0, "Channel for Vesicles Determination:Channels", "i","if not available use 0")
input(IN_Channcadherin, 2, "Channel for ncadherin signal, 0 if not available:Channels", "i")
input(IN_Chanecadherin, 2, "Channel for ecadherin signal, 0 if not available:Channels", "i")
input(IN_ChanLOK, 3, "Channel for LOK signal, 0 if not available:Channels", "i")


// Filtering prams

input(IN_DAPIIntensitymax,2500, "Maximum DAPI Intensity:Filtering prameters", "i", "Allowed maximum intensity, remove mitotic cells")
input(IN_DAPImin, 100, "Minimum DAPI:Filtering prameters")
input( IN_max_dist, 1, "Maximum distance of objects in a cluster:Filtering prameters", description="Specifies how close or far the objects have to be in order to be considered clustered. Unit: [image pixels]" )

//Output info
input(ShowIllustrations, yes, "Show Illustrations:Output", "b", "yes / no") 
input(SaveImg, yes, "Save analysed cells images:Output", "y", "Save analysed cells images")
input(ImgPath,"C:/Opera/OperaDB/heba/BG3GFP/images/test/" , "Path to save images to:Output", "p", "Path to save images to")
input(writesinglecell, yes, "Write Single Cell Data (need Columbus client connection):Output", "b","Write Single Cell Data ")

//H.S
input(DataPath, "C:/Users/acapella/Desktop/heba/nfkb/" , "Path to save data file to:Output", "p", "Path to save data file")
input(DataFileName, "nfkb_data.txt", "Data file name:Output", "f", "Data file name")

//data_path for mac client:///Volumes/RES_ACAPELLA/OperaArchive/Heba_analysis/
//data path for windows  client:////172.20.0.51/res_acapella/OperaArchive/Heba_analysis/

// BEGIN OF LOOP OVER IMAGE FIELDS
set(InvalidFields=0)   //variable for counting of invalid black image fields
Foreach(StartField .. EndField, "_FieldCounter")
 // Get images of current image field. Images are named IM_CH1, IM_CH2, etc.
 //OperaTemplates::AssignChannels() 
OperaTemplates::AssignPlane()
 // Set images
 set(IM_Cyto = _["IM_CH" & IN_ChanCyto])      // image for cytoplasm detection
 set(IM_Nuclei = _["IM_CH" & IN_ChanNuc])        // image for nucleus detection
set(IM_Memb = _["IM_CH" & IN_ChanMemb])        // image for nucleus detection
delete("stencil")

 // Counting of invalid (black=unfocused) fields and termination of evaluation for these 
 if(IM_ch2.max==0)
  set(InvalidFields=InvalidFields+1)  // image fields that are invalid due to no signal intensity are added to the number of invalid fields
 else() // Start of evaluation of valid (not black) image fields
//multiply by ratio of crosstalk from ch3 to ch1




 // ReSet images
 set(IM_Cyto = _["IM_CH" & IN_ChanCyto])      // image for cytoplasm detection
 set(IM_Nuclei = _["IM_CH" & IN_ChanNuc])        // image for nucleus detection
set(IM_Memb = _["IM_CH" & IN_ChanMemb])        // image for nucleus detection




//Actual object detection
Nuclei_Detection_Select(reference=IM_Nuclei)
cytoplasm_detection_select(im_cyto)
Cytoplasm_Detection_Select_2(im_cyto,nuclei=wholecells,Membrane=im_memb)





//try to imrprove seg using er
Inverse(image=Im_ch3)
rename(inv=image)
//Not(image=wholecells.body)
Blank(im_cyto.width,im_cyto.Height )
CarryPixels(wholecells.body,inv)
set(a1=log10(image))
Minus(a1,0,neg_method="zero")





//Distance image from nucleus (the output object list will be discarded)
CalcZone(200,ZoneType ="equidistant",objects=nuclei,Stencil=wholecells.body)
ZoneImage(ZoneType="OuterZones")
DistanceImage(OnlyUpTo100=no)
Rename(nuc_distanceimage=distanceimage)

//Proceed only if there are any objects
if (objects.count>0)
//Recalculate cytoplasm
CalcSubobjectAttributeStatistics(SubObjects=nuclei, Objects=wholecells)
CalcSubobjectAnalysis(SubObjects=nuclei)

SetAttr(centers,objects.borderobjectsstencil,objects=wholecells)
CytoplasmRegion(Stencil="body",WholeCells=objects)
RingRegion(Stencil="Centers")
SetAttr(cytoplasm,cytoplasmregion,objects=WholeCells)
CalcBorder(cytoplasm)

CalcArea(border)
CalcArea(cytoplasm)
CalcWidthLength()
calcAttr(Width2Length, "2*half_width/full_length")
CalcAttr("roundness")


//Nuclie characterization
CalcBorder(centers)
CalcArea(centers_border)
CalcArea(centers)
//save main object list
set(cells_obj=objects)
Stencil2Objects(objects.centers.image)
CalcWidthLength(objects)
CalcAttr("Width2Length",Formula=2*half_width/full_length)
CalcAttr("roundness")
CalcSubobjectAnalysis(SubObjects=objects,Objects=cells_obj)
CalcSubobjectStat("mean",Attribute="roundness")
CalcSubobjectStat("mean",Attribute="Width2Length")
CalcSubobjectStat("sum",Attribute="full_length")
CalcSubobjectStat("sum",Attribute="half_width")
RenameAttr(nucleus__morphology__length=subobj_full_length_sum)
RenameAttr(nucleus__morphology__width=subobj_half_width_sum)
RenameAttr(nucleus__morphology__roundness=subobj_roundness_mean)
RenameAttr(nucleus__morphology__NrWidth2Length=subobj_width2length_mean)


CalcNearestNeighbourDistance()

MembraneRegion(VisualImage=IM_cyto, stencil="Body",WholeCells =objects)
set(cells_obj=wholecells)

//Neighbor fraction
 // remove the small holes and smear the outside a bit
 Not(image=objects.index)
 Mask2Stencil(image, Neighbourhood=8)
 Stencil2Objects(Neighbourhood=8)
CalcFillStencil()
 CalcArea()
 ObjectFilter(area > 10)
 Mean(Image= 9 *objects.index)
 Mask()

Rename(nei_img=mask)
not(image=nei_img.image)
and(cells_obj.border.mask.image,image=image)
set(in_dilate=10)
Erosion(-in_dilate,image=image)
and(cells_obj.membraneregion.mask.image,image=image)
Stencil2Objects(image)
CalcSubobjectAnalysis(SubObjects=objects, Objects=cells_obj)
SetAttr(contact_region,objects.BorderObjectsStencil,objects=cells_obj)
 
 // determine how much of our cell border is covered by the smeared outside
 CalcStat("sum", Stencil=border, AttrName="nei_border", Image=nei_img)
 CalcAttr("Cell__Context__NrNeighbourFraction", "1.0 - nei_border / border_area")

calcattr("nucleus__morphology__NrArea2CytoplasmArea", ( centers_area/ area))


CalcSkeleton(membraneregion)
calcborder(membraneregion_skeleton)

CalcArea(membraneregion_skeleton_border)
CalcNodes(membraneregion_skeleton)
CalcAttr(cell__morphology__NrSpikes2Area,membraneregion_skeleton_node_count/area)
CalcAttr(cell__morphology__NrSmoothedBorder2CellBorder,membraneregion_skeleton_border_area/border_area)
if(ShowIllustrations)
	ImageView( objects.membraneregion_skeleton_border, "membraneregion_skeleton_border", gamma=1.7, image=IM_Cyto )
	ImageView( objects.membraneregion_skeleton_nodes, "membraneregion_skeleton_nodes", gamma=1.7, image=IM_Cyto )
End()

//Mass center
CalcMassCentre(Weights=im_cyto)
CalcMassCentre(centers,Weights=im_nuclei)


	ObjectFilter("MassCentreX==MassCentreX and MassCentreY==MassCentreY and centers_MassCentreX==centers_MassCentreX and centers_MassCentreY==centers_MassCentreY")
	if (objects.count==0)
		continue() 
	End()
CalcAttr(cell__morphology__CenterDistance2NucleusCenter,sqrt(((MassCentreX-centers_MassCentreX)^2)+((MassCentreY-centers_MassCentreY)^2)))

//Bounding box for cell montage
CalcBoundingBox()
RenameAttr(cell__coordinates__bounding_x1=bounding_x1)
RenameAttr(cell__coordinates__bounding_x2=bounding_x2)
RenameAttr(cell__coordinates__bounding_y1=bounding_y1)
RenameAttr(cell__coordinates__bounding_y2=bounding_y2)

//Zone
CalcZone(200,Stencil=body,ZoneType ="equidistant")
ZoneImage()
DistanceImage(OnlyUpTo100=no)
Rename(cyto_distanceimage=distanceimage)

//save main object list
set(cells_obj=objects)
set(unfiltered_obj=objects)

set(debug=1)
///////////////////////////////////////////////////////////////////////////////// Population Context (before border objects )
if (debug==1)
				/////////////////////////////////////////////////////////////////Start H.S clusters
						FillSmallHoles_betweenobjects(40)
						CalcErosion( -IN_max_dist/2 )    // blow up objects and calculate new border
						CalcBorder( Eroded )
						Erosion( image=objects.eroded.mask.image )    // determine touching areas
						And( objects.Eroded_border.image )
						CalcStat( "max", Stencil=Eroded_border )     // remove single objects
						ObjectFilter( max>0 )
						mask2stencil( objects.eroded.mask )     // join cluster objects
						stencil2objects()
						CalcArea()
						CalcErosion(5)				
						CalcBorder(eroded)
						RenameAttr(cluster_edge=eroded_border)
						FillObjects()
						CalcErosion(10 )
						CalcBorder(eroded)
						set( clusters=objects )
						CalcSubobjectAnalysis(SubObjects=cells_obj)
						    // shrinkback to find edge cells border marks by 1 pixel
	
						SetAttr(ClusterNumOfCells,objects.NumberOfBorderObjects,objects=clusters )
						set( clusters=objects )

						set(image=clusters.index)    // Add cluster number attribute to each object in "Wholecells" list
		//				if( defined ("all_objects.ClusterNo.max") )    // continous numbers for multifield images
		//					Add( all_objects.ClusterNo.max )
		//					And( clusters.body.mask.image )   // set everything outside the clusters to zero again
		//				End()
						
						and(objects.body.image,image=clusters.cluster_edge.image)
						CalcStat("sum", Stencil=body, Image=image, AttrName="edge1_fraction",objects=cells_obj)
						

						and(objects.body.image,image=clusters.eroded_border.image)
						CalcStat("sum", objects=objects, Stencil=body, Image=image, AttrName="edge2_fraction")
						CalcAttr(cell__context__NrClusterEdgeFractionExcludeHole2CellBorder,edge1_fraction/border_area)
						CalcAttr(cell__context__NrClusterEdgeFraction2CellBorder,edge2_fraction/border_area)
						DeleteAttr(edge1_fraction)
						deleteAttr(edge2_fraction)
						set(img=im_cyto)
						Blank(img.width, img.height)
						
						//Here image pixels will carry the area attribute which then I will use it to assign each cell the cluster area attribute
						CarryObjects(clusters.body, clusters.area)
						CalcStat("median", objects=objects, Stencil=body, Image=image, AttrName="cell__context__ClusterArea")
						CarryObjects(clusters.body, clusters.ClusterNumOfCells)
						CalcStat("median", objects=objects, Stencil=body, Image=image, AttrName="cell__context__ClusterNumOfCells")
						CalcAttr(cell__context__NrCluterArea2NumOfCells,cell__context__ClusterNumOfCells/cell__context__ClusterArea)
						set(cells_obj=objects)



					CalcErosion( -1, border, objects=clusters )    // thicken border marks by 1 pixel
					if(ShowIllustrations)
						ImageView( objects.border_eroded, "Clusters", gamma=1.7, image=IM_Cyto )
					End()

					Delete(clusters)
					//end H.s clusters


					/////////////////////////////////Start H.S Voronoi segmentaion
					//Find free area around the cell
					
					CalcVoronoi(objects=cells_obj)       
					CalcArea(voronoi)
					
					CalcAttr("cell__context__NrVoronoiArea2CellArea",voronoi_area/area)
					CalcVoronoi(masscentre)       
					CalcArea(masscentre_voronoi)
					CalcBorder(masscentre_voronoi)
					CalcAttr("cell__context__NrCenterVoronoiArea2CellArea",masscentre_voronoi_area/area)

					if(ShowIllustrations)
						imageview(objects.voronoi, "Voronoi",image=im_cyto)
						imageview(objects.masscentre_voronoi_border, "Center Voronoi",image=im_cyto)
					End()


					//End 	Voroni
End()



//Remove border objects to avoid errors
RemoveBorderObjects()
//need to save cells object list between modules
set(cells_obj=objects)

//proceed only if there are objects
if (objects.count>0)
///////////////////////////////////////////////////////////////////////////////// Orientation
if(1)
		CalcEquivalentEllipse(VisualImage=nuc_distanceimage,objects=cells_obj)

		CalcEquivalentEllipse(StencilName=centers,VisualImage=cyto_distanceimage)
		//avoid nans
		ObjectFilter("centers_MassCentreX==centers_MassCentreX and centers_MassCentreY==centers_MassCentreY and MassCentreX==MassCentreX and MassCentreY==MassCentreY")
		if (objects.count==0)
			continue() 
		End()
	
		//Get the actual coordinates for the cell axeses
		CalcAttr("vax", (majoraxis/2)* majoraxisx)
		CalcAttr( "vay",(majoraxis/2)* majoraxisy)
		CalcAttr("mj_x1",round(masscentrex-vax))
		CalcAttr("mj_y1",round(masscentrey-vay))
		CalcAttr("mj_x2",round(masscentrex+vax))
		CalcAttr("mj_y2",round(masscentrey+vay))
		CalcAttr("mj_1", point(mj_x1,mj_y1))
		CalcAttr("mj_2", point(mj_x2,mj_y2))
		CalcAttr("vax2", (minoraxis/2)* minoraxisx)
		CalcAttr( "vay2",(minoraxis/2)* minoraxisy)
		CalcAttr("min_x1",round(masscentrex-vax2))
		CalcAttr("min_y1",round(masscentrey-vay2))
		CalcAttr("min_x2",round(masscentrex+vax2))
		CalcAttr("min_y2",round(masscentrey+vay2))
		CalcAttr("min_1", point(min_x1,min_y1))
		CalcAttr("min_2", point(min_x2,min_y2))

		//Get the actual coordinates for the nucleus axeses
		CalcEquivalentEllipse(StencilName=centers,VisualImage=cyto_distanceimage)
		CalcAttr("centers_vax", (centers_majoraxis)/2* centers_majoraxisx)
		CalcAttr( "centers_vay",(centers_majoraxis)/2* centers_majoraxisy)
		CalcAttr("centers_mj_x1",round(centers_masscentrex-centers_vax))
		CalcAttr("centers_mj_y1",round(centers_masscentrey-centers_vay))
		CalcAttr("centers_mj_x2",round(centers_masscentrex+centers_vax))
		CalcAttr("centers_mj_y2",round(centers_masscentrey+centers_vay))
		CalcAttr("centers_mj_1", point(centers_mj_x1,centers_mj_y1))
		CalcAttr("centers_mj_2", point(centers_mj_x2,centers_mj_y2))

		CalcAttr("centers_vax2", (centers_minoraxis)/2* centers_minoraxisx)
		CalcAttr( "centers_vay2",(centers_minoraxis)/2* centers_minoraxisy)
		CalcAttr("centers_min_x1",round(centers_masscentrex-centers_vax2))
		CalcAttr("centers_min_y1",round(centers_masscentrey-centers_vay2))
		CalcAttr("centers_min_x2",round(centers_masscentrex+centers_vax2))
		CalcAttr("centers_min_y2",round(centers_masscentrey+centers_vay2))
		CalcAttr("centers_min_1", point(centers_min_x1,centers_min_y1))
		CalcAttr("centers_min_2", point(centers_min_x2,centers_min_y2))

		//convert start and end points for the major/minor axis to stencils
		Blank(objects.imagewidth, objects.imageheight)
		Set(blank = image)
		Tabulate("x+1", objects.@count)
		Rename(objectsIndex=result)

		backorder(objectsIndex,objects.mj_1,blank)
		Set(result.@type = "stencil")
		SetAttr("mj1",result.vector)

		backorder(objectsIndex,objects.mj_2,blank)
		Set(result.@type = "stencil")
		SetAttr("mj2",result.vector)

		backorder(objectsIndex,objects.min_1,blank)
		Set(result.@type = "stencil")
		SetAttr("min1",result.vector)

		backorder(objectsIndex,objects.min_2,blank)
		Set(result.@type = "stencil")
		SetAttr("min2",result.vector)

		backorder(objectsIndex,objects.centers_mj_1,blank)
		Set(result.@type = "stencil")
		SetAttr("centers_mj1",result.vector)

		backorder(objectsIndex,objects.centers_mj_2,blank)
		Set(result.@type = "stencil")
		SetAttr("centers_mj2",result.vector)

		backorder(objectsIndex,objects.centers_min_1,blank)
		Set(result.@type = "stencil")
		SetAttr("centers_min1",result.vector)

		backorder(objectsIndex,objects.centers_min_2,blank)
		Set(result.@type = "stencil")
		SetAttr("centers_min2",result.vector)

		CalcStat("mean",Stencil=centers_mj1,Image=cyto_distanceimage,AttrName="nucleus__morphology__MajorAxis1DistansceToMembrane")
		CalcStat("mean",Stencil=centers_mj2,Image=cyto_distanceimage,AttrName="nucleus__morphology__MajorAxis2DistansceToMembrane")		
		CalcStat("mean",Stencil=centers_min1,Image=cyto_distanceimage,AttrName="nucleus__morphology__MinorAxis1DistansceToMembrane")
		CalcStat("mean",Stencil=centers_min2,Image=cyto_distanceimage,AttrName="nucleus__morphology__MinorAxis2DistansceToMembrane")

		CalcStat("mean",Stencil=mj1,Image=nuc_distanceimage,AttrName="cell__morphology__MajorAxis1DistansceToNucleus")
		CalcStat("mean",Stencil=mj2,Image=nuc_distanceimage,AttrName="cell__morphology__MajorAxis2DistansceToNucleus")		
		CalcStat("mean",Stencil=min1,Image=nuc_distanceimage,AttrName="cell__morphology__MinorAxis1DistansceToNucleus")
		CalcStat("mean",Stencil=min2,Image=nuc_distanceimage,AttrName="cell__morphology__MinorAxis2DistansceToNucleus")
		CalcAttr(nucleus__morphology__NrMajorAxis1DistansceToMembraneToHalfWidth,nucleus__morphology__MajorAxis1DistansceToMembrane/half_width)
		CalcAttr(nucleus__morphology__NrMajorAxis2DistansceToMembraneToHalfWidth,nucleus__morphology__MajorAxis1DistansceToMembrane/half_width)
		CalcAttr(nucleus__morphology__NrMinorAxis1DistansceToMembraneToHalfWidth,nucleus__morphology__MinorAxis1DistansceToMembrane/half_width)
		CalcAttr(nucleus__morphology__NrMinorAxis2DistansceToMembraneToHalfWidth,nucleus__morphology__MinorAxis2DistansceToMembrane/half_width)
		CalcAttr(cell__morphology__NrMajorAxis1DistansceToNucleus2Length,cell__morphology__MajorAxis1DistansceToNucleus/full_length)
		CalcAttr(cell__morphology__NrMajorAxis2DistansceToNucleus2Length,cell__morphology__MajorAxis2DistansceToNucleus/full_length)
		CalcAttr(cell__morphology__NrMinorAxis1DistansceToNucleus2HalfWidth,cell__morphology__MinorAxis1DistansceToNucleus/half_width)
		CalcAttr(cell__morphology__NrMinorAxis2DistansceToNucleus2HalfWidth,cell__morphology__MinorAxis2DistansceToNucleus/half_width)
		DeleteAttr(cell__morphology__MajorAxis1DistansceToNucleus)
		DeleteAttr(cell__morphology__MajorAxis2DistansceToNucleus)
		DeleteAttr(cell__morphology__MinorAxis1DistansceToNucleus)
		DeleteAttr(cell__morphology__MinorAxis2DistansceToNucleus)

		set(cells_obj=objects)
		End()


///////////////////////////////////////////////////////////////////////////////// Protrusions Measurements
if (IN_ChanProt>0)
//Find the cores of cells (i.e. not protrusions)

set(IM_prot = _["IM_CH" & IN_ChanProt])   
calcintensity(cytoplasm, IM_prot,objects=cells_obj)

	//High threshold core
	calcthreshmask(cytoplasmandcenters, Image=IM_prot, Threshold=(0.65*cytoplasm_intensity))
	
		calcerosion(1, threshmask)

		set(WorkingCells=objects)
		Set(SaveCells = objects)
//copy protrusions to another stencil
		mask2stencil(objects.threshmask_eroded.image)
		stencil2objects()
//find small areas in protrusions stencil and filter them out
		CalcArea()
		Blank(im_prot.width, im_prot.height)
		//Here image pixels will carry the are attribute
		CarryObjects(objects.body, objects.area)
		//Use the image with pixels as area to calculate the max within each WorkingCells object 
		//the max will be our threshold
		CalcStat("max", objects=WorkingCells, Stencil=body, Image=image, AttrName="Threshold")
		//filter our eroded stencil based on area image by keeping only pixels with our threshold

		CalcThreshMask(threshmask_eroded, Threshold, Image=image)
		calcintensity(threshmask_eroded, im_prot)
		RenameAttr(core_intensity=threshmask_eroded_intensity)
		set(saveobjects=objects)
		CalcErosion(-1, Stencil=threshmask, RestrictiveStencil=objects.body)
		SetAttr(core_cell,objects.threshmask_eroded,objects=cells_obj)
		set(cells_obj=objects)
		rename(objects=saveobjects)
		CalcErosion(-5, Stencil=threshmask, RestrictiveStencil=objects.body)
		CalcBorder(threshmask_eroded)
		if(ShowIllustrations)
			ImageView(objects.threshmask_eroded_border, label="high_thresh_cell_cores", image=im_prot, gamma=2)
		End()
		
		CalcStat("sum",Stencil=threshmask_eroded_border,Image=threshmask_eroded_border.mask.image,AttrName ="high_thresh_cell_cores_inner_border")
		Set(WorkingCells = objects)
		SetAttr(core_cell_border,objects.high_thresh_cell_cores_inner_border,objects=cells_obj)
		set(cells_obj=objects)

		// getting the individual protrusions
		//1. Copy the eroded cells to image_protrusions stencil
		CarryPixels(workingcells.threshmask_eroded.mask.image, 0, image=workingcells.body.image)
		Set(image_protrusions=image)

		//2. Copy the cells border to image stencil then create an object list based on these borders
		CarryPixels(objects.border.mask.image,0)
		Mask2Stencil(image, Neighbourhood=8)
		Stencil2Objects()


		////Protrusions measurements
		CalcArea()
		CalcIntensity(Image=im_prot)
		calcthreshmask(body, Image=Im_prot, Threshold=(0.99*intensity))
		CalcErosion(-15, RestrictiveStencil=image_protrusions)
		ObjectFilter(area>100)
		Set(protrusions=objects)


		// how far do protrusions extend from the cell
		Stencil2Objects(WorkingCells.threshmask_eroded)
		CalcZone(200, Stencil=WorkingCells.body, ZoneType="equidistant")
		ZoneImage()
		DistanceImage(OnlyUpTo100=no)
		ZoneImage(ZoneType="OuterZones")
		DistanceImage(OnlyUpTo100=no)

		CalcStat("max", objects=protrusions, Stencil=Eroded, Image=distanceimage, AttrName="prlength")

		Minus(zoneimage, 1, neg_method="zero")
		Not(image=result)
		And(image, image=zoneimage)

		CalcStat("sum", Stencil=eroded, Image=image, AttrName="contactlength")
		rename(contactlength=image)


		//compactness=1 for perfect circle
		CalcAttr("border")
		calcAttr("compactness",(border.area)^2/(4*pi*body.area),objects=objects)

		CalcMassCentre()
	ObjectFilter("MassCentreX==MassCentreX and MassCentreY==MassCentreY ")
	if (objects.count==0)
		continue() 
	End()
		Texture::CalcSERFeatures( Image=im_prot,scale=.5)
		Texture::CalcHaralickFeatures(im_prot)

		DeleteAttr(threshmask)


		//to detect ruffles find parts of membrane with higher intensity than core cells
		Blank(im_prot.width, im_prot.height)
		Carrypixels(WorkingCells.body.mask.image,WorkingCells.cytoplasm_intensity)
		CalcStat("mean",Image=image,AttrName="core_intensity")
		calcthreshmask(body, Image=IM_prot, Threshold=(1.2*core_intensity))
		and(cells_obj.membraneregion.image,image=objects.threshmask.image)
		CalcStat("mean", objects=objects, Stencil=body, Image=image, AttrName="ruffle_intensity")
		CalcArea(image)
		RenameAttr(ruffle_area=image_area)
		Rename(ruffles_img=image)
		Mask2Stencil(ruffles_img)
		if(ShowIllustrations)	
			ImageView(stencil,"ruffles",image =im_prot)
		End()
		Set(protrusions=objects)


		//Relate
		CalcSubobjectAttributeStatistics(SubObjects=protrusions, Objects=workingCells)
		CalcSubobjectAnalysis(SubObjects=Protrusions)
		CalcSubobjectStat("sum",Attribute="area",SubObjects=protrusions)
		CalcSubobjectStat("sum",Attribute="contactlength",SubObjects=protrusions)
		CalcSubobjectStat("sum",Attribute="ruffle_area",SubObjects=protrusions)
		set(WorkingCells=objects)
		RenameAttr(protrusions_body=borderobjectsstencil)

		//Summary of protrusions data
		calcattr("protrusions_relative_area", WorkingCells.subobj_area_sum/area,objects=cells_obj)
		calcattr("protrusions_relative_rufflearea", WorkingCells.subobj_ruffle_area_sum/WorkingCells.subobj_area_sum)
		setattr(No_of_protrusions, workingcells.NumberofSubobjects)
		calcattr(protrusions_relative_contactlength, WorkingCells.subobj_contactlength_sum/core_cell_border)
		
		setattr(prot_mean_area, workingcells.subobj_area_mean)
		setattr(prot_mean_prlength, workingcells.subobj_prlength_mean)
		setattr(prot_mean_intensity, workingcells.subobj_intensity_mean)
		setattr(prot_mean_compactness, workingcells.subobj_compactness_mean)
		setattr(prot_HaralickSumVariance_mean, WorkingCells.SubObj_HaralickSumVariance_mean)
		setattr(prot_HaralickHomogeneity_mean, WorkingCells.SubObj_HaralickHomogeneity_mean)
		setattr(prot_HaralickCorrelation_mean, WorkingCells.SubObj_HaralickCorrelation_mean)
		setattr(prot_HaralickContrast_mean, WorkingCells.SubObj_HaralickContrast_mean)
		setattr(prot_SERBright_mean, WorkingCells.SubObj_SERBright_mean)
		setattr(prot_SERDark_mean, WorkingCells.SubObj_SERDark_mean)
		setattr(prot_SEREdge_mean, WorkingCells.SubObj_SEREdge_mean)
		setattr(prot_SERHole_mean, WorkingCells.SubObj_SERHole_mean)
		setattr(prot_SERRidge_mean, WorkingCells.SubObj_SERRidge_mean)
		setattr(prot_SERSaddle_mean, WorkingCells.SubObj_SERSaddle_mean)
		setAttr(protrusions_body,WorkingCells.borderobjectsstencil)

		set(cells_obj=objects)

		//////////////////////////////H.S: Calculate features for largest and longest protrusion 
		////////////////////Largest Protrusion
		//calculate area, width, length, texture, contact length for largest protrusion
		Blank(im_prot.width, im_prot.height)
		//Here image pixels will carry the area attribute

		CarryObjects(protrusions.body,protrusions.area)
		set(protrusion_area_stencil=image)
		//Use the image with pixels as area to calculate the largest protrusions within each WorkingCells object 
		//the max will be our threshold
		CalcStat("max", objects=WorkingCells, Stencil=body, Image=image, AttrName="proThreshold")
		
		//filter out protrusions based on area image by keeping only pixels with our threshold
		CalcThreshMask(borderobjectsstencil, proThreshold, Image=image)
		
		Stencil2Objects(objects.threshmask,Neighbourhood=8)
		set(largest_protrusions=objects)
		SetAttr(protrusions_largest,objects.body,objects=cells_obj)
		set(cells_obj=objects)

		//Copy protrusion features from protrusions to largest protrusion objects list
		CalcStat("max", objects=WorkingCells, Stencil=body, Image=image, AttrName="proThreshold")
		CarryObjects(protrusions.body,protrusions.contactlength)
		set(prot_contactlength_img=image)
		CalcStat("max", objects=largest_protrusions, Stencil=body, Image=image, AttrName="contactlength")
		CarryObjects(protrusions.body,protrusions.prlength)
		set(prot_prlength_img=image)
		CalcStat("max", objects=objects, Stencil=body, Image=image, AttrName="prlength")
		CarryObjects(protrusions.body,protrusions.intensity)
		set(prot_intensity_img=image)
		CalcStat("max", objects=objects, Stencil=body, Image=image, AttrName="intensity")
		CarryObjects(protrusions.body,protrusions.compactness)
		set(prot_compactness_img=image)
		CalcStat("max", objects=objects, Stencil=body, Image=image, AttrName="compactness")
		//find texture properties
		Texture::CalcSERFeatures( Image=im_prot,scale=.5)
		Texture::CalcHaralickFeatures(im_prot)
		CalcAttr("area")
		CalcAttr("roundness")


		//to detect ruffles find parts om membrane with higher intensity than core cells
		setattr( core_intensity, workingcells.cytoplasm_intensity)
		calcthreshmask(body, Image=IM_prot, Threshold=(.75*core_intensity))
		and(cells_obj.membraneregion.image,image=objects.threshmask.image)
		set(lrgprot_ruffles=image)
		CalcStat("mean", objects=objects, Stencil=body, Image=image, AttrName="ruffle_intensity")
		CalcArea(image)
		RenameAttr(ruffle_area=image_area)
		//Find membrane area for that protrusion to normalize to
		and(cells_obj.membraneregion.image,image=objects.body.image)
		CalcArea(image)
		RenameAttr(membrane_area=image_area)

		//Find angle
		CalcEquivalentEllipse(VisualImage=im_prot)
		if(ShowIllustrations)
			set(lrg1_ellipse=Visualisation)
		End()

		CalcAttr("vax", (majoraxis/2)* majoraxisx)
		CalcAttr( "vay",(majoraxis/2)* majoraxisy)
		CalcAttr("mj_x1",masscentrex-vax)
		CalcAttr("mj_y1",masscentrey-vay)
		CalcAttr("mj_x2",masscentrex+vax)
		CalcAttr("mj_y2",masscentrey+vay)
		CalcAttr("vax2", (minoraxis/2)* minoraxisx)
		CalcAttr( "vay2",(minoraxis/2)* minoraxisy)
		CalcAttr("min_x1",masscentrex-vax2)
		CalcAttr("min_y1",masscentrey-vay2)
		CalcAttr("min_x2",masscentrex+vax2)
		CalcAttr("min_y2",masscentrey+vay2)

		//save results
		set(largest_protrusions=objects)

		//Update whole cells object list with the largest protrusion calculation
		set(objects=cells_obj)
		setattr(lrgprot_area, largest_protrusions.area)
		setattr(lrgprot_roundness, largest_protrusions.roundness)
		setattr(lrgprot_contactlength, largest_protrusions.contactlength)
		setattr(lrgprot_prlength, largest_protrusions.prlength)
		setattr(lrgprot_intensity, largest_protrusions.intensity)
		setattr(lrgprot_HaralickContrast, largest_protrusions.HaralickContrast)
		setattr(lrgprot_HaralickCorrelation, largest_protrusions.HaralickCorrelation)
		setattr(lrgprot_HaralickHomogeneity, largest_protrusions.HaralickHomogeneity)
		setattr(lrgprot_HaralickSumVariance, largest_protrusions.HaralickSumVariance)
		setattr(lrgprot_SERBright, largest_protrusions.SERBright)
		setattr(lrgprot_SERDark, largest_protrusions.SERDark)
		setattr(lrgprot_SERedge, largest_protrusions.SERedge)
		setattr(lrgprot_serhole, largest_protrusions.serhole)
		setattr(lrgprot_SERridge, largest_protrusions.serridge)
		setattr(lrgprot_sersaddle, largest_protrusions.sersaddle)
		setattr(lrgprot_SERspot, largest_protrusions.serspot)
		setattr(lrgprot_servalley, largest_protrusions.servalley)
		setattr(lrgprot_compactness,  largest_protrusions.compactness)
		setattr(lrgprot_ruffle_area,  largest_protrusions.ruffle_area)
		calcattr(lrgprot_relative_ruffle_area, lrgprot_ruffle_area/lrgprot_area)
		setattr(lrgprot_ruffle_intensity,  largest_protrusions.ruffle_intensity)
		calcattr(lrgprot_relative_ruffle_intensity, lrgprot_ruffle_intensity/lrgprot_intensity)
		setattr(lrgprot_membrane_area, largest_protrusions.membrane_area)
		calcattr(lrgprot_relative_ruffle_to_membrane,  lrgprot_ruffle_area/lrgprot_membrane_area)

		//Save to calculate prot angle later from major axis
		setattr(lrgprot_mj_x1, largest_protrusions.mj_x1)
		setattr(lrgprot_mj_y1, largest_protrusions.mj_y1)
		setattr(lrgprot_mj_x2, largest_protrusions.mj_x2)
		setattr(lrgprot_mj_y2, largest_protrusions.mj_y2)
		setattr(lrgprot_min_x1, largest_protrusions.min_x1)
		setattr(lrgprot_min_y1, largest_protrusions.min_y1)
		setattr(lrgprot_min_x2, largest_protrusions.min_x2)
		setattr(lrgprot_min_y2, largest_protrusions.min_y2)
		setattr(lrgprot_masscenterx, largest_protrusions.masscentrex)
		setattr(lrgprot_masscentery,largest_protrusions.masscentrey)

		

		//Save the results again from objects to cells_obj
		set(cells_obj=objects)

		//////H.S: Second largest protrusion
		Xor(protrusion_area_stencil,image=largest_protrusions.body.image)	
		Mask2Stencil(image)
		Stencil2Objects(Stencil ,Neighbourhood=8)
		set(subobj=objects)
		CalcStat("max", objects=WorkingCells, Stencil=body, Image=image, AttrName="proThreshold")
		
		//Relate protrusions to cells
		CalcSubobjectAnalysis(SubObjects=subobj)

		//filter out protrusions based on area image by keeping only pixels with our threshold
		CalcThreshMask(borderobjectsstencil, proThreshold, Image=image)
		
		Stencil2Objects(objects.threshmask,Neighbourhood=8)
		set(scnd_largest_protrusions=objects)
		SetAttr(protrusions_scnd_largest,objects.body,objects=cells_obj)
		set(cells_obj=objects)
		//Copy protrusion features from protrusions to largest protrusion objects list
		CalcStat("max", objects=scnd_largest_protrusions, Stencil=body, Image=prot_contactlength_img, AttrName="contactlength")
		CalcStat("max", objects=objects, Stencil=body, Image=prot_prlength_img, AttrName="prlength")
		CalcStat("max", objects=objects, Stencil=body, Image=prot_intensity_img, AttrName="intensity")
		CalcStat("max", objects=objects, Stencil=body, Image=prot_compactness_img, AttrName="compactness")
		//find texture properties to differentiate lamilipodia from ruffles
		Texture::CalcSERFeatures( Image=im_prot,scale=.5)
		Texture::CalcHaralickFeatures(im_prot)
		CalcAttr("area")
		CalcAttr("roundness")
		//to detect ruffles find parts om membrane with higher intensity than core cells
		setattr( core_intensity, workingcells.cytoplasm_intensity)
		calcthreshmask(body, Image=IM_prot, Threshold=(.75*core_intensity))
		and(cells_obj.membraneregion.image,image=objects.threshmask.image)
		CalcStat("mean", objects=objects, Stencil=body, Image=image, AttrName="ruffle_intensity")
		CalcArea(image)
		RenameAttr(ruffle_area=image_area)
		//Find membrane area for that protrusion to normalize to
		and(cells_obj.membraneregion.image,image=objects.body.image)
		CalcArea(image)
		RenameAttr(membrane_area=image_area)

		//Find angle
		CalcEquivalentEllipse(VisualImage=im_prot)
		if(ShowIllustrations)
			set(lrg2_ellipse=Visualisation)
		End()

		CalcAttr("vax", (majoraxis/2)* majoraxisx)
		CalcAttr( "vay",(majoraxis/2)* majoraxisy)
		CalcAttr("mj_x1",masscentrex-vax)
		CalcAttr("mj_y1",masscentrey-vay)
		CalcAttr("mj_x2",masscentrex+vax)
		CalcAttr("mj_y2",masscentrey+vay)
		CalcAttr("vax2", (minoraxis/2)* minoraxisx)
		CalcAttr( "vay2",(minoraxis/2)* minoraxisy)
		CalcAttr("min_x1",masscentrex-vax2)
		CalcAttr("min_y1",masscentrey-vay2)
		CalcAttr("min_x2",masscentrex+vax2)
		CalcAttr("min_y2",masscentrey+vay2)

		//save results
		set(scnd_largest_protrusions=objects)

		//Update whole cells object list with the largest protrusion calculation
		set(objects=cells_obj)
		setattr(lrgprot2_area, scnd_largest_protrusions.area)
		setattr(lrgprot2_roundness, scnd_largest_protrusions.roundness)
		setattr(lrgprot2_contactlength, scnd_largest_protrusions.contactlength)
		setattr(lrgprot2_prlength, scnd_largest_protrusions.prlength)
		setattr(lrgprot2_intensity, scnd_largest_protrusions.intensity)
		setattr(lrgprot2_HaralickContrast, scnd_largest_protrusions.HaralickContrast)
		setattr(lrgprot2_HaralickCorrelation, scnd_largest_protrusions.HaralickCorrelation)
		setattr(lrgprot2_HaralickHomogeneity, scnd_largest_protrusions.HaralickHomogeneity)
		setattr(lrgprot2_HaralickSumVariance, scnd_largest_protrusions.HaralickSumVariance)
		setattr(lrgprot2_SERBright, scnd_largest_protrusions.SERBright)
		setattr(lrgprot2_SERDark, scnd_largest_protrusions.SERDark)
		setattr(lrgprot2_SERedge, scnd_largest_protrusions.SERedge)
		setattr(lrgprot2_serhole, scnd_largest_protrusions.serhole)
		setattr(lrgprot2_SERridge, scnd_largest_protrusions.serridge)
		setattr(lrgprot2_sersaddle, scnd_largest_protrusions.sersaddle)
		setattr(lrgprot2_SERspot, scnd_largest_protrusions.serspot)
		setattr(lrgprot2_servalley, scnd_largest_protrusions.servalley)
		setattr(lrgprot2_compactness,  scnd_largest_protrusions.compactness)
		setattr(lrgprot2_ruffle_area,  scnd_largest_protrusions.ruffle_area)
		calcattr(lrgprot2_relative_ruffle_area, lrgprot2_ruffle_area/lrgprot2_area)
		setattr(lrgprot2_ruffle_intensity, scnd_largest_protrusions.ruffle_intensity)
		calcattr(lrgprot2_relative_ruffle_intensity, lrgprot2_ruffle_intensity/lrgprot2_intensity)
		setattr(lrgprot2_membrane_area, scnd_largest_protrusions.membrane_area)
		calcattr(lrgprot2_relative_ruffle_to_membrane,  lrgprot2_ruffle_area/lrgprot2_membrane_area)

		//Save to calculate prot angle later from major axis
		setattr(lrgprot2_mj_x1, scnd_largest_protrusions.mj_x1)
		setattr(lrgprot2_mj_y1, scnd_largest_protrusions.mj_y1)
		setattr(lrgprot2_mj_x2, scnd_largest_protrusions.mj_x2)
		setattr(lrgprot2_mj_y2, scnd_largest_protrusions.mj_y2)
		setattr(lrgprot2_min_x1, scnd_largest_protrusions.min_x1)
		setattr(lrgprot2_min_y1, scnd_largest_protrusions.min_y1)
		setattr(lrgprot2_min_x2, scnd_largest_protrusions.min_x2)
		setattr(lrgprot2_min_y2, scnd_largest_protrusions.min_y2)
		setattr(lrgprot2_masscenterx, scnd_largest_protrusions.masscentrex)
		setattr(lrgprot2_masscentery,scnd_largest_protrusions.masscentrey)
		//update cells_obj objectlist
		set(cells_obj=objects)

		///////////////H.S:Tallest protrusions 
		//calculate area, width, length, texture, contact length for longest protrusion
		Blank(im_prot.width, im_prot.height)

		//Here image pixels will carry the prlength attribute
		CarryObjects(protrusions.body,protrusions.prlength*protrusions.area)

		//Use the image with pixels as prlength to calculate the largest protrusions within each WorkingCells object 
		//the max will be our threshold
		CalcStat("max", objects=WorkingCells, Stencil=body, Image=image, AttrName="proThreshold")
		
		//filter out protrusions based on area image by keeping only pixels with our threshold
		CalcThreshMask(borderobjectsstencil, proThreshold, Image=image,AutoRecalc =true)//thier is a bug here as I got an object with two tall prot
		Stencil2Objects(objects.threshmask,Neighbourhood=8)
		

		//calculate tallest protrusion features
		set(tallest_protrusions=objects)
		//Copy protrusion features from protrusions to largest protrusion objects list
		CalcStat("max", objects=tallest_protrusions, Stencil=body, Image=prot_contactlength_img, AttrName="contactlength")
		CalcStat("max", objects=objects, Stencil=body, Image=prot_prlength_img, AttrName="prlength")
		CalcStat("max", objects=objects, Stencil=body, Image=prot_intensity_img, AttrName="intensity")
		CalcStat("max", objects=objects, Stencil=body, Image=prot_compactness_img, AttrName="compactness")
		//find texture properties to differentiate lamilipodia from ruffles
		Texture::CalcSERFeatures( Image=im_prot,scale=.5)
		Texture::CalcHaralickFeatures(im_prot)
		CalcAttr("area")
		CalcAttr("roundness")

		//to detect ruffles find parts om membrane with higher intensity than core cells
		setattr( core_intensity, workingcells.cytoplasm_intensity)
		calcthreshmask(body, Image=im_prot, Threshold=(.75*core_intensity))
		and(cells_obj.membraneregion.image,image=objects.threshmask.image)
		CalcStat("mean", objects=objects, Stencil=body, Image=image, AttrName="ruffle_intensity")
		CalcArea(image)
		RenameAttr(ruffle_area=image_area)
		//Find membrane area for that protrusion to normalize to
		and(cells_obj.membraneregion.image,image=objects.body.image)
		CalcArea(image)
		RenameAttr(membrane_area=image_area)

		//Find angle
		CalcEquivalentEllipse(VisualImage=im_prot)
		if(ShowIllustrations)
			set(tall_ellipse=Visualisation)
		End()

		CalcAttr("vax", (majoraxis/2)* majoraxisx)
		CalcAttr( "vay",(majoraxis/2)* majoraxisy)
		CalcAttr("mj_x1",masscentrex-vax)
		CalcAttr("mj_y1",masscentrey-vay)
		CalcAttr("mj_x2",masscentrex+vax)
		CalcAttr("mj_y2",masscentrey+vay)
		CalcAttr("vax2", (minoraxis/2)* minoraxisx)
		CalcAttr( "vay2",(minoraxis/2)* minoraxisy)
		CalcAttr("min_x1",masscentrex-vax2)
		CalcAttr("min_y1",masscentrey-vay2)
		CalcAttr("min_x2",masscentrex+vax2)
		CalcAttr("min_y2",masscentrey+vay2)
		//save results
		set(tallest_protrusions=objects)
		SetAttr(protrusions_tallest,objects.body,objects=cells_obj)
		set(cells_obj=objects)
		//Update whole cells object list with the tallest protrusion calculation
		set(objects=cells_obj)
		setattr(tall_prot_area, tallest_protrusions.area)
		setattr(tall_prot_roundness, tallest_protrusions.roundness)
		setattr(tall_prot_contactlength, tallest_protrusions.contactlength)
		setattr(tall_prot_prlength, tallest_protrusions.prlength)
		setattr(tall_prot_intensity, tallest_protrusions.intensity)
		setattr(tall_prot_HaralickContrast, tallest_protrusions.HaralickContrast)
		setattr(tall_prot_HaralickCorrelation, tallest_protrusions.HaralickCorrelation)
		setattr(tall_prot_HaralickHomogeneity, tallest_protrusions.HaralickHomogeneity)
		setattr(tall_prot_HaralickSumVariance, tallest_protrusions.HaralickSumVariance)
		setattr(tall_prot_SERBright, tallest_protrusions.SERBright)
		setattr(tall_prot_SERDark, tallest_protrusions.SERDark)
		setattr(tall_prot_SERedge, tallest_protrusions.SERedge)
		setattr(tall_prot_serhole, tallest_protrusions.serhole)
		setattr(tall_prot_SERridge, tallest_protrusions.serridge)
		setattr(tall_prot_sersaddle, tallest_protrusions.sersaddle)
		setattr(tall_prot_SERspot, tallest_protrusions.serspot)
		setattr(tall_prot_servalley, tallest_protrusions.servalley)
		setattr(tall_prot_compactness, tallest_protrusions.compactness)
		setattr(tall_prot_ruffle_area, tallest_protrusions.ruffle_area)

		calcattr(tall_prot_relative_ruffle_area, tall_prot_ruffle_area/tall_prot_area)
		setattr(tall_prot_ruffle_intensity,  tallest_protrusions.ruffle_intensity)
		calcattr(tall_prot_relative_ruffle_intensity, tall_prot_ruffle_intensity/tall_prot_intensity)
		setattr(tall_prot_membrane_area, tallest_protrusions.membrane_area)
		calcattr(tall_prot_relative_ruffle_to_membrane,  tall_prot_ruffle_area/tall_prot_membrane_area)

		//Save to calculate prot angle later from major axis
		setattr(tall_prot_mj_x1, tallest_protrusions.mj_x1)
		setattr(tall_prot_mj_y1, tallest_protrusions.mj_y1)
		setattr(tall_prot_mj_x2, tallest_protrusions.mj_x2)
		setattr(tall_prot_mj_y2, tallest_protrusions.mj_y2)
		setattr(tall_prot_min_x1, tallest_protrusions.min_x1)
		setattr(tall_prot_min_y1, tallest_protrusions.min_y1)
		setattr(tall_prot_min_x2, tallest_protrusions.min_x2)
		setattr(tall_prot_min_y2, tallest_protrusions.min_y2)
		setattr(tall_prot_masscenterx, tallest_protrusions.masscentrex)
		setattr(tall_prot_masscentery,tallest_protrusions.masscentrey)
		



//*************Protrusions Polarity 
CalcAttr(p1_vec_x,lrgprot_masscenterx-masscentreX)
CalcAttr(p1_vec_y,lrgprot_masscentery-masscentreY)
CalcAttr(p2_vec_x,lrgprot2_masscenterx-masscentreX)
CalcAttr(p2_vec_y,lrgprot2_masscentery-masscentreY)
CalcAttr(p3_vec_x,tall_prot_masscenterx-masscentreX)
CalcAttr(p3_vec_y,tall_prot_masscentery-masscentreY)
CalcAttr(p3_vec_x,tall_prot_masscenterx-masscentreX)
CalcAttr(p3_vec_y,tall_prot_masscentery-masscentreY)
CalcAttr(cl_mj_vec_x,mj_x1-mj_x2) //Here the direction of vectors is not consistent so we can get 0 angle with prot if direction -> or 180 if dir <-, thus take abs
CalcAttr(cl_mj_vec_y,mj_y1-mj_y2)

CalcAttr(p1p2,p1_vec_x*p2_vec_x + p1_vec_y*p2_vec_y)//dot product between p1 p2
CalcAttr(p2p3,p3_vec_x*p2_vec_x + p3_vec_y*p2_vec_y)//dot product between p2 and p3
CalcAttr(p1p3,p3_vec_x*p1_vec_x + p3_vec_y*p1_vec_y)//dot product between p1 and p3
CalcAttr(mj_p1,p1_vec_x*cl_mj_vec_x + p1_vec_y*cl_mj_vec_y)//dot product between mj and p1
CalcAttr(mj_p2,cl_mj_vec_x*p2_vec_x + cl_mj_vec_y*p2_vec_y)//dot product between mj and p2

CalcAttr(p1norm,sqrt(p1_vec_x*p1_vec_x + p1_vec_y*p1_vec_y))//p1 norm
CalcAttr(p2norm,sqrt(p2_vec_x*p2_vec_x + p2_vec_y*p2_vec_y,))//p2 norm
CalcAttr(p3norm,sqrt(p3_vec_x*p3_vec_x + p3_vec_y*p3_vec_y))//p3 norm
CalcAttr(mj_norm,sqrt(cl_mj_vec_x*cl_mj_vec_x + cl_mj_vec_y*cl_mj_vec_y))//mj norm

CalcAttr(p1p2_theta,(p1p2/(p1norm*p2norm)))
CalcAttr(p1p3_theta,(p1p3/(p1norm*p3norm)))
CalcAttr(p2p3_theta,(p2p3/(p2norm*p3norm)))

CalcAttr(mj_p1_theta,abs((mj_p1/(p1norm*mj_norm))))
CalcAttr(mj_p2_theta,abs((mj_p2/(p2norm*mj_norm))))



CalcAttr(cl_p1_nr_dist,sqrt((masscentreX-lrgprot_masscenterX)^2+(masscentreY-lrgprot_masscenterY)^2)/full_length)//If it small angle and small distance, the prot expected to be all around the cell
CalcAttr(cl_p2_nr_dist,sqrt((masscentreX-lrgprot2_masscenterX)^2+(masscentreY-lrgprot2_masscenterY)^2)/full_length)

//summary feature
//1. polarized prot have small angle with cell mj axis with around .5 of cell length distance and 
CalcAttr(p1_polarity,cl_p1_nr_dist*(1-mj_p1_theta)+1/(lrgprot_contactlength/core_cell_border)+lrgprot_area/area)
CalcAttr(p2_polarity,cl_p2_nr_dist*(1-mj_p2_theta)+1/(lrgprot2_contactlength/core_cell_border)+lrgprot2_area/area)
CalcArea(protrusions_body)

		
RenameAttr(cell_protrusions_morphology__NrTotalArea2CellArea= protrusions_relative_area)
RenameAttr(cell_protrusions_morphology__NrTotalContactLength2CoreBorder= protrusions_relative_contactlength)

RenameAttr(cell_protrusions_morphology__LargestScndLargestTheta=p1p2_theta)
RenameAttr(cell_protrusions_morphology__LargestTallestTheta=p1p3_theta)
RenameAttr(cell_protrusions_morphology__ScndLargestTallestTheta=p2p3_theta)
RenameAttr(cell_protrusions_morphology__LargestPolarity=p1_polarity)
RenameAttr(cell_protrusions_morphology__ScndLargestPolarity=p2_polarity)
RenameAttr(cell_protrusions_morphology__NoProtrusions=No_of_protrusions)
RenameAttr(cell_protrusions_morphology__NrLargestDist2Length=cl_p1_nr_dist)
RenameAttr(cell_protrusions_morphology__NrScndLargestDist2Length=cl_p2_nr_dist)
RenameAttr(cell_protrusions_morphology__ScndLargestCompactness=lrgprot2_compactness)
RenameAttr(cell_protrusions_morphology__LargestTheta=mj_p1_theta)
RenameAttr(cell_protrusions_morphology__ScndLargestTheta=mj_p2_theta)
SetAttr(cell_protrusions_morphology__NrScndLargestArea2ProtArea,lrgprot2_area/ protrusions_body_area)
RenameAttr(cell_protrusions_texture__ScndLargestHaralickContrast=lrgprot2_HaralickContrast)
RenameAttr(cell_protrusions_texture__ScndLargestHaralickCorrelation=lrgprot2_HaralickCorrelation)
RenameAttr(cell_protrusions_texture__ScndLargestHaralickHomogeneity=lrgprot2_HaralickHomogeneity)
RenameAttr(cell_protrusions_texture__ScndLargestHaralickSumVariance=lrgprot2_HaralickSumVariance)
calcattr(cell_protrusions_intensity__NrScndLargestIntensity2MeanIntensity,lrgprot2_intensity/prot_mean_intensity)
RenameAttr(cell_protrusions_coordinates__ScndLargestMassCenterX=lrgprot2_masscenterx)
RenameAttr(cell_protrusions_coordinates__ScndLargestMassCenterY=lrgprot2_masscentery)
SetAttr(cell_protrusions_morphology__NrScndMembraneArea2Area,lrgprot2_membrane_area/lrgprot2_area)
RenameAttr(cell_protrusions_coordinates__ScndLargestMinorAxisX1=lrgprot2_min_x1)
RenameAttr(cell_protrusions_coordinates__ScndLargestMinorAxisX2=lrgprot2_min_x2)
RenameAttr(cell_protrusions_coordinates__ScndLargestMinorAxisY1=lrgprot2_min_y1)
RenameAttr(cell_protrusions_coordinates__ScndLargestMinorAxisY2=lrgprot2_min_y2)
RenameAttr(cell_protrusions_coordinates__ScndLargestMajorAxisX1=lrgprot2_mj_x1)
RenameAttr(cell_protrusions_coordinates__ScndLargestMajorAxisX2=lrgprot2_mj_x2)
RenameAttr(cell_protrusions_coordinates__ScndLargestMajorAxisY1=lrgprot2_mj_y1)
RenameAttr(cell_protrusions_coordinates__ScndLargestMajorAxisY2=lrgprot2_mj_y2)
setAttr(cell_protrusions_morphology__NrScndLargestPrLength2Celllength,lrgprot2_prlength/full_length)
RenameAttr(cell_protrusions_morphology__NrScndLargestRuffleArea2ProtArea=lrgprot2_relative_ruffle_area)
RenameAttr(cell_protrusions_intensity__NrScndLargestRuffleIntensity2ProtIntensity=lrgprot2_relative_ruffle_intensity)
RenameAttr(cell_protrusions_morphology__NrScndLargestRuffleAreaToMembrane=lrgprot2_relative_ruffle_to_membrane)
RenameAttr(cell_protrusions_morphology__ScndLargestRoundness=lrgprot2_roundness)
RenameAttr(cell_protrusions_texture__ScndLargestSerBright=lrgprot2_SERBright)
RenameAttr(cell_protrusions_texture__ScndLargestSerDark=lrgprot2_SERDark)
RenameAttr(cell_protrusions_texture__ScndLargestSerEdge=lrgprot2_SERedge)
RenameAttr(cell_protrusions_texture__ScndLargestSerHole=lrgprot2_SERHole)
RenameAttr(cell_protrusions_texture__ScndLargestSerRidge=lrgprot2_SERRidge)
RenameAttr(cell_protrusions_texture__ScndLargestSerSaddle=lrgprot2_SERSaddle)
RenameAttr(cell_protrusions_texture__ScndLargestSerSpot=lrgprot2_SERSpot)
RenameAttr(cell_protrusions_texture__ScndLargestSerValley=lrgprot2_SERValley)
setAttr(cell_protrusions_morphology__NrScndLargestContactLength2CoreBorder, lrgprot2_contactlength/core_cell_border)




RenameAttr(cell_protrusions_morphology__TallestCompactness=tall_prot_compactness)
SetAttr(cell_protrusions_morphology__NrTallestArea2ProtArea,tall_prot_area/protrusions_body_area)
RenameAttr(cell_protrusions_texture__TallestHaralickContrast=tall_prot_HaralickContrast)
RenameAttr(cell_protrusions_texture__TallestHaralickCorrelation=tall_prot_HaralickCorrelation)
RenameAttr(cell_protrusions_texture__TallestHaralickHomogeneity=tall_prot_HaralickHomogeneity)
RenameAttr(cell_protrusions_texture__TallestHaralickSumVariance=tall_prot_HaralickSumVariance)
calcAttr(cell_protrusions_intensity__NrTallestIntensity2MeanIntensity,tall_prot_intensity/prot_mean_intensity)
RenameAttr(cell_protrusions_coordinates__TallestMassCenterX=tall_prot_masscenterx)
RenameAttr(cell_protrusions_coordinates__TallestMassCenterY=tall_prot_masscentery)
SetAttr(cell_protrusions_morphology__NrTallestMembraneArea,tall_prot_membrane_area/tall_prot_area)
RenameAttr(cell_protrusions_coordinates__TallestMinorAxisX1=tall_prot_min_x1)
RenameAttr(cell_protrusions_coordinates__TallestMinorAxisX2=tall_prot_min_x2)
RenameAttr(cell_protrusions_coordinates__TallestMinorAxisY2=tall_prot_min_y1)
RenameAttr(cell_protrusions_coordinates__TallestMinorAxisY2=tall_prot_min_y2)
RenameAttr(cell_protrusions_coordinates__TallestMajorAxisX1=tall_prot_mj_x1)
RenameAttr(cell_protrusions_coordinates__TallestMajorAxisX2=tall_prot_mj_x2)
RenameAttr(cell_protrusions_coordinates__TallestMajorAxisY1=tall_prot_mj_y1)
RenameAttr(cell_protrusions_coordinates__TallestMajorAxisY2=tall_prot_mj_y2)
setAttr(cell_protrusions_morphology__NrTallestPrLength,tall_prot_prlength/full_length)
RenameAttr(cell_protrusions_morphology__NrTallestRuffleArea=tall_prot_relative_ruffle_area)
RenameAttr(cell_protrusions_intensity__NrTallestRuffleIntensity=tall_prot_relative_ruffle_intensity)
RenameAttr(cell_protrusions_morphology__NrTallestRuffleAreaToMembrane=tall_prot_relative_ruffle_to_membrane)
RenameAttr(cell_protrusions_morphology__TallestRoundness=tall_prot_roundness)
RenameAttr(cell_protrusions_texture__TallestSerBright=tall_prot_SERBright)
RenameAttr(cell_protrusions_texture__TallestSerDark=tall_prot_SERDark)
RenameAttr(cell_protrusions_texture__TallestSerEdge=tall_prot_SERedge)
RenameAttr(cell_protrusions_texture__TallestSerHole=tall_prot_SERHole)
RenameAttr(cell_protrusions_texture__TallestSerRidge=tall_prot_SERRidge)
RenameAttr(cell_protrusions_texture__TallestSerSaddle=tall_prot_SERSaddle)
RenameAttr(cell_protrusions_texture__TallestSerSpot=tall_prot_SERSpot)
RenameAttr(cell_protrusions_texture__TallestSerValley=tall_prot_SERValley)
setAttr(cell_protrusions_morphology__NrTallestContactLength, tall_prot_contactlength/core_cell_border)





RenameAttr(cell_protrusions_morphology__LargestCompactness=lrgprot_compactness)
SetAttr(cell_protrusions_morphology__NrLargestArea2ProtArea,lrgprot_area/protrusions_body_area)
RenameAttr(cell_protrusions_texture__LargestHaralickContrast=lrgprot_HaralickContrast)
RenameAttr(cell_protrusions_texture__LargestHaralickCorrelation=lrgprot_HaralickCorrelation)
RenameAttr(cell_protrusions_texture__LargestHaralickHomogeneity=lrgprot_HaralickHomogeneity)
RenameAttr(cell_protrusions_texture__LargestHaralickSumVariance=lrgprot_HaralickSumVariance)
calcAttr(cell_protrusions_intensity__NrLargestIntensity2MeanIntensity,lrgprot_intensity/prot_mean_intensity)
RenameAttr(cell_protrusions_coordinates__LargestMassCenterX=lrgprot_masscenterx)
RenameAttr(cell_protrusions_coordinates__LargestMassCenterY=lrgprot_masscentery)
SetAttr(cell_protrusions_morphology__NrMembraneArea,lrgprot_membrane_area/lrgprot2_area)
RenameAttr(cell_protrusions_coordinates__LargestMinorAxisX1=lrgprot_min_x1)
RenameAttr(cell_protrusions_coordinates__LargestMinorAxisX2=lrgprot_min_x2)
RenameAttr(cell_protrusions_coordinates__LargestMinorAxisY1=lrgprot_min_y1)
RenameAttr(cell_protrusions_coordinates__LargestMinorAxisY2=lrgprot_min_y2)
RenameAttr(cell_protrusions_coordinates__LargestMajorAxisX1=lrgprot_mj_x1)
RenameAttr(cell_protrusions_coordinates__LargestMajorAxisX2=lrgprot_mj_x2)
RenameAttr(cell_protrusions_coordinates__LargestMajorAxisY1=lrgprot_mj_y1)
RenameAttr(cell_protrusions_coordinates__LargestMajorAxisY2=lrgprot_mj_y2)
setAttr(cell_protrusions_morphology__NrLargestPrLength2CellLength,lrgprot_prlength/full_length)
RenameAttr(cell_protrusions_morphology__NrLargestRuffleArea2ProtArea=lrgprot_relative_ruffle_area)
RenameAttr(cell_protrusions_intensity__NrLargestRuffleIntensity2ProtIntensity=lrgprot_relative_ruffle_intensity)
RenameAttr(cell_protrusions_morphology__NrLargestRuffleAreaToMembrane=lrgprot_relative_ruffle_to_membrane)
RenameAttr(cell_protrusions_morphology__LargestRoundness=lrgprot_roundness)
RenameAttr(cell_protrusions_texture__LargestSerBright=lrgprot_SERBright)
RenameAttr(cell_protrusions_texture__LargestSerDark=lrgprot_SERDark)
RenameAttr(cell_protrusions_texture__LargestSerEdge=lrgprot_SERedge)
RenameAttr(cell_protrusions_texture__LargestSerHole=lrgprot_SERHole)
RenameAttr(cell_protrusions_texture__LargestSerRidge=lrgprot_SERRidge)
RenameAttr(cell_protrusions_texture__LargestSerSaddle=lrgprot_SERSaddle)
RenameAttr(cell_protrusions_texture__LargestSerSpot=lrgprot_SERSpot)
RenameAttr(cell_protrusions_texture__LargestSerValley=lrgprot_SERValley)
setAttr(cell_protrusions_morphology__NrLargestContactLength2CoreBorder, lrgprot_contactlength/core_cell_border)


RenameAttr(cell_protrusions_morphology__MeanCompactness=prot_mean_compactness)
SetAttr(cell_protrusions_morphology__NrMeanArea,prot_mean_area/area)
RenameAttr(cell_protrusions_texture__MeanHaralickContrast=prot_HaralickContrast_mean)
RenameAttr(cell_protrusions_texture__MeanHaralickCorrelation=prot_HaralickCorrelation_mean)
RenameAttr(cell_protrusions_texture__MeanHaralickHomogeneity=prot_HaralickHomogeneity_mean)
RenameAttr(cell_protrusions_texture__MeanHaralickSumVariance=prot_HaralickSumVariance_mean)
RenameAttr(cell_protrusions_intensity__MeanIntensity=prot_mean_intensity)
setAttr(cell_protrusions___NrMeanPrLength2CellLength,prot_mean_prlength/full_length)

RenameAttr(cell_protrusions_texture__MeanSerBright=prot_SERBright_mean)
RenameAttr(cell_protrusions_texture__MeanSerDark=prot_SERDark_mean)
RenameAttr(cell_protrusions_texture__MeanSerEdge=prot_SERedge_mean)
RenameAttr(cell_protrusions_texture__MeanSerHole=prot_SERHole_mean)
RenameAttr(cell_protrusions_texture__MeanSerRidge=prot_SERRidge_mean)
RenameAttr(cell_protrusions_texture__MeanSerSaddle=prot_SERSaddle_mean)
RenameAttr(cell_protrusions_morphology__NrRufflesArea2ProtrusionArea=protrusions_relative_rufflearea)
setAttr(cell_core_morphology__NrBorder2CellBorder,core_cell_border/Border_area)


DeleteAttr(tall_prot_intensity)
DeleteAttr(lrgprot_intensity)
DeleteAttr(lrgprot2_intensity)
DeleteAttr(protrusions_body_area)
DeleteAttr(p1norm)
DeleteAttr(p2norm)
DeleteAttr(p3norm)
DeleteAttr(p1p2)
DeleteAttr(p1p3)
DeleteAttr(p2p3)
DeleteAttr(p1_vec_x)
DeleteAttr(p1_vec_y)
DeleteAttr(p2_vec_x)
DeleteAttr(p2_vec_y)
DeleteAttr(p3_vec_x)
DeleteAttr(p3_vec_y)
DeleteAttr(prot_mean_area)


DeleteAttr(prot_mean_prlength)

DeleteAttr(tall_prot_ruffle_area)
DeleteAttr(tall_prot_ruffle_intensity)
DeleteAttr(tall_prot_membrane_area)
DeleteAttr(tall_prot_area)
DeleteAttr(tall_prot_contactlength)
DeleteAttr(tall_prot_prlength)


DeleteAttr(lrgprot_area)
DeleteAttr(lrgprot_contactlength)
DeleteAttr(lrgprot_membrane_area)
DeleteAttr(lrgprot_prlength)
DeleteAttr(lrgprot_ruffle_area)
DeleteAttr(lrgprot_ruffle_intensity)

DeleteAttr(lrgprot2_ruffle_area)
DeleteAttr(lrgprot2_ruffle_intensity)
DeleteAttr(lrgprot2_membrane_area)
DeleteAttr(lrgprot2_area)
DeleteAttr(lrgprot2_contactlength)
DeleteAttr(lrgprot2_prlength)
DeleteAttr(mj_norm)
DeleteAttr(mj_p1)
DeleteAttr(mj_p2)
DeleteAttr(cl_mj_vec_x)
DeleteAttr(cl_mj_vec_y)
DeleteAttr(core_cell_border)


set(cells_obj=objects)

		Delete(protrusions)
		Delete(largest_protrusions)
		Delete(scnd_largest_protrusions)
		Delete(tallest_protrusions)
		Delete(prot_rest)
End()
//End of protrusion calculation

	///////////////////////////////////////////////////////////////////////////////// ER analysis
if (IN_ChanER>0)
	set(IM_ER = _["IM_CH" & IN_ChanER])   

	Cytoplasm_detection_select_3(IM_ER)
	And(wholecells.cytoplasm,image=cells_obj.cytoplasm.mask)
	SetAttr(cytoplasm,image,objects=wholecells)
	CalcWidthLength()
	set(er_objects=objects)
	CalcSubobjectAnalysis(body,SubObjects=er_objects,Objects=cells_obj)
	CalcSubobjectStat("mean",Attribute="full_length")
	CalcSubobjectStat("mean",Attribute="half_width")
	rename(tempobj=objects)
	setAttr(ER_body_filled,tempobj.BorderObjectsStencil,objects=cells_obj)
	setAttr(ER_body_filled_length,tempobj.SubObj_full_length_mean,objects=objects)
	setAttr(ER_body_filled_half_width,tempobj.SubObj_half_width_mean,objects=objects)
	set(cells_obj=objects)

	CalcSubobjectAnalysis(cytoplasm,SubObjects=er_objects,Objects=cells_obj)
	setAttr(ER_body,objects.BorderObjectsStencil,objects=cells_obj)

	Morphology::CalcTextuMorphoFeatures(objects, "ER_body","centers",image=im_ER, RequestContainer=RequestContainer,prefix="ER__star_PDI_")
		DeleteAttr(ReferenceIntensity)
		DeleteAttr(ReferenceRadius)
		DeleteAttr(x0)
		DeleteAttr(y0)
	CalcArea(ER_body)
	CalcBorder(ER_body)

	CalcIntensity(ER_body,im_er)
	if(showillustrations)
			ImageView(objects.ER_body_border,"ER body",image=im_ER)
	End()
	RenameAttr(ER__intensity_PDI_intensity=ER_body_intensity)
	ThreshMask(ER_body,.5*ER__intensity_PDI_intensity,Image=im_er)
	calcerosion(1,threshmask)
	set(cells_obj=objects)


	//Extract information for the main ER 
	//copy main ER to another stencil to filter very small parts
	mask2stencil(objects.threshmask_eroded.image)
	stencil2objects()

	CalcArea()
	CalcWidthLength()
	ObjectFilter(area>100)	
	CalcSubobjectAnalysis(SubObjects=objects,Objects=cells_obj)
	CalcSubobjectStat("mean",Attribute="full_length")
	CalcSubobjectStat("mean",Attribute="half_width")
	set(tempobj=objects)
	SetAttr(ER_main,tempobj.borderobjectsstencil,objects=cells_obj)
	SetAttr(ER_main_fragments,tempobj.numberofsubobjects,objects=objects)
	setAttr(ER_main_length,tempobj.SubObj_full_length_mean,objects=objects)
	setAttr(ER_main_half_width,tempobj.SubObj_half_width_mean,objects=objects)
	
	Morphology::CalcTextuMorphoFeatures(objects, "ER_main","", image=im_ER, RequestContainer=RequestContainer,prefix="ER_main_star_PDI_")
		DeleteAttr(ReferenceIntensity)
		DeleteAttr(ReferenceRadius)
		DeleteAttr(x0)
		DeleteAttr(y0)

	CalcBorder(ER_main)
	CalcArea(ER_main)
	CalcArea(ER_main_border)
	calcintensity(ER_main, IM_er)
	RenameAttr(ER_main_intensity_PDI_intensity=ER_main_intensity)
	if(showillustrations)
			ImageView(objects.ER_main_border,"ER main",image=im_ER,gamma=2.5)
	End()
	ObjectFilter("ER_main_intensity_PDI_intensity>0 and er_main_area>0")	
	if (objects.count==0)
		continue() 
	End()
	//Extract information for peripheral ER
	

	xor(objects.ER_body,image=objects.ER_main)
	SetAttr(ER_peripheral,image)
	CalcErosion(1,ER_peripheral)
	CalcErosion(-1,ER_peripheral_eroded)
	RenameAttr(ER_peripheral=ER_peripheral_eroded_eroded)
	CalcBorder(ER_peripheral)
	CalcArea(ER_peripheral)

//calc intensities regardlesss of ER seg
	CalcIntensity(ringregion,im_er)
	CalcIntensity(membraneregion,Im_er)
	if(showillustrations)
		ImageView(objects.ER_peripheral_border,"ER peripheral",image=im_ER,gamma=2.5)
	End()
	CalcIntensity(ER_peripheral,im_er)
	CalcSkeletonByIntensity(ER_main,Image=IM_er, SkeletonType="cornerconnected", IntensityEvaluationMode=0, IntensityEvalParam=-80)
	CalcBorder(ER_main_skeleton)
	calcarea(ER_main_skeleton_border)
	CalcNodes(ER_main_skeleton)
	ImageView(objects.ER_main_skeleton,"ER Main Skeleton",image=im_ER)

	CalcSkeletonByIntensity(ER_peripheral,Image=IM_er, SkeletonType="cornerconnected", IntensityEvaluationMode=0, IntensityEvalParam=-80)
	CalcBorder(ER_peripheral_skeleton)
	calcarea(ER_peripheral_skeleton_border)
	CalcNodes(ER_peripheral_skeleton)
	ImageView(objects.ER_peripheral_skeleton,"ER peripheral Skeleton",image=im_ER)
	
	calcAttr(ER_peripheral_morphology__NrSkeletonBorder2area,ER_peripheral_skeleton_border_area/ER_peripheral_area)
	calcAttr(ER_peripheral_morphology__NrSkeletonNodesCount2border2area,ER_peripheral_skeleton_node_count/ER_peripheral_morphology__NrSkeletonBorder2area)
	calcAttr(ER_main_morphology__NrSkeletonBorder2area,ER_main_skeleton_border_area/ER_main_area)
	calcAttr(ER_main_morphology__NrSkeletonNodesCount2border2area,ER_main_skeleton_node_count/ER_main_morphology__NrSkeletonBorder2area)


	////ER orientation
	//Main Er Orientation
	CalcMassCentre(ER_body,Weights=im_er)
	CalcMassCentre(ER_main,Weights=im_er)	
	CalcMassCentre(ER_peripheral,Weights=im_er)	
	ObjectFilter("ER_main_MassCentreX==ER_main_MassCentreX and ER_main_MassCentreY==ER_main_MassCentreY and ER_peripheral_MassCentreX==ER_peripheral_MassCentreX and ER_peripheral_MassCentreY==ER_peripheral_MassCentreY")
	if (objects.count==0)
		continue() 
	End()
	CalcAttr(ER__morphology__CenterDistanceToNucleusCenter,sqrt(((ER_body_MassCentreX-centers_MassCentreX)^2)+((ER_body_MassCentreY-centers_MassCentreY)^2)))
	CalcAttr(ER_main_morphology__CenterDistanceToNucleusCenter,sqrt(((ER_main_MassCentreX-centers_MassCentreX)^2)+((ER_main_MassCentreY-centers_MassCentreY)^2)))
	CalcAttr(ER_peripheral_morphology__CenterDistanceToNucleusCenter,sqrt(((ER_peripheral_MassCentreX-centers_MassCentreX)^2)+((ER_peripheral_MassCentreY-centers_MassCentreY)^2)))
	CalcAttr(ER__morphology__CenterDistanceToCellCenter,sqrt(((ER_body_MassCentreX-MassCentreX)^2)+((ER_body_MassCentreY-MassCentreY)^2)))
	CalcAttr(ER_main_morphology__CenterDistanceToCellCenter,sqrt(((ER_main_MassCentreX-MassCentreX)^2)+((ER_main_MassCentreY-MassCentreY)^2)))
	CalcAttr(ER_peripheral_morphology__CenterDistanceToCellCenter,sqrt(((ER_peripheral_MassCentreX-MassCentreX)^2)+((ER_peripheral_MassCentreY-MassCentreY)^2)))
	CalcAttr(ER_peripheral_morphology__CenterDistanceToERMainCenter,sqrt(((ER_peripheral_MassCentreX-ER_main_MassCentreX)^2)+((ER_peripheral_MassCentreY-ER_main_MassCentreY)^2)))

	//Normalize
	CalcAttr(ER__morphology__NrCenterDistanceToNucleusCenter2Length,ER__morphology__CenterDistanceToNucleusCenter/full_length)
	CalcAttr(ER_main_morphology__NrCenterDistanceToNucleusCenter2Length,ER_main_morphology__CenterDistanceToNucleusCenter/full_length)
	CalcAttr(ER_peripheral_morphology__NrCenterDistanceToNucleusCenter2Length,ER_peripheral_morphology__CenterDistanceToNucleusCenter/full_length)
	CalcAttr(ER__morphology__NrCenterDistanceToCellCenter2Length,ER__morphology__CenterDistanceToCellCenter/full_length)
	CalcAttr(ER_main_morphology__NrCenterDistanceToCellCenter2Length,ER_main_morphology__CenterDistanceToCellCenter/full_length)
	CalcAttr(ER_peripheral_morphology__NrCenterDistanceToCellCenter2Length,ER_peripheral_morphology__CenterDistanceToCellCenter/full_length)
	CalcAttr(ER_peripheral_morphology__NrCenterDistanceToERMainCenter2Length,ER_peripheral_morphology__CenterDistanceToERMainCenter/full_length)

	DeleteAttr(ER__morphology__CenterDistanceToNucleusCenter)
	DeleteAttr(ER_main_morphology__CenterDistanceToNucleusCenter)
	DeleteAttr(ER_peripheral_morphology__CenterDistanceToNucleusCenter)
	DeleteAttr(ER__morphology__CenterDistanceToCellCenter)
	DeleteAttr(ER_main_morphology__CenterDistanceToCellCenter)
	DeleteAttr(ER_peripheral_morphology__CenterDistanceToCellCenter)
	DeleteAttr(ER_peripheral_morphology__CenterDistanceToERMainCenter)

		CalcEquivalentEllipse(StencilName=ER_main,VisualImage=nuc_distanceimage)
		CalcAttr("ER_main_vax", (ER_main_majoraxis/2)* ER_main_majoraxisx)
		CalcAttr( "ER_main_vay",(ER_main_majoraxis/2)* ER_main_majoraxisy)
		CalcAttr("ER_main_mj_x1",round(ER_main_masscentrex- ER_main_vax))
		CalcAttr("ER_main_mj_y1",round(ER_main_masscentrey-ER_main_vay))
		CalcAttr("ER_main_mj_x2",round(ER_main_masscentrex+ER_main_vax))
		CalcAttr("ER_main_mj_y2",round(ER_main_masscentrey+ER_main_vay))
		CalcAttr("ER_main_mj_1", point(ER_main_mj_x1,ER_main_mj_y1))
		CalcAttr("ER_main_mj_2", point(ER_main_mj_x2,ER_main_mj_y2))
		CalcAttr("ER_main_vax2", (ER_main_minoraxis/2)* ER_main_minoraxisx)
		CalcAttr( "ER_main_vay2",(ER_main_minoraxis/2)* ER_main_minoraxisy)
		CalcAttr("ER_main_min_x1",round(ER_main_masscentrex-ER_main_vax2))
		CalcAttr("ER_main_min_y1",round(ER_main_masscentrey-ER_main_vay2))
		CalcAttr("ER_main_min_x2",round(ER_main_masscentrex+ER_main_vax2))
		CalcAttr("ER_main_min_y2",round(ER_main_masscentrey+ER_main_vay2))
		CalcAttr("ER_main_min_1", point(ER_main_min_x1,ER_main_min_y1))
		CalcAttr("ER_main_min_2", point(ER_main_min_x2,ER_main_min_y2))

		Tabulate("x+1", objects.@count)
		Rename(objectsIndex=result)

		backorder(objectsIndex,objects.ER_main_mj_1,blank)
		Set(result.@type = "stencil")
		SetAttr("ER_main_mj1",result.vector)

		backorder(objectsIndex,objects.ER_main_mj_2,blank)
		Set(result.@type = "stencil")
		SetAttr("ER_main_mj2",result.vector)

		backorder(objectsIndex,objects.ER_main_min_1,blank)
		Set(result.@type = "stencil")
		SetAttr("ER_main_min1",result.vector)

		backorder(objectsIndex,objects.ER_main_min_2,blank)
		Set(result.@type = "stencil")
		SetAttr("ER_main_min2",result.vector)

		CalcStat("mean",Stencil=ER_main_mj1,Image=nuc_distanceimage,AttrName="ER_main_morphology__MajorAxis1DistansceToNucleus")
		CalcStat("mean",Stencil=ER_main_mj2,Image=nuc_distanceimage,AttrName="ER_main_morphology__MajorAxis2DistansceToNucleus")		
		CalcStat("mean",Stencil=ER_main_min1,Image=nuc_distanceimage,AttrName="ER_main_morphology__MinorAxis1DistansceToNucleus")
		CalcStat("mean",Stencil=ER_main_min2,Image=nuc_distanceimage,AttrName="ER_main_morphology__MinorAxis2DistansceToNucleus")

		CalcStat("mean",Stencil=ER_main_mj1,Image=cyto_distanceimage,AttrName="ER_main_morphology__MajorAxis1DistansceToMembrane")
		CalcStat("mean",Stencil=ER_main_mj2,Image=cyto_distanceimage,AttrName="ER_main_morphology__MajorAxis2DistansceToMembrane")		
		CalcStat("mean",Stencil=ER_main_min1,Image=cyto_distanceimage,AttrName="ER_main_morphology__MinorAxis1DistansceToMembrane")
		CalcStat("mean",Stencil=ER_main_min2,Image=cyto_distanceimage,AttrName="ER_main_morphology__MinorAxis2DistansceToMembrane")
		calcAttr(ER_main_morphology__NrMajoraxis1DistansceToMembrane2Length,ER_main_morphology__MajorAxis1DistansceToMembrane/full_length)
		calcAttr(ER_main_morphology__NrMajoraxis2DistansceToMembrane2Length,ER_main_morphology__MajorAxis2DistansceToMembrane/full_length)
		calcAttr(ER_main_morphology__NrMajoraxis1DistansceToMembrane2Length,ER_main_morphology__MinorAxis1DistansceToMembrane/full_length)
		calcAttr(ER_main_morphology__NrMajoraxis2DistansceToMembrane2Length,ER_main_morphology__MinorAxis2DistansceToMembrane/full_length)
		
		calcAttr(ER_main_morphology__NrMajoraxis1DistansceToMembrane2Length,ER_main_morphology__MajorAxis1DistansceToNucleus/full_length)
		calcAttr(ER_main_morphology__NrMajoraxis2DistansceToMembrane2Length,ER_main_morphology__MajorAxis2DistansceToNucleus/full_length)
		calcAttr(ER_main_morphology__NrMajoraxis1DistansceToMembrane2Length,ER_main_morphology__MinorAxis1DistansceToNucleus/full_length)
		calcAttr(ER_main_morphology__NrMajoraxis2DistansceToMembrane2Length,ER_main_morphology__MinorAxis2DistansceToNucleus/full_length)		

		DeleteAttr(ER_main_morphology__MajorAxis1DistansceToMembrane)
		DeleteAttr(ER_main_morphology__MajorAxis1DistansceToNucleus)
		DeleteAttr(ER_main_morphology__MajorAxis2DistansceToMembrane)
		DeleteAttr(ER_main_morphology__MajorAxis2DistansceToNucleus)
		DeleteAttr(ER_main_morphology__MinorAxis1DistansceToMembrane)
		DeleteAttr(ER_main_morphology__MinorAxis1DistansceToNucleus)
		DeleteAttr(ER_main_morphology__MinorAxis2DistansceToMembrane)
		DeleteAttr(ER_main_morphology__MinorAxis2DistansceToNucleus)
		////Calc distances images stats based on ER stencils
		//to membrance
		CalcStat("min",Stencil=ER_main,Image=cyto_distanceimage,AttrName="ER_main_morphology__MinimumDistansceToMembrane")
		CalcStat("max",Stencil=ER_main,Image=cyto_distanceimage,AttrName="ER_main_morphology__MaximumDistansceToMembrane")
		CalcStat("median",Stencil=ER_main,Image=cyto_distanceimage,AttrName="ER_main_morphology__MedianDistansceToMembrane")
		CalcStat("stddev",Stencil=ER_main,Image=cyto_distanceimage,AttrName="ER_main_morphology__StddevDistansceToMembrane")
		
		//To nucleus
		//Only Er main max to nuc as the min is 0
		CalcStat("max",Stencil=ER_main,Image=nuc_distanceimage,AttrName="ER_main_morphology__MaximumDistansceFromNucleus")
		CalcStat("median",Stencil=ER_main,Image=nuc_distanceimage,AttrName="ER_main_morphology__MedianDistansceFromNucleus")
		CalcStat("stddev",Stencil=ER_main,Image=nuc_distanceimage,AttrName="ER_main_morphology__stdevDistansceFromNucleus")
		
		//ER_Peripheral to nucleus
		CalcStat("min",Stencil=ER_peripheral,Image=nuc_distanceimage,AttrName="ER_peripheral_morphology__MinimumDistansceFromNucleus")
		CalcStat("median",Stencil=ER_peripheral,Image=nuc_distanceimage,AttrName="ER_peripheral_morphology__MedianDistansceFromNucleus")
		CalcStat("stddev",Stencil=ER_peripheral,Image=nuc_distanceimage,AttrName="ER_peripheral_morphology__StddevDistansceFromNucleus")

		//Normalize except for std
		CalcAttr(ER_main_morphology__NrMinimumDistansceToMembrane2Length,ER_main_morphology__MinimumDistansceToMembrane/full_length)
		CalcAttr(ER_main_morphology__NrMaximumDistansceToMembrane2Length,ER_main_morphology__MaximumDistansceToMembrane/full_length)
		CalcAttr(ER_main_morphology__NrMedianDistansceToMembrane2Length,ER_main_morphology__MedianDistansceToMembrane/full_length)
		CalcAttr(ER_main_morphology__NrMaximumDistansceFromNucleus2Length,ER_main_morphology__MaximumDistansceFromNucleus/full_length)
		CalcAttr(ER_main_morphology__NrMedianDistansceFromNucleus2Length,ER_main_morphology__MedianDistansceFromNucleus/full_length)
		CalcAttr(ER_peripheral_morphology__NrMinimumDistansceFromNucleus2Length,ER_peripheral_morphology__MinimumDistansceFromNucleus/full_length)
		CalcAttr(ER_peripheral_morphology__NrMedianDistansceFromNucleus2Length,ER_peripheral_morphology__MedianDistansceFromNucleus/full_length)
		

		DeleteAttr(ER_main_morphology__MinimumDistansceToMembrane)
		DeleteAttr(ER_main_morphology__MaximumDistansceToMembrane)
		DeleteAttr(ER_main_morphology__MedianDistansceToMembrane)
		DeleteAttr(ER_main_morphology__MaximumDistansceFromNucleus)
		DeleteAttr(ER_main_morphology__MedianDistansceFromNucleus)
		DeleteAttr(ER_peripheral_morphology__MinimumDistansceFromNucleus)
		DeleteAttr(ER_peripheral_morphology__MedianDistansceFromNucleus)
		
		////   ER texture
		//1. ER_main 
		//SER features 
		Texture::CalcSERFeatures(IM_ER, 1, "ER_main")
		renameattr(ER_main_texture_PDI_SERbright = SERBright)
		renameattr(ER_main_texture_PDI_SERdark = SERdark)
		renameattr(ER_main_texture_PDI_SERedge = seredge)
		renameattr(ER_main_texture_PDI_serhole= serhole)
		renameattr(ER_main_texture_PDI_serridge = serridge)
		renameattr(ER_main_texture_PDI_sersaddle = sersaddle)
		renameattr(ER_main_texture_PDI_serspot = serspot)
		renameattr(ER_main_texture_PDI_servalley = servalley)
		
		//Haralick texture 
		Texture::CalcHaralickFeatures(IM_ER,1, stencilname="ER_main")
		renameattr(ER_main_texture_PDI_haralickcontrast = haralickcontrast)
		renameattr(ER_main_texture_PDI_haralickcorrelation = haralickcorrelation)
		renameattr(ER_main_texture_PDI_haralickhomogeneity = haralickhomogeneity)
		renameattr(ER_main_texture_PDI_haralicksumvariance = haralicksumvariance)

		//Gabor texture
		Texture::CalcGaborFeatures(IM_ER, 2, 2.5, vec(1,2), vec(1,2), 16, "cytoplasm", "regional", objects)
		renameattr(ER_main_texture_PDI_GaborMax1= GaborMax1)
		renameattr(ER_main_texture_PDI_GaborMax2 = GaborMax2)
		renameattr(ER_main_texture_PDI_GaborMax3 = GaborMax3)
		renameattr(ER_main_texture_PDI_GaborMax4= GaborMax4)
		renameattr(ER_main_texture_PDI_GaborMin1 = GaborMin1)
		renameattr(ER_main_texture_PDI_GaborMin2 = GaborMin2)
		renameattr(ER_main_texture_PDI_GaborMin3 = GaborMin3)
		renameattr(ER_main_texture_PDI_GaborMin4 = GaborMin4)
		
		//1. ER_peripheral 
		//SER features 
		Texture::CalcSERFeatures(IM_ER, 1, "ER_peripheral")
		renameattr(ER_peripheral_texture_PDI_SERbright = SERBright)
		renameattr(ER_peripheral_texture_PDI_SERdark = SERdark)
		renameattr(ER_peripheral_texture_PDI_SERedge = seredge)
		renameattr(ER_peripheral_texture_PDI_serhole= serhole)
		renameattr(ER_peripheral_texture_PDI_serridge = serridge)
		renameattr(ER_peripheral_texture_PDI_sersaddle = sersaddle)
		renameattr(ER_peripheral_texture_PDI_serspot = serspot)
		renameattr(ER_peripheral_texture_PDI_servalley = servalley)
		
		//Haralick texture 
		Texture::CalcHaralickFeatures(IM_ER,1, stencilname="ER_peripheral")
		renameattr(ER_peripheral_texture_PDI_haralickcontrast = haralickcontrast)
		renameattr(ER_peripheral_texture_PDI_haralickcorrelation = haralickcorrelation)
		renameattr(ER_peripheral_texture_PDI_haralickhomogeneity = haralickhomogeneity)
		renameattr(ER_peripheral_texture_PDI_haralicksumvariance = haralicksumvariance)

		//Gabor texture
		Texture::CalcGaborFeatures(IM_ER, 2, 2.5, vec(1,2), vec(1,2), 16, "ER_peripheral", "regional", objects)
		renameattr(ER_peripheral_texture_PDI_GaborMax1= GaborMax1)
		renameattr(ER_peripheral_texture_PDI_GaborMax2 = GaborMax2)
		renameattr(ER_peripheral_texture_PDI_GaborMax3 = GaborMax3)
		renameattr(ER_peripheral_texture_PDI_GaborMax4= GaborMax4)
		renameattr(ER_peripheral_texture_PDI_GaborMin1 = GaborMin1)
		renameattr(ER_peripheral_texture_PDI_GaborMin2 = GaborMin2)
		renameattr(ER_peripheral_texture_PDI_GaborMin3 = GaborMin3)
		renameattr(ER_peripheral_texture_PDI_GaborMin4 = GaborMin4)
		



		//Features renaming
		calcAttr(ER__morphology__NrArea2CellArea,er_body_area/area)
		calcAttr(ER_main_morphology__NrArea2ERArea,er_main_area/er_body_area)
		calcAttr(ER_peripheral_morphology__NrArea2ERArea,er_peripheral_area/er_body_area)
		calcAttr(ER_peripheral_morphology__NrArea2MainERArea,er_peripheral_area/er_main_area)
		RenameAttr(ER_main_morphology__Eccentricity=ER_main_eccentricity)

		RenameAttr(ER_peripheral_intensity_PDI_Intensity=er_peripheral_intensity)
		CalcAttr(ER_peripheral_intensity_PDI_NrIntensity2MainERIntensity,ER_peripheral_intensity_PDI_intensity/ER_main_intensity_PDI_intensity)
		calcAttr(ER_main_intensity_PDI_NrIntensity2ERIntensity,ER_peripheral_intensity_PDI_intensity/ER__intensity_PDI_intensity)
		calcAttr(ER_peripheral_intensity_PDI_NrIntensity2ERIntensity,ER_main_intensity_PDI_intensity/ER__intensity_PDI_intensity)
		calcAttr(ER_ringregion_intnesity_PDI_NrIntenstiy2ERMainIntensity,ringregion_intensity/ER_main_intensity_PDI_intensity)
		RenameAttr(ER_ringregion_intnesity_PDI_Intenstiy=ringregion_intensity)
		calcAttr(ER_membraneregion_intnesity_PDI_NrIntenstiy2ERIntensity,membraneregion_intensity/ER__intensity_PDI_intensity)
		RenameAttr(ER_membraneregion_intnesity_PDI_Intenstiy=membraneregion_intensity)
		RenameAttr(ER__coordinates__masscentreX=ER_body_masscentreX)
		RenameAttr(ER__coordinates__masscentreY=ER_body_masscentreY)
		RenameAttr(ER_main_coordinates__masscentreX=ER_main_masscentreX)
		RenameAttr(ER_main_coordinates__masscentreY=ER_main_masscentreY)
		RenameAttr(ER_peripheral_coordinates__masscentreX=ER_peripheral_masscentreX)
		RenameAttr(ER_peripheral_coordinates__masscentreY=ER_peripheral_masscentreY)

		DeleteAttr(er_main_skeleton_node_count)
		DeleteAttr(er_main_skeleton_border_area)
		DeleteAttr(er_peripheral_skeleton_node_count)
		DeleteAttr(er_peripheral_skeleton_border_area)
		DeleteAttr(ER_main_border_area)
		DeleteAttr(er_body_area)
		DeleteAttr(er_main_area)
		DeleteAttr(er_peripheral_area)


		DeleteAttr(ER_main_majoraxis)
		DeleteAttr(ER_main_majoraxisX)
		DeleteAttr(ER_main_majoraxisY)
		DeleteAttr(ER_main_minoraxis)
		DeleteAttr(ER_main_minoraxisX)
		DeleteAttr(ER_main_minoraxisY)	
		DeleteAttr(ER_main_min_1)	
		DeleteAttr(ER_main_min_2)	
		DeleteAttr(ER_main_min_x1)	
		DeleteAttr(ER_main_min_x2)	
		DeleteAttr(ER_main_min_y1)	
		DeleteAttr(ER_main_min_y2)	

		DeleteAttr(ER_main_mj_1)	
		DeleteAttr(ER_main_mj_2)	
		DeleteAttr(ER_main_mj_x1)	
		DeleteAttr(ER_main_mj_x2)	
		DeleteAttr(ER_main_mj_y1)	
		DeleteAttr(ER_main_mj_y2)	
		DeleteAttr(ER_main_vax)
		DeleteAttr(ER_main_vay)
		DeleteAttr(ER_main_vax2)
		DeleteAttr(ER_main_vay2)


		set(cells_obj=objects)
	
End()


///////////////////////////////////////////////////////////////////////////////// Tubilin analysis
If( IN_ChanTublin>0)

		 set(IM_Tub = _["IM_CH" & IN_ChanTublin])   

		////Tublin bundels
		
		CalcIntensity(body,im_tub,objects=cells_obj)
		RenameAttr(cell_cytoskeleton_intensity_tublin_intensity=intensity)
		CalcIntensity(centers,im_tub)
		calcAttr(nucleus_cytoskeleton_intensity_tublin_NrIntensity2CellIntensity,centers_intensity/cell_cytoskeleton_intensity_tublin_intensity)
		DeleteAttr(centers_intensity)
		ThreshMask(body,2.2*cell_cytoskeleton_intensity_tublin_intensity,Image=im_tub)
		
		if(ShowIllustrations)
			ImageView(objects.threshmask,"tublin threshmask / Bundels",image=im_tub)
		End()

		RenameAttr(bundels_threshmask=threshmask)
		CalcArea(bundels_threshmask)
		calcAttr(Cell_cytoskeleton_morphology_tublin_NrBundlesArea2CellArea,bundels_threshmask_area/area)
		
		//Bundels orientation
		CalcStat("Mean",Stencil=bundels_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrBundelMeanDistnaceToMembrane" )
		CalcStat("Max",Stencil=bundels_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrBundelMaxDistnaceToMembrane" )
		CalcStat("Min",Stencil=bundels_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrBundelMinDistnaceToMembrane" )
		CalcStat("Mean",Stencil=bundels_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrBundelMeanDistnaceToNucleus" )
		CalcStat("Max",Stencil=bundels_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrBundelMaxDistnaceToNucleus" )
		CalcStat("Min",Stencil=bundels_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrBundelMinDistnaceToNucleus" )

		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMeanDistnaceToMembrane2Length,Cell_cytoskeleton_morphology_tublin_NrBundelMeanDistnaceToMembrane/full_length)
		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMaxDistnaceToMembrane2Length,Cell_cytoskeleton_morphology_tublin_NrBundelMaxDistnaceToMembrane/full_length)
		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMinDistnaceToMembrane2Length,Cell_cytoskeleton_morphology_tublin_NrBundelMinDistnaceToMembrane/full_length)
		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMeanDistnaceToNucleus2Length,Cell_cytoskeleton_morphology_tublin_NrBundelMeanDistnaceToNucleus/full_length)
		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMaxDistnaceToNucleus2Length,Cell_cytoskeleton_morphology_tublin_NrBundelMaxDistnaceToNucleus/full_length)
		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMinDistnaceToNucleus2Length,Cell_cytoskeleton_morphology_tublin_NrBundelMinDistnaceToNucleus/full_length)

		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMeanDistnaceToMembrane)
		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMaxDistnaceToMembrane)
		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMinDistnaceToMembrane)
		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMeanDistnaceToNucleus)
		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMaxDistnaceToNucleus)
		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrBundelMinDistnaceToNucleus)


		//Microtubule center
		ThreshMask(body,3*cell_cytoskeleton_intensity_tublin_intensity,Image=im_tub)
		if(ShowIllustrations)
			ImageView(objects.threshmask,"tublin high threshmask/ Spot ",image=im_tub)
		End()

		RenameAttr(bundels_high_threshmask=threshmask)
		CalcArea(bundels_high_threshmask)
		calcAttr(Cell_cytoskeleton_morphology_tublin_NrSpotArea2CellArea,bundels_high_threshmask_area/area)
		CalcStat("Mean",Stencil=bundels_high_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrSpotMeanDistnaceToMembrane" )
		CalcStat("Max",Stencil=bundels_high_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrSpotMaxDistnaceToMembrane" )
		CalcStat("Min",Stencil=bundels_high_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrSpotMinDistnaceToMembrane" )
		CalcStat("Mean",Stencil=bundels_high_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrSpotMeanDistnaceToNucleus" )
		CalcStat("Max",Stencil=bundels_high_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrSpotMaxDistnaceToNucleus" )
		CalcStat("Min",Stencil=bundels_high_threshmask,Image=nuc_distanceimage,AttrName="Cell_cytoskeleton_morphology_tublin_NrSpotMinDistnaceToNucleus" )

		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMeanDistnaceToMembrane2Length,Cell_cytoskeleton_morphology_tublin_NrSpotMeanDistnaceToMembrane/full_length)
		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMaxDistnaceToMembrane2Length,Cell_cytoskeleton_morphology_tublin_NrSpotMaxDistnaceToMembrane/full_length)
		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMinDistnaceToMembrane2Length,Cell_cytoskeleton_morphology_tublin_NrSpotMinDistnaceToMembrane/full_length)
		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMeanDistnaceToNucleus2Length,Cell_cytoskeleton_morphology_tublin_NrSpotMeanDistnaceToNucleus/full_length)
		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMaxDistnaceToNucleus2Length,Cell_cytoskeleton_morphology_tublin_NrSpotMaxDistnaceToNucleus/full_length)
		CalcAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMinDistnaceToNucleus2Length,Cell_cytoskeleton_morphology_tublin_NrSpotMinDistnaceToNucleus/full_length)

		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMeanDistnaceToMembrane)
		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMaxDistnaceToMembrane)
		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMinDistnaceToMembrane)
		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMeanDistnaceToNucleus)
		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMaxDistnaceToNucleus)
		DeleteAttr(Cell_cytoskeleton_morphology_tublin_NrSpotMinDistnaceToNucleus)

	
		//Tublin star
		Morphology::CalcTextuMorphoFeatures(objects, "body","centers", image=im_tub, RequestContainer=RequestContainer,prefix="cell_nuclei_star_tublin_")
		DeleteAttr(ReferenceIntensity)
		DeleteAttr(ReferenceRadius)
		DeleteAttr(x0)
		DeleteAttr(y0)
		//Tublin structure
		SlidingParabolaTransform(Im_tub,.5)
		Minus(Signal,0,neg_method ="zero")
		Rename(threshmask_signal=result)
		SlidingParabolaTransform(Im_tub,.05)
		Minus(Signal,0,neg_method ="zero")
		Rename(Signal=result)
		CalcIntensity(body,threshmask_signal)
		RenameAttr(cell_cytoskeleton_intensity_tublin_CorrectedIntensity=intensity)
		ThreshMask(cytoplasm,.9*cell_cytoskeleton_intensity_tublin_CorrectedIntensity,Image=threshmask_signal)
		


		CalcSkeletonByIntensity(threshmask,Image=signal, SkeletonType="nodeavoiding", IntensityEvaluationMode=0, IntensityEvalParam=0)
		RenameAttr(tublin_skeleton_low=threshmask_skeleton)
		if(showillustrations)
			ImageView(objects.tublin_skeleton_low,"tublin Skeleton low",image=im_tub)
		End()
		CalcNodes(tublin_skeleton_low)

		CalcBorder(tublin_skeleton_low)
		CalcArea(tublin_skeleton_low_border)


		CalcSkeletonByIntensity(threshmask,Image=signal, SkeletonType="nodeavoiding", IntensityEvaluationMode=0, IntensityEvalParam=-50)
		RenameAttr(tublin_skeleton_high=threshmask_skeleton)
		if(showillustrations)
			ImageView(objects.tublin_skeleton_high,"tublin Skeleton high",image=im_tub)
		End()
		
		CalcNodes(tublin_skeleton_high)
		CalcBorder(tublin_skeleton_high)
		CalcArea(tublin_skeleton_high_border)


		Texture::CalcSERFeatures(IM_tub, 1, "cytoplasm")
		set(tublin_edge=serillustrations[3])
		CalcSkeletonByIntensity(cytoplasm,Image=tublin_edge, SkeletonType="nodeavoiding", IntensityEvaluationMode=2, IntensityEvalParam=-70)
		RenameAttr(tublin_skeleton_edge=cytoplasm_skeleton)
		if(showillustrations)
			ImageView(objects.tublin_skeleton_edge,"tublin Skeleton edge",image=im_tub)
		End()
		CalcNodes(tublin_skeleton_edge)
		CalcBorder(tublin_skeleton_edge)
		CalcArea(tublin_skeleton_edge_border)

		calcAttr(cytoplasm_cytoskeleton_skeleton_tublin_NrLowBorder2CytoplasmArea,tublin_skeleton_low_border_area/cytoplasm_area)
		calcAttr(cytoplasm_cytoskeleton_skeleton_tublin_NrLowNodesCount2Border2Area,tublin_skeleton_low_node_count/cytoplasm_cytoskeleton_skeleton_tublin_NrLowBorder2cytoplasmarea)
		CalcAttr(cytoplasm_cytoskeleton_skeleton_tublin_NrHighBorder2CellArea,(tublin_skeleton_high_border_area)/cytoplasm_area)
		calcAttr(cytoplasm_cytoskeleton_skeleton_tublin_NrHighNodesCount2Border2area,tublin_skeleton_high_node_count/cytoplasm_cytoskeleton_skeleton_tublin_NrHighBorder2cellarea)
		CalcAttr(cytoplasm_cytoskeleton_skeleton_tublin_NrEdgeBorder2cellArea,(tublin_skeleton_edge_border_area)/cytoplasm_area)
		calcAttr(cytoplasm_cytoskeleton_skeleton_tublin_NrEdgeNodesCount2Border2Area,tublin_skeleton_edge_node_count/cytoplasm_cytoskeleton_skeleton_tublin_NrEdgeBorder2cellarea)
		DeleteAttr(tublin_skeleton_low_border_area)
		DeleteAttr(tublin_skeleton_low_node_count)
		DeleteAttr(tublin_skeleton_high_border_area)
		DeleteAttr(tublin_skeleton_high_node_count)
		DeleteAttr(tublin_skeleton_edge_border_area)
		DeleteAttr(tublin_skeleton_edge_node_count)



		//Tublin texture in the cytoplasm
		//SER features are precalculated for skeletomn claculations 
		renameattr(cytoplasm_cytoskeleton_texture_tublin_SERbright = SERBright)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_SERdark = SERdark)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_SERedge = seredge)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_serhole= serhole)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_serridge = serridge)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_sersaddle = sersaddle)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_serspot = serspot)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_servalley = servalley)
		
		//Haralick texture 
		Texture::CalcHaralickFeatures(IM_tub,1, stencilname="cytoplasm")
		renameattr(cytoplasm_cytoskeleton_texture_tublin_haralickcontrast = haralickcontrast)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_haralickcorrelation = haralickcorrelation)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_haralickhomogeneity = haralickhomogeneity)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_haralicksumvariance = haralicksumvariance)

	//Gabor texture

		Texture::CalcGaborFeatures(IM_tub, 2, 2.5, vec(1,2), vec(1,2), 16, "cytoplasm", "regional", objects)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_GaborMax1= GaborMax1)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_GaborMax2 = GaborMax2)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_GaborMax3 = GaborMax3)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_GaborMax4= GaborMax4)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_GaborMin1 = GaborMin1)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_GaborMin2 = GaborMin2)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_GaborMin3 = GaborMin3)
		renameattr(cytoplasm_cytoskeleton_texture_tublin_GaborMin4 = GaborMin4)
		
		DeleteAttr(bundels_threshmask_area)
		DeleteAttr( bundels_high_threshmask_area )
		//update cells object cells
		set(cells_obj=objects)
End()

	///////////////////////////////////////////////////////////////////////////////// Mito analysis
	if (IN_ChanMito>0)
		set(IM_Mito = _["IM_CH" & IN_ChanMito])   
		
		//obtain clean image for mitochendria
		SlidingParabolaTransform(IM_Mito,.01)
		Minus(signal,0,neg_method="zero")

		Rename(Signalpoint5=result)
		

		CalcIntensity(cytoplasm,Signalpoint5,objects=cells_obj)
		renameattr(mito__intensity_mitotracker_intensity=cytoplasm_intensity)
		
		ThreshMask(cytoplasm,1*mito__intensity_mitotracker_intensity,Image=Signalpoint5)
		RenameAttr(mito_body=threshmask)
		
		
		//generate skelton for mito and calc features
		CalcSkeletonByIntensity(mito_body,Image=Signalpoint5, SkeletonType="cornerconnected", IntensityEvaluationMode=0, IntensityEvalParam=-200)
		if(showillustrations)
			ImageView(objects.mito_body_skeleton,"Mito_skeleton",image=im_mito)
		End()

		CalcNodes(mito_body_skeleton)
		CalcBorder(mito_body_skeleton)
		CalcArea(mito_body_skeleton)
		CalcArea(mito_body_skeleton_border)
		CalcArea(mito_body)
		CalcBorder(mito_body)
		CalcArea(mito_body_border)
		calcAttr(mito__morphology__NrBorder2CellBorder,mito_body_border_area/border_area)
		calcAttr(mito__morphology__NrArea2CellArea,mito_body_area/area)
		calcAttr(mito__morphology__NrSkeletonBorder2MitoArea,mito_body_skeleton_border_area/mito_body_area)
		calcAttr(mito__morphology__NrSkeletonArea2MitoArea,mito_body_skeleton_area/mito_body_area)
		calcAttr(mito__morphology__NrSkeletonNodesCount2Border2Area,mito_body_skeleton_node_count/mito__morphology__NrSkeletonBorder2MitoArea,)

		set(cells_obj=objects)


		////Mito orientation
		//Get the main body of Mito
		mask2stencil(objects.mito_body)
		stencil2objects()
		set(mito_objects=objects)	
	    CalcSubobjectAnalysis(SubObjects=mito_objects,Objects=cells_obj)			
        set(mito_objects=objects)			
	    //number of mito segments			
         SetAttr(mito__morphology__NrNumSegments2MitoArea,mito_objects.NumberOfSubobjects/mito_body_area,objects=cells_obj | cells_obj=objects)			
		
		//save cells_obj
		set(cells_obj=objects)
         Stencil2Objects(cells_obj.mito_body_skeleton | mito_branches=objects)	
         CalcSubobjectAnalysis(SubObjects=mito_branches,Objects=cells_obj)			
         SetAttr(mito__morphology__NrNumBranches2SegmentNo,objects.NumberOfSubobjects/mito_objects.NumberOfSubobjects,objects=cells_obj | cells_obj=objects)
		set(cells_obj=objects)
		CalcArea(objects=mito_objects)
		ObjectFilter(area>100)	
		CalcSubobjectAnalysis(SubObjects=objects,Objects=cells_obj)

		SetAttr(mito_main,objects.borderobjectsstencil,objects=cells_obj)
		//Mito main star
		Morphology::CalcTextuMorphoFeatures(objects, "mito_main", image=im_mito, RequestContainer=RequestContainer,prefix="mito_main_star_mitotracker_")
		DeleteAttr(ReferenceIntensity)
		DeleteAttr(ReferenceRadius)
		DeleteAttr(x0)
		DeleteAttr(y0)
		CalcBorder(mito_main)
		CalcArea(mito_main)
		CalcArea(mito_main_border)
		calcintensity(mito_main, IM_mito)
		RenameAttr(mito_main_intensity_mitotracker_intensity=mito_main_intensity)

		CalcMassCentre(mito_main)
		ObjectFilter("mito_main_MassCentreX==mito_main_MassCentreX and mito_main_MassCentreY==mito_main_MassCentreY")

	if (objects.count==0)
		continue() 
	End()
		CalcAttr(mito_main_morphology__NrArea2MitoArea,mito_main_area/mito_body_area)
		CalcAttr(mito_main_morphology__NrBorder2MitoBorder,mito_main_border_area/mito_body_border_area)
		CalcAttr(mito_main_morphology__CenterDistance2NucleusCenter,sqrt(((mito_main_MassCentreX-centers_MassCentreX)^2)+((mito_main_MassCentreY-centers_MassCentreY)^2)))
		CalcAttr(mito_main_morphology__CenterDistance2CellCenter,sqrt(((mito_main_MassCentreX-MassCentreX)^2)+((mito_main_MassCentreY-MassCentreY)^2)))
		CalcAttr(mito_main_morphology__NrCenterDistance2NucleusCenter2Length,mito_main_morphology__CenterDistance2NucleusCenter/full_length)
		CalcAttr(mito_main_morphology__CenterDistance2CellCenter,mito_main_morphology__CenterDistance2CellCenter/full_length)


		CalcEquivalentEllipse(StencilName=mito_main,VisualImage=nuc_distanceimage)
		CalcAttr("mito_main_vax", (mito_main_majoraxis/2)* mito_main_majoraxisx)
		CalcAttr( "mito_main_vay",(mito_main_majoraxis/2)* mito_main_majoraxisy)
		CalcAttr("mito_main_mj_x1",round(mito_main_masscentrex- mito_main_vax))
		CalcAttr("mito_main_mj_y1",round(mito_main_masscentrey-mito_main_vay))
		CalcAttr("mito_main_mj_x2",round(mito_main_masscentrex+mito_main_vax))
		CalcAttr("mito_main_mj_y2",round(mito_main_masscentrey+mito_main_vay))
		CalcAttr("mito_main_mj_1", point(mito_main_mj_x1,mito_main_mj_y1))
		CalcAttr("mito_main_mj_2", point(mito_main_mj_x2,mito_main_mj_y2))
		CalcAttr("mito_main_vax2", (mito_main_minoraxis/2)* mito_main_minoraxisx)
		CalcAttr( "mito_main_vay2",(mito_main_minoraxis/2)* mito_main_minoraxisy)
		CalcAttr("mito_main_min_x1",round(mito_main_masscentrex-mito_main_vax2))
		CalcAttr("mito_main_min_y1",round(mito_main_masscentrey-mito_main_vay2))
		CalcAttr("mito_main_min_x2",round(mito_main_masscentrex+mito_main_vax2))
		CalcAttr("mito_main_min_y2",round(mito_main_masscentrey+mito_main_vay2))
		CalcAttr("mito_main_min_1", point(mito_main_min_x1,mito_main_min_y1))
		CalcAttr("mito_main_min_2", point(mito_main_min_x2,mito_main_min_y2))

		Tabulate("x+1", objects.@count)
		Rename(objectsIndex=result)

		BackOrder(objectsIndex,objects.mito_main_mj_1,blank)
		Set(result.@type = "stencil")
		SetAttr("mito_main_mj1",result.vector)

		BackOrder(objectsIndex,objects.mito_main_mj_2,blank)
		Set(result.@type = "stencil")
		SetAttr("mito_main_mj2",result.vector)

		BackOrder(objectsIndex,objects.mito_main_min_1,blank)
		Set(result.@type = "stencil")
		SetAttr("mito_main_min1",result.vector)

		BackOrder(objectsIndex,objects.mito_main_min_2,blank)
		Set(result.@type = "stencil")
		SetAttr("mito_main_min2",result.vector)

		CalcStat("mean",Stencil=mito_main_mj1,Image=nuc_distanceimage,AttrName="mito_main_morphology__MajorAxis1DistansceToNucleus")
		CalcStat("mean",Stencil=mito_main_mj2,Image=nuc_distanceimage,AttrName="mito_main_morphology__MajorAxis2DistansceToNucleus")		
		CalcStat("mean",Stencil=mito_main_min1,Image=nuc_distanceimage,AttrName="mito_main_morphology__MinorAxis1DistansceToNucleus")
		CalcStat("mean",Stencil=mito_main_min2,Image=nuc_distanceimage,AttrName="mito_main_morphology__MinorAxis2DistansceToNucleus")

		CalcStat("mean",Stencil=mito_main_mj1,Image=cyto_distanceimage,AttrName="mito_main_morphology__MajorAxis1DistansceToMembrane")
		CalcStat("mean",Stencil=mito_main_mj2,Image=cyto_distanceimage,AttrName="mito_main_morphology__MajorAxis2DistansceToMembrane")		
		CalcStat("mean",Stencil=mito_main_min1,Image=cyto_distanceimage,AttrName="mito_main_morphology__MinorAxis1DistansceToMembrane")
		CalcStat("mean",Stencil=mito_main_min2,Image=cyto_distanceimage,AttrName="mito_main_morphology__MinorAxis2DistansceToMembrane")
		calcAttr(mito_main_morphology__NrMajoraxis1DistansceToMembrane2Length,mito_main_morphology__MajorAxis1DistansceToMembrane/full_length)
		calcAttr(mito_main_morphology__NrMajoraxis2DistansceToMembrane2Length,mito_main_morphology__MajorAxis2DistansceToMembrane/full_length)
		calcAttr(mito_main_morphology__NrMajoraxis1DistansceToMembrane2Length,mito_main_morphology__MinorAxis1DistansceToMembrane/full_length)
		calcAttr(mito_main_morphology__NrMajoraxis2DistansceToMembrane2Length,mito_main_morphology__MinorAxis2DistansceToMembrane/full_length)

		calcAttr(mito_main_morphology__NrMajoraxis1DistansceToMembrane2Length,mito_main_morphology__MajorAxis1DistansceToNucleus/full_length)
		calcAttr(mito_main_morphology__NrMajoraxis2DistansceToMembrane2Length,mito_main_morphology__MajorAxis2DistansceToNucleus/full_length)
		calcAttr(mito_main_morphology__NrMajoraxis1DistansceToMembrane2Length,mito_main_morphology__MinorAxis1DistansceToNucleus/full_length)
		calcAttr(mito_main_morphology__NrMajoraxis2DistansceToMembrane2Length,mito_main_morphology__MinorAxis2DistansceToNucleus/full_length)
		
		DeleteAttr(mito_main_morphology__MajorAxis1DistansceToMembrane)
		DeleteAttr(mito_main_morphology__MajorAxis1DistansceToNucleus)
		DeleteAttr(mito_main_morphology__MajorAxis2DistansceToMembrane)
		DeleteAttr(mito_main_morphology__MajorAxis2DistansceToNucleus)
		DeleteAttr(mito_main_morphology__MinorAxis1DistansceToMembrane)
		DeleteAttr(mito_main_morphology__MinorAxis1DistansceToNucleus)
		DeleteAttr(mito_main_morphology__MinorAxis2DistansceToMembrane)
		DeleteAttr(mito_main_morphology__MinorAxis2DistansceToNucleus)
		////Calc distances images stats based on Mito stencils
		//to membrance
		CalcStat("min",Stencil=mito_body,Image=cyto_distanceimage,AttrName="mito__morphology__MinimumDistansceToMembrane")
		CalcStat("max",Stencil=mito_body,Image=cyto_distanceimage,AttrName="mito__morphology__MaximumDistansceToMembrane")
		CalcStat("median",Stencil=mito_body,Image=cyto_distanceimage,AttrName="mito__morphology__MedianDistansceToMembrane")
		CalcStat("stddev",Stencil=mito_body,Image=cyto_distanceimage,AttrName="mito__morphology__StddevDistansceToMembrane")
		
		//To nucleus
		//Only  max to nuc as the min is 0
		CalcStat("max",Stencil=mito_body,Image=nuc_distanceimage,AttrName="mito__morphology__MaximumDistansceFromNucleus")
		CalcStat("median",Stencil=mito_body,Image=nuc_distanceimage,AttrName="mito__morphology__MedianDistansceFromNucleus")
		CalcStat("stddev",Stencil=mito_body,Image=nuc_distanceimage,AttrName="mito__morphology__stdevDistansceFromNucleus")
		
		//Normalize except for std variables
		CalcAttr(mito__morphology__NrMinimumDistansceToMembrane2Length,mito__morphology__MinimumDistansceToMembrane/full_length)
		CalcAttr(mito__morphology__NrMaximumDistansceToMembrane2Length,mito__morphology__MaximumDistansceToMembrane/full_length)
		CalcAttr(mito__morphology__NrMedianDistansceToMembrane2Length,mito__morphology__MedianDistansceToMembrane/full_length)
		CalcAttr(mito__morphology__NrMaximumDistansceFromNucleus2Length,mito__morphology__MaximumDistansceFromNucleus/full_length)
		CalcAttr(mito__morphology__NrMedianDistansceFromNucleus2Length,mito__morphology__MedianDistansceFromNucleus/full_length)
		
		DeleteAttr(mito__morphology__MinimumDistansceToMembrane)
		DeleteAttr(mito__morphology__MaximumDistansceToMembrane)
		DeleteAttr(mito__morphology__MedianDistansceToMembrane)
		DeleteAttr(mito__morphology__MaximumDistansceFromNucleus)
		DeleteAttr(mito__morphology__MedianDistansceFromNucleus)

		////   Mito texture
		//SER features 
		Texture::CalcSERFeatures(IM_mito, 1, "mito_body")
		renameattr(mito_main_texture_mitotracker_SERBright = SERBright)
		renameattr(mito_main_texture_mitotracker_SERDark = SERdark)
		renameattr(mito_main_texture_mitotracker_SEREdge = SERedge)
		renameattr(mito_main_texture_mitotracker_SERHole= SERhole)
		renameattr(mito_main_texture_mitotracker_SERRidge = SERridge)
		renameattr(mito_main_texture_mitotracker_SERSaddle = SERsaddle)
		renameattr(mito_main_texture_mitotracker_SERSpot = SERspot)
		renameattr(mito_main_texture_mitotracker_SERValley = SERvalley)
		
		//Haralick texture 
		Texture::CalcHaralickFeatures(IM_mito,1, stencilname="mito_body")
		renameattr(mito_main_texture_mitotracker_haralickcontrast = haralickcontrast)
		renameattr(mito_main_texture_mitotracker_haralickcorrelation = haralickcorrelation)
		renameattr(mito_main_texture_mitotracker_haralickhomogeneity = haralickhomogeneity)
		renameattr(mito_main_texture_mitotracker_haralicksumvariance = haralicksumvariance)

		//Gabor texture
		Texture::CalcGaborFeatures(IM_mito, 2, 2.5, vec(1,2), vec(1,2), 16, "mito_body", "regional", objects)
		renameattr(mito_main_texture_mitotracker_GaborMax1= GaborMax1)
		renameattr(mito_main_texture_mitotracker_GaborMax2= GaborMax2)
		renameattr(mito_main_texture_mitotracker_GaborMax3= GaborMax3)
		renameattr(mito_main_texture_mitotracker_GaborMax4= GaborMax4)
		renameattr(mito_main_texture_mitotracker_GaborMin1 = GaborMin1)
		renameattr(mito_main_texture_mitotracker_GaborMin2 = GaborMin2)
		renameattr(mito_main_texture_mitotracker_GaborMin3 = GaborMin3)
		renameattr(mito_main_texture_mitotracker_GaborMin4 = GaborMin4)

	
		RenameAttr(mito_main_morphology__Eccentricity=mito_main_eccentricity)
		RenameAttr(mito_main_coordinates__masscentreX=mito_main_masscentreX)
		RenameAttr(mito_main_coordinates__masscentreY=mito_main_masscentreY)
		//RenameAttr(mito_main_intensity_mitotracker_intensity=mito_main_intensity_mitotracker_intensity)
		DeleteAttr(mito_body_area)
		DeleteAttr(mito_body_border_area)
		DeleteAttr(mito_body_skeleton_area)
		DeleteAttr(mito_body_skeleton_border_area)
		DeleteAttr(mito_body_skeleton_node_count)
		DeleteAttr(mito_main_area)
		DeleteAttr(mito_main_border_area)
		
		DeleteAttr(mito_main_majoraxis)
		DeleteAttr(mito_main_majoraxisX)
		DeleteAttr(mito_main_majoraxisY)

		DeleteAttr(mito_main_minoraxis)
		DeleteAttr(mito_main_minoraxisX)
		DeleteAttr(mito_main_minoraxisY)
		DeleteAttr(mito_main_min_1)
		DeleteAttr(mito_main_min_2)
		DeleteAttr(mito_main_min_x1)
		DeleteAttr(mito_main_min_x2)
		DeleteAttr(mito_main_min_y1)
		DeleteAttr(mito_main_min_y2)
		DeleteAttr(mito_main_mj_1)
		DeleteAttr(mito_main_mj_2)
		DeleteAttr(mito_main_mj_x1)
		DeleteAttr(mito_main_mj_x2)
		DeleteAttr(mito_main_mj_y1)
		DeleteAttr(mito_main_mj_y2)
				
		DeleteAttr(mito_main_vax)
		DeleteAttr(mito_main_vax2)
		DeleteAttr(mito_main_vay)
		DeleteAttr(mito_main_vay2)

		set(cells_obj=objects)


	End()




///////////////////////////////////////////////////////////////////////////////// Actin
if (IN_ChanActin>0)

		set(IM_Actin = _["IM_CH" & IN_ChanActin])   
		set(objects=cells_obj)
		
		//Actin star
		Morphology::CalcTextuMorphoFeatures(objects, "body","centers", image=im_actin, RequestContainer=RequestContainer,prefix="cell_nuclei_star_actin_")
		DeleteAttr(ReferenceIntensity)
		DeleteAttr(ReferenceRadius)
		DeleteAttr(x0)
		DeleteAttr(y0)
		RgbJoin(red=im_nuclei,green=im_actin,blue=im_actin)
		if(showillustrations)
			ImageView(objects.border,label="Actin overlay",image=im_actin,gamma=1.5)
		End()
		//Apply threshmask to find high regoin of actin
		SlidingParabolaTransform(Im_actin,.5)
		Minus(Signal,0,neg_method ="zero")
		Rename(threshmask_signal=result)
		SlidingParabolaTransform(Im_actin,.05)
		Minus(Signal,0,neg_method ="zero")
		Rename(Signal=result)

		CalcIntensity(cytoplasm,threshmask_signal)
		ThreshMask(cytoplasm,1.1*cytoplasm_intensity,Image=threshmask_signal)
		RenameAttr(actin_threshmask=threshmask)
		if(ShowIllustrations)
			ImageView( objects.actin_threshmask, "High Actin", gamma=1.7, image=IM_Actin )
		End()
		
		CalcBorder(actin_threshmask)
		CalcArea(actin_threshmask_border)
		CalcArea(actin_threshmask)
		CalcAttr(cytoplasm_cytoskeleton_morphology_actin_NrThreshmaskBorder2ThreshmaskArea,actin_threshmask_border_area/actin_threshmask_area)
		CalcAttr(cytoplasm_cytoskeleton_morphology_actin_NrThreshmaskArea2CytoplasmArea,actin_threshmask_area/cytoplasm_area)
		
		//intensities
			
		CalcIntensity(body,im_actin)
		RenameAttr(cell_cytoskeleton_intensity_actin_Intensity=intensity)
		CalcIntensity(centers,im_actin)
		calcAttr(nucleus_cytoskeleton_intensity_actin_NrIntensity2CellIntensity,centers_intensity/cell_cytoskeleton_intensity_actin_Intensity)
		DeleteAttr(centers_intensity)
		CalcIntensity(cytoplasm,im_actin,CalcStdDev=true)
		RenameAttr(cytoplasm_cytoskeleton_intensity_actin_Intensity=cytoplasm_intensity)		
		RenameAttr(cytoplasm_cytoskeleton_intensity_actin_IntensityStdDev=cytoplasm_intensity_stddev)		
		CalcIntensity(actin_threshmask,im_actin,CalcStdDev=true)
		RenameAttr(cytoplasm_cytoskeleton_intensity_actin_ThreshmaskIntensity=actin_threshmask_intensity)		
		CalcAttr(cytoplasm_cytoskeleton_intensity_actin_NrThreshmaskIntensity2CytoplasmIntensity,cytoplasm_cytoskeleton_intensity_actin_ThreshmaskIntensity/cytoplasm_cytoskeleton_intensity_actin_Intensity)

		//Actin overlap with membrane region
		And(objects.actin_threshmask,image=objects.membraneregion)
		SetAttr(actin_membrane,image)
		CalcArea(actin_membrane)
		CalcArea(membraneregion)
		CalcAttr(membrane_cytoskeleton_morphology_actin_NrThreshmaskActin2MembraneActinArea,membraneregion_area/actin_membrane_area)
		DeleteAttr(actin_membrane_area)
		DeleteAttr(membraneregion_area)

		if(IN_ChanProt>0) 
			And(objects.actin_threshmask,image=objects.protrusions_body)
			SetAttr(protrusions_actin,image)
			CalcIntensity(protrusions_body,Image=im_actin,CalcStdDev =true)			
			CalcArea(protrusions_actin)
			And(objects.actin_threshmask,image=objects.protrusions_largest)
			SetAttr(protrusions_largest_actin,image)
			CalcArea(protrusions_largest)
			CalcIntensity(protrusions_largest_actin,Image=im_actin,,CalcStdDev =true)
			CalcArea(protrusions_largest_actin)
			And(objects.actin_threshmask,image=objects.protrusions_scnd_largest)
			SetAttr(protrusions_scndlargest_actin,image)
			CalcArea(protrusions_scnd_largest)
			CalcIntensity(protrusions_scndlargest_actin,Image=im_actin,CalcStdDev =true)
			CalcArea(protrusions_scndlargest_actin)
			And(objects.actin_threshmask,image=objects.protrusions_tallest)
			SetAttr(protrusions_tallest_actin,image)
			CalcArea(protrusions_tallest)
			CalcArea(protrusions_tallest_actin)
			CalcIntensity(protrusions_tallest_actin,Image=im_actin,CalcStdDev =true)
		    CalcArea(protrusions_body)
			
			calcAttr(actin_protrusions_morphology_actin_NrActinThreshmaskOverlapArea2ProtrusionArea,protrusions_actin_area/protrusions_body_area)
			calcAttr(actin_protrusions_morphology_actin_NrActinThreshmaskOverlapArea2LargestProtrusionArea,protrusions_largest_actin_area /protrusions_largest_area)
			calcAttr(actin_protrusions_morphology_actin_NrActinThreshmaskOverlapArea2ScndLargestProtrusionArea,protrusions_scndlargest_actin_area /protrusions_scnd_largest_area)
			calcAttr(actin_protrusions_morphology_actin_NrActinThreshmaskOverlapArea2TallestProtrusionArea,protrusions_tallest_actin_area /protrusions_tallest_area)
			calcAttr(actin_protrusions_morphology_actin_NrIntensity2CellIntensity,protrusions_body_intensity/cell_cytoskeleton_intensity_actin_Intensity)
			calcAttr(actin_protrusions_morphology_actin_NrLargestIntensity2ProtrusionsIntensity,protrusions_largest_actin_intensity/protrusions_body_intensity)
			calcAttr(actin_protrusions_morphology_actin_NrScndLargestIntensity2ProtrusionsIntensity,protrusions_scndlargest_actin_intensity/protrusions_body_intensity)
			calcAttr(actin_protrusions_morphology_actin_NrTallestIntensity2ProtrusionsIntensity,protrusions_tallest_actin_intensity/protrusions_body_intensity)
			calcAttr(actin_protrusions_morphology_actin_IntensityStddev,protrusions_body_intensity_stddev)
			calcAttr(actin_protrusions_morphology_actin_LargestIntensityStddev,protrusions_largest_actin_intensity_stddev) 
			calcAttr(actin_protrusions_morphology_actin_ScndLargestIntensityStddev,protrusions_scndlargest_actin_intensity_stddev) 
			calcAttr(actin_protrusions_morphology_actin_TallestIntensityStddev,protrusions_tallest_actin_intensity_stddev) 

			DeleteAttr(protrusions_body_area)
			DeleteAttr(protrusions_actin_area)
			DeleteAttr(protrusions_largest_area)
			DeleteAttr(protrusions_scnd_largest_area)

			DeleteAttr(protrusions_tallest_area)
			DeleteAttr(protrusions_largest_actin_area)
			DeleteAttr(protrusions_scndlargest_actin_area)
			DeleteAttr(protrusions_tallest_actin_area)

			DeleteAttr(protrusions_body_intensity)
			DeleteAttr(protrusions_largest_actin_intensity)
			DeleteAttr(protrusions_scndlargest_actin_intensity)
			DeleteAttr(protrusions_tallest_actin_intensity)

			DeleteAttr(protrusions_body_intensity_stddev)
			DeleteAttr(protrusions_largest_actin_intensity_stddev)
			DeleteAttr(protrusions_scndlargest_actin_intensity_stddev)
			DeleteAttr(protrusions_tallest_actin_intensity_stddev)
		End()
			
		//save the main object list
		set(cells_obj=objects)
		
		//Find spikes and extended membrane regions
		//Generate segmentation image (not used for calculation)
		SlidingParabolaTransform(IM_actin,.07)
		Minus(signal,0,neg_method="zero")
		CarryPixels(cells_obj.body,im_actin,MergeColor =true,image=result)
		Cytoplasm_Detection_Select_4(im_actin,nuclei=unfiltered_obj)

		CalcErosion(1,centers,objects=wholecells)
		CytoplasmRegion("body","centers_eroded",WholeCells=objects)
		CalcArea(cytoplasmregion,objects=wholecells)
		CalcSkeletonByIntensity(cytoplasmregion,Image=im_actin,IntensityEvalParam=-10,SkeletonType ="nodeavoiding")
		CalcArea(cytoplasmregion)//area of extended actin
		CalcIntensity(cytoplasmregion,im_actin)
CalcBorder(cytoplasmregion)
		CalcSkeleton(cytoplasmregion)
		
		CalcArea(cytoplasmregion_skeleton)
		CalcNodes(cytoplasmregion_skeleton)
		CalcErosion(-2,cytoplasmregion_skeleton_nodes)

		if(ShowIllustrations)
			ImageView(objects.cytoplasmregion_skeleton,"Extended Actin Skeleton",image=im_actin)
			ImageView(objects.cytoplasmregion_skeleton_nodes,"Extended Actin Skeleton Nodes",image=im_actin)
		End()
		Blank(im_actin.width, im_actin.height)
		set(blank_image=image)
		Carryobjects(objects.body,objects.cytoplasmregion_skeleton_area,image=blank_image)
		Rename(spikesarea=image)
		CarryObjects(objects.body,objects.cytoplasmregion_skeleton_node_count,image=blank_image)
		Rename(spikesnum=image)
		CarryObjects(objects.body,objects.cytoplasmregion_area,image=blank_image)
		Rename(extended_actin_area=image)
		CarryObjects(objects.body,objects.cytoplasmregion_intensity,image=blank_image)
		Rename(extended_actin_intensity=image)

		//update cells objects
		CalcStat("mean", objects=cells_obj, Stencil=body, Image=spikesarea, AttrName="cytoplasmregion_skeleton_area")
		CalcStat("mean", Stencil=body, Image=spikesnum, AttrName="cytoplasmregion_skeleton_node_count")
		CalcStat("mean", Stencil=body, Image=extended_actin_area, AttrName="extended_actin_area")
		CalcStat("mean", Stencil=body, Image=extended_actin_intensity, AttrName="extended_actin_intensity")
		calcAttr(membrane_cytoskeleton_morphology_actin_NrSpikesArea2CellBorder,cytoplasmregion_skeleton_area/border_area-1)		//spikiness area
		calcAttr(membrane_cytoskeleton_morphology_actin_NrSpikesNum2Border,cytoplasmregion_skeleton_node_count/cytoplasmregion_skeleton_area)		//spikiness
		calcAttr(membrane_cytoskeleton_morphology_actin_NrExtendedArea2CellArea,extended_actin_area/area)		//spikiness
		CalcAttr(membrane_cytoskeleton_intensity_actin_NrExtendedIntensity2CellIntensity,extended_actin_intensity/cell_cytoskeleton_intensity_actin_Intensity)
		DeleteAttr(cytoplasmregion_skeleton_area)
		DeleteAttr(cytoplasmregion_skeleton_node_count)
		DeleteAttr(extended_actin_area)
		DeleteAttr(extended_actin_intensity)

		//// Texture
		// Membrane Region
		//Ser features
		Texture::CalcSERFeatures(IM_actin, 2, "membraneregion")
		renameattr(membrane_cytoskeleton_texture_actin_SERbright = SERBright)
		renameattr(membrane_cytoskeleton_texture_actin_SERdark = SERdark)
		renameattr(membrane_cytoskeleton_texture_actin_SERedge = seredge)
		renameattr(membrane_cytoskeleton_texture_actin_serhole = serhole)
		renameattr(membrane_cytoskeleton_texture_actin_serridge = serridge)
		renameattr(membrane_cytoskeleton_texture_actin_sersaddle = sersaddle)
		renameattr(membrane_cytoskeleton_texture_actin_serspot = serspot)
		renameattr(membrane_cytoskeleton_texture_actin_servalley = servalley)

		Texture::CalcSERFeatures(IM_actin, 2, "cytoplasm")
		renameattr(cytoplasm_cytoskeleton_texture_actin_SERbright = SERBright)
		renameattr(cytoplasm_cytoskeleton_texture_actin_SERdark = SERdark)
		renameattr(cytoplasm_cytoskeleton_texture_actin_SERedge = seredge)
		renameattr(cytoplasm_cytoskeleton_texture_actin_serhole = serhole)
		renameattr(cytoplasm_cytoskeleton_texture_actin_serridge = serridge)
		renameattr(cytoplasm_cytoskeleton_texture_actin_sersaddle = sersaddle)
		renameattr(cytoplasm_cytoskeleton_texture_actin_serspot = serspot)
		renameattr(cytoplasm_cytoskeleton_texture_actin_servalley = servalley)

		Texture::CalcSERFeatures(IM_actin, 2, "actin_threshmask")
		renameattr(cytoplasm_cytoskeleton_texture_actin_ThreshmaskSERbright = SERBright)
		renameattr(cytoplasm_cytoskeleton_texture_actin_ThreshmaskSERdark = SERdark)
		renameattr(cytoplasm_cytoskeleton_texture_actin_ThreshmaskSERedge = seredge)
		renameattr(cytoplasm_cytoskeleton_texture_actin_ThreshmakSerhole = serhole)
		renameattr(cytoplasm_cytoskeleton_texture_actin_ThreshmaskSerridge = serridge)
		renameattr(cytoplasm_cytoskeleton_texture_actin_ThreshmaskSersaddle = sersaddle)
		renameattr(cytoplasm_cytoskeleton_texture_actin_ThreshmaskSerspot = serspot)
		renameattr(cytoplasm_cytoskeleton_texture_actin_ThreshmaskServalley = servalley)
		//Haralick texture 
		Texture::CalcHaralickFeatures(IM_actin,2, stencilname="membraneregion")
		renameattr(membrane_cytoskeleton_texture_actin_haralickcontrast = haralickcontrast)
		renameattr(membrane_cytoskeleton_texture_actin_haralickcorrelation = haralickcorrelation)
		renameattr(membrane_cytoskeleton_texture_actin_haralickhomogeneity = haralickhomogeneity)
		renameattr(membrane_cytoskeleton_texture_actin_haralicksumvariance = haralicksumvariance)
		Delete(NormalizedImage)

		Texture::CalcHaralickFeatures(IM_actin,2, stencilname="cytoplasm")
		renameattr(cytoplasm_cytoskeleton_texture_actin_haralickcontrast = haralickcontrast)
		renameattr(cytoplasm_cytoskeleton_texture_actin_haralickcorrelation = haralickcorrelation)
		renameattr(cytoplasm_cytoskeleton_texture_actin_haralickhomogeneity = haralickhomogeneity)
		renameattr(cytoplasm_cytoskeleton_texture_actin_haralicksumvariance = haralicksumvariance)
		Delete(NormalizedImage)


		Texture::CalcHaralickFeatures(IM_actin,2, stencilname="actin_threshmask")
		renameattr(cytoplasm_cytoskeleton_texture_actin_haralickcontrast = haralickcontrast)
		renameattr(cytoplasm_cytoskeleton_texture_actin_haralickcorrelation = haralickcorrelation)
		renameattr(cytoplasm_cytoskeleton_texture_actin_haralickhomogeneity = haralickhomogeneity)
		renameattr(cytoplasm_cytoskeleton_texture_actin_haralicksumvariance = haralicksumvariance)
		Delete(NormalizedImage)

		//Gabor texture
		Texture::CalcGaborFeatures(IM_actin, 2.0, 2.5, vec(1,2), vec(1,2), 8, "membraneregion", "regional", objects)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMax1= GaborMax1)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMax2= GaborMax2)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMax3= GaborMax3)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMax4= GaborMax4)

		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMin1 = GaborMin1)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMin2 = GaborMin2)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMin3 = GaborMin3)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMin4 = GaborMin4)
	

		Texture::CalcGaborFeatures(IM_actin, 2.0, 2.5, vec(1,2), vec(1), 8, "cytoplasm", "regional", objects)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMax1= GaborMax1)
renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMax2= GaborMax2)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMin1 = GaborMin1)
renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMin2 = GaborMin2)

		Texture::CalcGaborFeatures(IM_actin, 2.0, 2.5, vec(1,2), vec(1), 8, "actin_threshmask", "regional", objects)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMax1= GaborMax1)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMax2= GaborMax2)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMin1 = GaborMin1)
		renameattr(cytoplasm_cytoskeleton_texture_actin_GaborMin2 = GaborMin2)

RenameAttr(cytoplasm_cytoskeleton_intensity_actin_ThreshmaskIntensityStddev=actin_threshmask_intensity_stddev)
		DeleteAttr(actin_threshmask_area)
DeleteAttr(actin_threshmask_border_area)
		set(cells_obj=objects)

End()

///////////////////////////////////////////////////////////////////////////////// Vesicles
if (IN_ChanVesicles>0)
	set(IM_ves = _["IM_CH" & IN_ChanVesicles])  
	set(objects=cells_obj)
	ImageView(objects.border,label="vesicles",image=im_ves)
	Morphology::CalcTextuMorphoFeatures(objects, "body","centers", image=im_ves, RequestContainer=RequestContainerVesicles,prefix="cell_nuclei_star_vesicles_")
	CalcIntensity(cytoplasm,im_ves)
	RenameAttr(vesicles_cytoplasm_intensity_syntaxin6_intensity=cytoplasm_intensity)
	calcAttr(thresh_ves,vesicles_cytoplasm_intensity_syntaxin6_intensity*1.1)
	CalcThreshMask(cytoplasm,thresh_ves,Image=im_ves)
	CalcArea(threshmask)
	RenameAttr(vesicles_threshmask_area=threshmask_area)
	calcAttr(vesicles_threshmask_Nrarea2Cytoplasm,vesicles_threshmask_area/cytoplasm_area)
	DeleteAttr(vesicles_threshmask_area)
	CalcIntensity(threshmask,im_ves)
	RenameAttr(vesicles_threhmask_intensity_syntaxin6_intensity=threshmask_intensity)

	Texture::CalcSERFeatures(IM_ves, 1, "cytoplasm")
		renameattr(vesicles_cytoplasm_texture__SERbright = SERBright)
		renameattr(vesicles_cytoplasm_texture__SERdark = SERdark)
		renameattr(vesicles_cytoplasm_texture__SERedge = seredge)
		renameattr(vesicles_cytoplasm_texture__serhole = serhole)
		renameattr(vesicles_cytoplasm_texture__serridge = serridge)
		renameattr(vesicles_cytoplasm_texture__sersaddle = sersaddle)
		renameattr(vesicles_cytoplasm_texture__serspot = serspot)
		renameattr(vesicles_cytoplasm_texture__servalley = servalley)
		spot_detection_Select(im_ch3,"cytoplasm",WholeCells=objects)

		set(objects=wholecells)
		RenameAttr(vesicles_cytoplasm_SpotsArea=SpotsArea)
		RenameAttr(vesicles_cytoplasm_SpotsPerArea=SpotsPerArea)
		RenameAttr(vesicles_cytoplasm_SpotAverageCenterIntensity=SpotAverageCenterIntensity)
		RenameAttr(vesicles_cytoplasm_RelativeSpotSignal=RelativeSpotSignal)
		RenameAttr(vesicles_cytoplasm_NumberOfSpots=NumberOfSpotCandidates)
		spot_detection_Select(im_ves,"ringregion",WholeCells=objects)
		set(objects=wholecells)
		RenameAttr(vesicles_ringregion_SpotsArea=SpotsArea)
		RenameAttr(vesicles_ringregion_SpotsPerArea=SpotsPerArea)
		RenameAttr(vesicles_ringregion_SpotAverageCenterIntensity=SpotAverageCenterIntensity)
		RenameAttr(vesicles_ringregion_RelativeSpotSignal=RelativeSpotSignal)
		RenameAttr(vesicles_ringregion_NumberOfSpots=NumberOfSpotCandidates)
		spot_detection_Select(im_ves,"membraneregion",WholeCells=objects)
		set(objects=wholecells)
		RenameAttr(vesicles_ringregion_SpotsArea=SpotsArea)
		RenameAttr(vesicles_ringregion_SpotsPerArea=SpotsPerArea)
		RenameAttr(vesicles_ringregion_SpotAverageCenterIntensity=SpotAverageCenterIntensity)
		RenameAttr(vesicles_ringregion_RelativeSpotSignal=RelativeSpotSignal)
		RenameAttr(vesicles_ringregion_NumberOfSpots=NumberOfSpotCandidates)
		Texture::CalcTASFeatures(im_ves,.3,"cytoplasm")
		RenameAttr(vesicles_cytoplasm_texture_TAS_MeanInf8=TAS_MeanInf8)
		RenameAttr(vesicles_cytoplasm_texture_TAS_MeanInf7=TAS_MeanInf7)
		RenameAttr(vesicles_cytoplasm_texture_TAS_MeanInf6=TAS_MeanInf6)
		RenameAttr(vesicles_cytoplasm_texture_TAS_MeanInf5=TAS_MeanInf5)
		RenameAttr(vesicles_cytoplasm_texture_TAS_MeanInf4=TAS_MeanInf4)
		RenameAttr(vesicles_cytoplasm_texture_TAS_MeanInf3=TAS_MeanInf3)
		RenameAttr(vesicles_cytoplasm_texture_TAS_MeanInf2=TAS_MeanInf2)
		RenameAttr(vesicles_cytoplasm_texture_TAS_MeanInf1=TAS_MeanInf1)
		RenameAttr(vesicles_cytoplasm_texture_TAS_MeanInf0=TAS_MeanInf0)
		RenameAttr(vesicles_cytoplasm_texture_TAS_MeanInf=TAS_MeanInf)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowInf8=TAS_LowInf8)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowInf7=TAS_LowInf7)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowInf6=TAS_LowInf6)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowInf5=TAS_LowInf5)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowInf4=TAS_LowInf4)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowInf3=TAS_LowInf3)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowInf2=TAS_LowInf2)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowInf1=TAS_LowInf1)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowInf0=TAS_LowInf0)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowInf=TAS_LowInf)

		RenameAttr(vesicles_cytoplasm_texture_TAS_LowHigh8=TAS_LowHigh8)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowHigh7=TAS_LowHigh7)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowHigh6=TAS_LowHigh6)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowHigh5=TAS_LowHigh5)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowHigh4=TAS_LowHigh4)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowHigh3=TAS_LowHigh3)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowHigh2=TAS_LowHigh2)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowHigh1=TAS_LowHigh1)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowHigh0=TAS_LowHigh0)
		RenameAttr(vesicles_cytoplasm_texture_TAS_LowHigh=TAS_LowHigh)
		
		//correlation between tublin and vesicles
		if(IN_ChanTublin>0)
			calcAttr(thresh_tub,cell_cytoskeleton_intensity_tublin_intensity*.5)
			//CalcThreshMask(cytoplasm,thresh_tub,Image=im_tub)
			CalcPearsonsCoefficient(im_tub,im_ves,"thresh_ves","thresh_tub")
			RenameAttr(Cell__colocalization_TublinAndVesicles_PearsonCorr=pearsons)
			RenameAttr(Cell__colocalization_TublinAndVesicles_MandersCoef1=M1)
			RenameAttr(Cell__colocalization_TublinAndVesicles_MandersCoef2=M2)
			DeleteAttr(thresh_tub)
		End()
		DeleteAttr(NumberOfSpotCandidates)
		DeleteAttr(ReferenceIntensity)
		DeleteAttr(ReferenceRadius)
		DeleteAttr(SearchRegionArea)
		DeleteAttr(SearchRegionIntegratedSignal)
		DeleteAttr(thresh_ves)
		DeleteAttr( IntegratedSpotSignal )
		DeleteAttr( IntegratedSpotSignal_BackgroundSubtracted )
		DeleteAttr( NumberOfSpots )

		set(cells_obj=objects)

		//overlap between ER regions and vesicles
		//correlation between tublin and ER

End()

if(IN_ChanGolgi>0)

	set(im_golgi = _["IM_CH" & IN_ChanGolgi])
	set(objects=cells_obj)

	//Star features
	Morphology::CalcTextuMorphoFeatures(objects, "body","", image=im_golgi, RequestContainer=RequestContainervesicles,prefix="cell_nuclei_star_golgi_")
	
	//Raw intensities
	CalcIntensity(cytoplasm,im_golgi)
	CalcIntensity(ringregion,im_golgi)
	RenameAttr(golgi_cytoplasm_intensity_mg130_intensity=cytoplasm_intensity)
	RenameAttr(golgi_ringregion_intensity_mg130_intensity=ringregion_intensity)
	calcattr(golgi_ringregion_intensity_mg130_NrIntensity2Cytoplasm,golgi_ringregion_intensity_mg130_intensity/golgi_ringregion_intensity_mg130_intensity)
//Golgi main body	
	calcAttr(thresh_golgi,golgi_cytoplasm_intensity_mg130_intensity*1.5)
	CalcThreshMask(body,thresh_golgi,Image=im_golgi)
	RenameAttr(golgi_threshmask=threshmask)
	CalcArea(golgi_threshmask)
	calcAttr(golgi_threshmask_NrArea2Cytoplasm,golgi_threshmask_area/cytoplasm_area)
	
	CalcIntensity(golgi_threshmask,im_golgi)
	RenameAttr(golgi_threshmask_intensity_mg130_Intensity=golgi_threshmask_intensity)
	CalcAttr(golgi_threshmask_intensity_mg130_NrIntensity2Cytoplasm,golgi_threshmask_intensity_mg130_Intensity/golgi_cytoplasm_intensity_mg130_intensity)
	//Save results
	CalcErosion(1,golgi_threshmask)
	set(cells_obj=objects)

	//Select only the object with largest size
	Mask2Stencil(objects.golgi_threshmask_eroded,Neighbourhood=8)
	Stencil2Objects(Stencil)
	CalcArea()
	Blank(im_golgi.width, im_golgi.height)
	//Here image pixels will carry the area attribute
	CarryObjects(objects.body,objects.area)
		
		//Use the image with pixels as area to calculate the largest object within each Cell 
		//the max will be our threshold
		CalcStat("max", objects=cells_obj, Stencil=body, Image=image, AttrName="proThreshold")
		
		//filter out golgi sub objects based on area image by keeping only pixels with our threshold
		CalcThreshMask(golgi_threshmask_eroded, proThreshold, Image=image)
		CalcErosion(-1,threshmask)
		RenameAttr(golgi_body=threshmask_eroded)
		CalcArea(golgi_body)
		CalcIntensity(golgi_body,Image=im_golgi)
		RenameAttr(golgi_body_morphology__area=golgi_body_area)
		calcAttr(golgi_body_intensity__NrIntensity,golgi_body_intensity/golgi_cytoplasm_intensity_mg130_intensity)

		CalcStat("mean",Stencil=golgi_body,Image=nuc_distanceimage,AttrName="golgi__morphology__MeanDistanceToNucleus")
		CalcStat( "stddev" ,Stencil=golgi_body,Image=nuc_distanceimage,AttrName="golgi__morphology__StdDistanceToNucleus")
		CalcStat( "max",Stencil=golgi_body,Image=nuc_distanceimage,AttrName="golgi__morphology__MaxDistanceToNucleus")
		//Normalize
CalcAttr("golgi__morphology__NrMeanDistanceToNucleus",golgi__morphology__MeanDistanceToNucleus/full_length)
CalcAttr("golgi__morphology__NrStdDistanceToNucleus",golgi__morphology__StdDistanceToNucleus/full_length)
CalcAttr("golgi__morphology__NrMaxDistanceToNucleus",golgi__morphology__MaxDistanceToNucleus/full_length)
DeleteAttr("golgi__morphology__MaxDistanceToNucleus","golgi__morphology__StdDistanceToNucleus","golgi__morphology__MeanDistanceToNucleus")
	//Overlap between Golgi threshamsk and MOT
		if(IN_ChanTublin>0)
			calcAttr(thresh_tub,cell_cytoskeleton_intensity_tublin_intensity*2)
			CalcPearsonsCoefficient(im_golgi,im_tub,"thresh_golgi","thresh_tub")
			RenameAttr(Cell__colocalization_TublinAndGolgi_PearsonCorr=pearsons)
			RenameAttr(Cell__colocalization_TublinAndGolgi_MandersCoef1=M1)
			RenameAttr(Cell__colocalization_TublinAndGolgi_MandersCoef2=M2)
			DeleteAttr(thresh_tub)
			And(objects.golgi_body,image=objects.bundels_threshmask)
			SetAttr("golgi_moc_overlap",image)
			CalcArea(golgi_moc_overlap)
			CalcAttr(golgi__colocalization__NrMocAreaOverlap,golgi_moc_overlap_area/golgi_body_morphology__area)
			RenameAttr(golgi__colocalization__MocAreaOverlap=golgi_moc_overlap_area)
		end()
	DeleteAttr(thresh_golgi)

	//Texture and spots
		Texture::CalcSERFeatures(im_golgi, 1, "cytoplasm")
		renameattr(golgi_cytoplasm_texture__SERbright = SERBright)
		renameattr(golgi_cytoplasm_texture__SERdark = SERdark)
		renameattr(golgi_cytoplasm_texture__SERedge = seredge)
		renameattr(golgi_cytoplasm_texture__serhole = serhole)
		renameattr(golgi_cytoplasm_texture__serridge = serridge)
		renameattr(golgi_cytoplasm_texture__sersaddle = sersaddle)
		renameattr(golgi_cytoplasm_texture__serspot = serspot)
		renameattr(golgi_cytoplasm_texture__servalley = servalley)
		spot_detection_Select(im_golgi,"cytoplasm",WholeCells=objects)

		set(objects=wholecells)
		RenameAttr(golgi_cytoplasm_SpotsArea=SpotsArea)
		RenameAttr(golgi_cytoplasm_SpotsPerArea=SpotsPerArea)
		RenameAttr(golgi_cytoplasm_SpotAverageCenterIntensity=SpotAverageCenterIntensity)
		RenameAttr(golgi_cytoplasm_RelativeSpotSignal=RelativeSpotSignal)
		RenameAttr(golgi_cytoplasm_NumberOfSpots=NumberOfSpotCandidates)
		spot_detection_Select(im_golgi,"ringregion",WholeCells=objects)
		set(objects=wholecells)
		RenameAttr(golgi_ringregion_SpotsArea=SpotsArea)
		RenameAttr(golgi_ringregion_SpotsPerArea=SpotsPerArea)
		RenameAttr(golgi_ringregion_SpotAverageCenterIntensity=SpotAverageCenterIntensity)
		RenameAttr(golgi_ringregion_RelativeSpotSignal=RelativeSpotSignal)
		RenameAttr(golgi_ringregion_NumberOfSpots=NumberOfSpotCandidates)
		spot_detection_Select(im_golgi,"membraneregion",WholeCells=objects)
		set(objects=wholecells)
		RenameAttr(golgi_ringregion_SpotsArea=SpotsArea)
		RenameAttr(golgi_ringregion_SpotsPerArea=SpotsPerArea)
		RenameAttr(golgi_ringregion_SpotAverageCenterIntensity=SpotAverageCenterIntensity)
		RenameAttr(golgi_ringregion_RelativeSpotSignal=RelativeSpotSignal)
		RenameAttr(golgi_ringregion_NumberOfSpots=NumberOfSpotCandidates)
		Texture::CalcTASFeatures(im_golgi,.3,"cytoplasm")
		RenameAttr(golgi_cytoplasm_texture_TAS_MeanInf8=TAS_MeanInf8)
		RenameAttr(golgi_cytoplasm_texture_TAS_MeanInf7=TAS_MeanInf7)
		RenameAttr(golgi_cytoplasm_texture_TAS_MeanInf6=TAS_MeanInf6)
		RenameAttr(golgi_cytoplasm_texture_TAS_MeanInf5=TAS_MeanInf5)
		RenameAttr(golgi_cytoplasm_texture_TAS_MeanInf4=TAS_MeanInf4)
		RenameAttr(golgi_cytoplasm_texture_TAS_MeanInf3=TAS_MeanInf3)
		RenameAttr(golgi_cytoplasm_texture_TAS_MeanInf2=TAS_MeanInf2)
		RenameAttr(golgi_cytoplasm_texture_TAS_MeanInf1=TAS_MeanInf1)
		RenameAttr(golgi_cytoplasm_texture_TAS_MeanInf0=TAS_MeanInf0)
		RenameAttr(golgi_cytoplasm_texture_TAS_MeanInf=TAS_MeanInf)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowInf8=TAS_LowInf8)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowInf7=TAS_LowInf7)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowInf6=TAS_LowInf6)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowInf5=TAS_LowInf5)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowInf4=TAS_LowInf4)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowInf3=TAS_LowInf3)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowInf2=TAS_LowInf2)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowInf1=TAS_LowInf1)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowInf0=TAS_LowInf0)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowInf=TAS_LowInf)

		RenameAttr(golgi_cytoplasm_texture_TAS_LowHigh8=TAS_LowHigh8)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowHigh7=TAS_LowHigh7)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowHigh6=TAS_LowHigh6)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowHigh5=TAS_LowHigh5)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowHigh4=TAS_LowHigh4)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowHigh3=TAS_LowHigh3)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowHigh2=TAS_LowHigh2)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowHigh1=TAS_LowHigh1)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowHigh0=TAS_LowHigh0)
		RenameAttr(golgi_cytoplasm_texture_TAS_LowHigh=TAS_LowHigh)

		DeleteAttr(NumberOfSpotCandidates)
		DeleteAttr(ReferenceIntensity)
		DeleteAttr(ReferenceRadius)
		DeleteAttr(SearchRegionArea)
		DeleteAttr(SearchRegionIntegratedSignal)
		DeleteAttr( IntegratedSpotSignal )
		DeleteAttr( IntegratedSpotSignal_BackgroundSubtracted )
		DeleteAttr( NumberOfSpots )
		set(cells_obj=objects)


End()

///////////////////////////////////////////////////////////////////////////////// Yap
if (IN_ChanYap>0)
	set(IM_yap = _["IM_CH" & IN_Chanyap])  
	RingRegion("centers",RestrictiveStencil=body,WholeCells=cells_obj,VisualImage=IM_yap)
	CalcArea(ringregion,objects=wholecells)
	
	calcintensity(Stencil=cytoplasm, Image=IM_yap)
	renameattr(cytoplasm__intensity_YAP_intensity=cytoplasm_intensity)
	calcintensity( Image=IM_yap)
	RenameAttr(cell__intensity_YAP_intensity=intensity)
	calcintensity(Stencil=centers, Image=IM_yap)
	renameattr(nucleus__intensity_YAP_intensity=centers_intensity)
	calcintensity(ringregion, IM_yap)
	renameattr(cytoplasm_ringregion_intensity_YAP_intensity=ringregion_intensity)
	calcattr("cell__signaling_YAP_NucbyCytoYAP", nucleus__intensity_YAP_intensity/cytoplasm_ringregion_intensity_YAP_intensity)
set(cells_obj=objects)
End()


/////////////////////////////////////////////////////////////////////////////////// NFkB
if (IN_ChanNFkB>0)
	set(IM_nfkb = _["IM_CH" & IN_ChanNFkB])  
	RingRegion("centers",RestrictiveStencil=body,WholeCells=cells_obj,VisualImage=im_nfkb)
	CalcArea(ringregion,objects=wholecells)
	renameattr(cytoplasm_ringregion_morphology__area=ringregion_area)
	calcintensity(Stencil=cytoplasm, Image=IM_nfkb)
	renameattr(cytoplasm__intensity_NFkB_intensity=cytoplasm_intensity)
	calcintensity( Image=im_nfkb)
	RenameAttr(cell__intensity_NFkB_intensity=intensity)
	calcintensity(Stencil=centers, Image=IM_NFKB)
	renameattr(nucleus__intensity_NFkB_intensity=centers_intensity)
	calcintensity(ringregion, IM_NFKB)
	renameattr(cytoplasm_ringregion_intensity_NFkB_intensity=ringregion_intensity)
	calcattr("cell__signaling_NFkB_NucbyCytoNFkB", nucleus__intensity_NFkB_intensity/cytoplasm_ringregion_intensity_NFkB_intensity)
set(cells_obj=objects)
End()



///////////////////////////////////////////////////////////////////////////////// DAPI
if (IN_ChanDapi>0)
	set(IM_dapi = _["IM_CH" & IN_ChanDapi]) 
		calcintensity(centers, IM_Dapi,objects=cells_obj)
		RenameAttr(nucleus__intensity_dapi_intensity=centers_intensity)

		////Texture calculations
		// Ser features
		Texture::CalcSERFeatures(IM_Dapi, 2, "centers")
		renameattr(nucleus__texture_dapi_SERbright = SERBright)
		renameattr(nucleus__texture_dapi_SERdark = SERdark)
		renameattr(nucleus__texture_dapi_SERedge = seredge)
		renameattr(nucleus__texture_dapi_serhole = serhole)
		renameattr(nucleus__texture_dapi_serridge = serridge)
		renameattr(nucleus__texture_dapi_sersaddle = sersaddle)
		renameattr(nucleus__texture_dapi_serspot = serspot)
		renameattr(nucleus__texture_dapi_servalley = servalley)

		// Haralick texture
		Texture::CalcHaralickFeatures(IM_Dapi,2, stencilname="centers")
		renameattr(nucleus__texture_dapi_haralickcontrast = haralickcontrast)
		renameattr(nucleus__texture_dapi_haralickcorrelation = haralickcorrelation)
		renameattr(nucleus__texture_dapi_haralickhomogeneity = haralickhomogeneity)
		renameattr(nucleus__texture_dapi_haralicksumvariance = haralicksumvariance)
		Delete(NormalizedImage)

		// GaborFeatures
		Texture::CalcGaborFeatures(IM_Dapi, 2.0, 2.5, vec(1,2), vec(1), 8, "centers", "regional", objects)
		renameattr(nucleus__texture_dapi_GaborMax1= GaborMax1)
		renameattr(nucleus__texture_dapi_GaborMax2= GaborMax2)
		renameattr(nucleus__texture_dapi_GaborMin1 = GaborMin1)
		renameattr(nucleus__texture_dapi_GaborMin2 = GaborMin2)
		Set(GaborIllustrationsNuc =GaborIllustrations)
Morphology::CalcTextuMorphoFeatures(objects, "centers","", image=im_dapi, RequestContainer=RequestContainer,prefix="Nuclei__star_DAPI_")
		DeleteAttr(ReferenceIntensity)
		DeleteAttr(ReferenceRadius)
		DeleteAttr(x0)
		DeleteAttr(y0)
set(cells_obj=objects)
End()




///////////////////////////////////////////////////////////////////////////////// ER and Mito
if (IN_ChanMito>0 && IN_ChanER>0)
//Overlap areas
and(cells_obj.mito_body,image=cells_obj.er_body)
setattr(mito_er_overlap,image,objects=cells_obj)//from now on use objects objectlist
CalcArea(mito_er_overlap)
CalcAttr(ER_Mito_morphology__NrOverlapArea2ERArea,(mito_er_overlap_area*area)/(ER__morphology__NrArea2CellArea))

and(cells_obj.mito_body,image=cells_obj.er_main)
SetAttr(mito_er_main_overlap,image)
CalcArea(mito_er_main_overlap)
CalcArea(ER_main)
CalcAttr(ERMain_Mito_colocalization__NrOverlapArea2ERMitoCellArea,(mito_er_main_overlap_area*area)/(ER_main_Area))//normalize to main area
DeleteAttr(ER_main_Area)
DeleteAttr(mito_er_main_overlap_area)
DeleteAttr(mito_er_overlap_area)
//distances between different dcenters

CalcAttr(ER_Mito_colocalization__ERCenterDistance2MitoMainCenter,sqrt(((ER__coordinates__masscentreX-mito_main_coordinates__masscentreX)^2)+((ER__coordinates__masscentreY-mito_main_coordinates__masscentreY)^2)))
CalcAttr(ER_Mito_colocalization__ERMainCenterDistance2MitoMainCenter,sqrt(((ER_main_coordinates__masscentreX-mito_main_coordinates__masscentreX)^2)+((ER_main_coordinates__masscentreY-mito_main_coordinates__masscentreY)^2)))
CalcAttr(ER_Mito_colocalization__ERPeripheralCenterDistance2MitoMainCenter,sqrt(((ER_peripheral_coordinates__masscentreX-mito_main_coordinates__masscentreX)^2)+((ER_peripheral_coordinates__masscentreY-mito_main_coordinates__masscentreY)^2)))

CalcAttr(ER_Mito_colocalization__ERCenterDistance2MitoMainCenter2Length,ER_Mito_colocalization__ERCenterDistance2MitoMainCenter/full_length)
CalcAttr(ER_Mito_colocalization__ERMainCenterDistance2MitoMainCenter2Length,ER_Mito_colocalization__ERMainCenterDistance2MitoMainCenter/full_length)
CalcAttr(ER_Mito_colocalization__ERPeripheralCenterDistance2MitoMainCenter2Length,ER_Mito_colocalization__ERPeripheralCenterDistance2MitoMainCenter/full_length)

//correltation between ER and Mito
calcAttr(thresh_er,ER__intensity_PDI_intensity*.5,objects=cells_obj)
calcAttr(thresh_mito,mito__intensity_Mitotracker_intensity*.5)
calcAttr(thresh_ER_low,ER__intensity_PDI_intensity*.1)
CalcPearsonsCoefficient(im_ER,im_Mito,"thresh_er","thresh_mito")
RenameAttr(Cell__colocalization_PDIandMitotracker_PearsonCorr=pearsons)
RenameAttr(Cell__colocalization_PDIandMitotracker_MandersCoef1=M1)
RenameAttr(Cell__colocalization_PDIandMitotracker_MandersCoef2=M2)


add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.border,"Cell_colocalization_PDIandMitotracker",image=image)
		End()

CalcPearsonsCoefficient(im_ER,im_Mito,"thresh_er","thresh_mito",StencilName="ER_main")
RenameAttr(ER_Main_colocalization_PDIandMitotracker_PearsonCorr=ER_main_pearsons)
RenameAttr(ER_Main_colocalization_PDIandMitotracker_MandersCoef1=ER_main_M1)
RenameAttr(ER_Main_colocalization_PDIandMitotracker_MandersCoef2=ER_main_M2)
add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.ER_main_border,"ER_main_colocalization_PDIandMitotracker",image=image,gamma=1)
		End()
CalcPearsonsCoefficient(im_ER,im_Mito,"thresh_ER_low","thresh_mito",StencilName="ER_peripheral")
RenameAttr(ER_Peripheral_colocalization_PDIandMitotracker_PearsonCorr=ER_peripheral_pearsons)
RenameAttr(ER_Peripheral_colocalization_PDIandMitotracker_MandersCoef1=ER_peripheral_M1)
RenameAttr(ER_Peripheral_colocalization_PDIandMitotracker_MandersCoef2=ER_peripheral_M2)

add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.ER_peripheral_border,"ER_Peripheral_colocalization_PDIandMitotracker",image=image,gamma=1)
		End()

DeleteAttr(thresh_er)
DeleteAttr(thresh_mito)
DeleteAttr(thresh_er_low)
set(cells_obj=objects)
End()



///////////////////////////////////////////////////////////////////////////////// ER and Tublin

if (IN_ChanMito>0 && IN_ChanTublin>0)

		//correltation between ER and Tublin
		calcAttr(thresh_tub,cell_cytoskeleton_intensity_tublin_intensity*.5,objects=cells_obj)
		calcAttr(thresh_mito,mito__intensity_Mitotracker_intensity*.5)

		CalcPearsonsCoefficient(im_tub,im_Mito,"thresh_tub","thresh_mito")
		RenameAttr(Cell__colocalization_TublinAndMitotracker_PearsonCorr=pearsons)
		RenameAttr(Cell__colocalization_TublinAndMitotracker_MandersCoef1=M1)
		RenameAttr(Cell__colocalization_TublinAndMitotracker_MandersCoef2=M2)
		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.border,"Cell_colocalization_TublinAndMitotracker",image=image,gamma=1)
		End()
		CalcPearsonsCoefficient(im_tub,im_Mito,"thresh_tub","thresh_mito",StencilName="mito_body")
		RenameAttr(Mito__colocalization_TublinAndMitotracker_PearsonCorr=mito_body_pearsons)
		RenameAttr(Mito__colocalization_TublinAndMitotracker_MandersCoef1=mito_body_M1)
		RenameAttr(Mito__colocalization_TublinAndMitotracker_MandersCoef2=mito_body_M2)
		DeleteAttr(thresh_tub)
		DeleteAttr(thresh_mito)

		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.mito_body_border,"Mito__colocalization_TublinAndMitotracker",image=image,gamma=1)
		End()

		set(cells_obj=objects)
End()


///////////////////////////////////////////////////////////////////////////////// Mtio and Actin
if (IN_ChanMito>0 && IN_ChanActin>0)

		//correltation between ER and Actin
		calcAttr(thresh_actin,cell_cytoskeleton_intensity_actin_Intensity*.5,objects=cells_obj)
		calcAttr(thresh_mito,Mito__intensity_Mitotracker_intensity*.5)


		CalcPearsonsCoefficient(im_actin,im_Mito,"thresh_actin","thresh_mito")
		RenameAttr(Cell__colocalization_ActinAndMitotracker_PearsonCorr=pearsons)
		RenameAttr(Cell__colocalization_ActinAndMitotracker_MandersCoef1=M1)
		RenameAttr(Cell__colocalization_ActinAndMitotracker_MandersCoef2=M2)
		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.border,"Cell_colocalization_ActinAndMitotracker",image=image,gamma=1)
		End()
		CalcPearsonsCoefficient(im_actin,im_Mito,"thresh_actin","thresh_mito",StencilName="mito_body")
		RenameAttr(Mito__colocalization_ActinAndMitotracker_PearsonCorr=mito_body_pearsons)
		RenameAttr(Mito__colocalization_ActinAndMitotracker_MandersCoef1=mito_body_M1)
		RenameAttr(Mito__colocalization_ActinAndMitotracker_MandersCoef2=mito_body_M2)

		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.mito_body_border,"Mito__colocalization_ActinAndMitotracker",image=image,gamma=1)
		End()

		DeleteAttr(thresh_actin)
		DeleteAttr(thresh_mito)

		set(cells_obj=objects)
End()

///////////////////////////////////////////////////////////////////////////////// ER and Actin
if (IN_ChanER>0 && IN_ChanActin>0)

		//correltation between ER and Actin
		calcAttr(thresh_actin,cell_cytoskeleton_intensity_actin_Intensity*.5,objects=cells_obj)
		calcAttr(thresh_ER,ER__intensity_PDI_intensity*.5)
		calcAttr(thresh_ER_low,ER__intensity_PDI_intensity*.1)
		CalcPearsonsCoefficient(im_actin,im_ER,"thresh_actin","thresh_ER")
		RenameAttr(Cell__colocalization_ActinAndPDI_PearsonCorr=pearsons)
		RenameAttr(Cell__colocalization_ActinAndPDI_MandersCoef1=M1)
		RenameAttr(Cell__colocalization_ActinAndPDI_MandersCoef2=M2)

		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.border,"Cell_colocalization_ActinAndPDI",image=image,gamma=1)
		End()
		//CalcPearsonsCoefficient(Signal_actin,Signal_ER,"thresh_actin","thresh_ER",StencilName="ER_main")
		CalcPearsonsCoefficient(im_actin,im_ER,"thresh_actin","thresh_ER",StencilName="ER_main")
		RenameAttr(ER_main_colocalization_ActinAndPDI_PearsonCorr=ER_main_pearsons)
		RenameAttr(ER_main_colocalization_ActinAndPDI_MandersCoef1=ER_main_M1)
		RenameAttr(ER_main_colocalization_ActinAndPDI_MandersCoef2=ER_main_M2)
		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.ER_main_border,"ER_main_colocalization_ActinAndPDI",image=image,gamma=1)
		End()

		CalcPearsonsCoefficient(im_actin,im_ER,"thresh_actin","thresh_ER_low",StencilName="ER_peripheral")
		RenameAttr(ER_peripheral_colocalization_ActinAndPDI_PearsonCorr=ER_peripheral_pearsons)
		RenameAttr(ER_peripheral_colocalization_ActinAndPDI_MandersCoef1=ER_peripheral_M1)
		RenameAttr(ER_peripheral_colocalization_ActinAndPDI_MandersCoef2=ER_peripheral_M2)
		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.ER_peripheral_border,"ER_peripheral_colocalization_ActinAndPDI",image=image,gamma=1)
		End()
		DeleteAttr(thresh_actin)
		DeleteAttr(thresh_ER)
		DeleteAttr(thresh_er_low)
		set(cells_obj=objects)
End()

///////////////////////////////////////////////////////////////////////////////// ER and Tublin
if (IN_ChanER>0 && IN_ChanTublin>0)

		//correltation between ER and Tublin
		calcAttr(thresh_tub,cell_cytoskeleton_intensity_tublin_intensity*.5,objects=cells_obj)
		calcAttr(thresh_ER,ER__intensity_PDI_intensity*.5)
		calcAttr(thresh_ER_low,ER__intensity_PDI_intensity*.1)
		CalcPearsonsCoefficient(im_tub,im_ER,"thresh_tub","thresh_ER")
		RenameAttr(Cell__colocalization_TublinAndPDI_PearsonCorr=pearsons)
		RenameAttr(Cell__colocalization_TublinAndPDI_MandersCoef1=M1)
		RenameAttr(Cell__colocalization_TublinAndPDI_MandersCoef2=M2)
		
		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.border,"Cell__colocalization_TublinAndPDI",image=image,gamma=1)
		End()

		CalcPearsonsCoefficient(im_tub,im_ER,"thresh_tub","thresh_ER",StencilName="ER_main")
		RenameAttr(ER_main_colocalization_TublinAndPDI_PearsonCorr=ER_main_pearsons)
		RenameAttr(ER_main_colocalization_TublinAndPDI_MandersCoef1=ER_main_M1)
		RenameAttr(ER_main_colocalization_TublinAndPDI_MandersCoef2=ER_main_M2)
		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.ER_main_border,"ER_main_colocalization_TublinAndPDI",image=image,gamma=1)
		End()
		CalcPearsonsCoefficient(im_tub,im_ER,"thresh_tub","thresh_ER_low",StencilName="ER_peripheral")
		RenameAttr(ER_peripheral_colocalization_TublinAndPDI_PearsonCorr=ER_peripheral_pearsons)
		RenameAttr(ER_peripheral_colocalization_TublinAndPDI_MandersCoef1=ER_peripheral_M1)
		RenameAttr(ER_peripheral_colocalization_TublinAndPDI_MandersCoef2=ER_peripheral_M2)
		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.ER_peripheral_border,"ER_peripheral_colocalization_TublinAndPDI",image=image,gamma=1)
		End()
		DeleteAttr(thresh_tub)
		DeleteAttr(thresh_ER)
		DeleteAttr(thresh_er_low)
		set(cells_obj=objects)
End()

///////////////////////////////////////////////////////////////////////////////// Actin and Tublin
if (IN_ChanActin>0 && IN_ChanTublin>0)

		//correltation between ER and Tublin
		calcAttr(thresh_tub,cell_cytoskeleton_intensity_tublin_intensity*.5,objects=cells_obj)
		calcAttr(thresh_actin,cell_cytoskeleton_intensity_actin_Intensity*.5)

		//CalcPearsonsCoefficient(Signal_actin,Signal_tub,"thresh_actin","thresh_tub")
		CalcPearsonsCoefficient(im_actin,im_tub,"thresh_actin","thresh_tub")
		RenameAttr(Cell__colocalization_TublinAndActin_PearsonCorr=pearsons)
		RenameAttr(Cell__colocalization_TublinAndActin_MandersCoef1=M1)
		RenameAttr(Cell__colocalization_TublinAndActin_MandersCoef2=M2)

		add(0,0,image=ColocalizationMap)
		If(showillustrations)
			ImageView(objects.border,"Cell__colocalization_TublinAndActin",image=image,gamma=1)
		End()

		DeleteAttr(thresh_tub)
		DeleteAttr(thresh_actin)

		set(cells_obj=objects)

End()


if (IN_ChanEcadherin>0)
	set(objects=cells_obj) 
		set(IM_ecad = _["IM_CH" & IN_ChanEcadherin])
		CalcBorder(contact_region)
		CalcArea(contact_region)
		CalcIntensity(contact_region,IM_ecad)
		CalcIntensity(membraneregion,im_ecad)
		CalcIntensity(Cytoplasm,IM_ecad)
		RenameAttr(adhesion_cytoplasm_intensity_ecad_intensity=Cytoplasm_Intensity)
		RenameAttr(adhesion_membrane_intensity_ecad_intensity=membraneregion_Intensity)
		RenameAttr(adhesion_ContactRegion_intensity_ecad_intensity=contact_region_intensity)
		
		calcattr("Contact_RegionByCytoecad", adhesion_ContactRegion_intensity_ecad_intensity/adhesion_cytoplasm_intensity_ecad_intensity)
		calcattr("adhesion_membrane_intensity_ecad_NrIntensity2Cyto", adhesion_membrane_intensity_ecad_intensity/adhesion_cytoplasm_intensity_ecad_intensity)
		set(cells_obj=objects)


		calcthreshmask(cytoplasm, Image= IM_ecad, Threshold=(1.8*adhesion_cytoplasm_intensity_ecad_intensity))
		RenameAttr(ecad_threshmask=threshmask)

		CalcArea(ecad_threshmask)
		calcAttr(adhesion_threshmask_morphology_ecad_NrArea,ecad_threshmask_area/area)
		DeleteAttr(ecad_threshmask_area)
		CalcIntensity(ecad_threshmask,im_ecad)
		RenameAttr(adhesion_threshmask_intensity_ecad_intensity=ecad_threshmask_intensity)
		
		and(objects.ecad_threshmask,image=objects.contact_region)
		CalcArea(image)
		SetAttr(ecad_thresh_contact_region,image)
		
		CalcAttr("adhesion_ThreshmaskContactRegion_morphology_ecad_NrArea",image_area/contact_region_area)
		CalcIntensity(ecad_thresh_contact_region,im_ecad)
		RenameAttr(adhesion_ThreshmaskContactRegion_intensity_ecad_intensity=ecad_thresh_contact_region_intensity)
		DeleteAttr(image_area)
		Texture::CalcSERFeatures(IM_ecad, 2, "membraneregion")
		renameattr(adhesion_Membrane_texture_ecad_SERbright = SERBright)
		renameattr(adhesion_Membrane_texture_ecad_SERdark = SERdark)
		renameattr(adhesion_Membrane_texture_ecad_SERedge = seredge)
		renameattr(adhesion_Membrane_texture_ecad_serhole = serhole)
		renameattr(adhesion_Membrane_texture_ecad_serridge= serridge)
		renameattr(adhesion_Membrane_texture_ecad_sersaddle= sersaddle)
		renameattr(adhesion_Membrane_texture_ecad_serspot = serspot)
		renameattr(adhesion_Membrane_texture_ecad_servalley = servalley)

		Texture::CalcSERFeatures(IM_ecad, 2, "contact_region")
		renameattr(adhesion_ContactRegion_texture_ecad_SERbright = SERBright)
		renameattr(adhesion_ContactRegion_texture_ecad_SERdark = SERdark)
		renameattr(adhesion_ContactRegion_texture_ecad_SERedge = seredge)
		renameattr(adhesion_ContactRegion_texture_ecad_serhole = serhole)
		renameattr(adhesion_ContactRegion_texture_ecad_serridge= serridge)
		renameattr(adhesion_ContactRegion_texture_ecad_sersaddle= sersaddle)
		renameattr(adhesion_ContactRegion_texture_ecad_serspot = serspot)
		renameattr(adhesion_ContactRegion_texture_ecad_servalley = servalley)

		Texture::CalcSERFeatures(IM_ecad, 2, "cytoplasm")
		renameattr(adhesion_cytoplasm_texture_ecad_SERbright = SERBright)
		renameattr(adhesion_cytoplasm_texture_ecad_SERdark= SERdark)
		renameattr(adhesion_cytoplasm_texture_ecad_SERedge= seredge)
		renameattr(adhesion_cytoplasm_texture_ecad_serhole= serhole)
		renameattr(adhesion_cytoplasm_texture_ecad_serridge = serridge)
		renameattr(adhesion_cytoplasm_texture_ecad_sersaddle= sersaddle)
		renameattr(adhesion_cytoplasm_texture_ecad_serspot = serspot)
		renameattr(adhesion_cytoplasm_texture_ecad_servalley= servalley)
		RenameAttr(adhesion_ContactRegion_context__area=contact_region_area)
		Morphology::CalcTextuMorphoFeatures(objects, "body","centers", image=im_ecad, RequestContainer=RequestContainer,prefix="adhesion_cell_star_ecad_")
		Morphology::CalcTextuMorphoFeatures(objects, "membrane","cytoplasm", image=im_ecad, RequestContainer=RequestContainer,prefix="adhesion_membrane_star_ecad_")
		set(cells_obj=objects)


end()

if (IN_ChanNcadherin>0)
		set(objects=cells_obj) 
		set(IM_ncad = _["IM_CH" & IN_ChanNcadherin])
		CalcBorder(contact_region)
		CalcArea(contact_region)
		CalcIntensity(contact_region,IM_ncad)
		CalcIntensity(membraneregion,im_ncad)
		CalcIntensity(Cytoplasm,IM_ncad)
		RenameAttr(adhesion_cytoplasm_intensity_ncad_intensity=Cytoplasm_Intensity)
		RenameAttr(adhesion_membrane_intensity_ncad_intensity=membraneregion_Intensity)
		RenameAttr(adhesion_ContactRegion_intensity_ncad_intensity=contact_region_intensity)
		
		calcattr("Contact_RegionByCytoncad", adhesion_ContactRegion_intensity_ncad_intensity/adhesion_cytoplasm_intensity_ncad_intensity)
		calcattr("adhesion_membrane_intensity_ncad_NrIntensity2Cyto", adhesion_membrane_intensity_ncad_intensity/adhesion_cytoplasm_intensity_ncad_intensity)
		set(cells_obj=objects)


		calcthreshmask(cytoplasm, Image= IM_ncad, Threshold=(1.8*adhesion_cytoplasm_intensity_ncad_intensity))
		RenameAttr(ncad_threshmask=threshmask)

		CalcArea(ncad_threshmask)
		calcAttr(adhesion_threshmask_morphology_ncad_NrArea,ncad_threshmask_area/area)
		DeleteAttr(ncad_threshmask_area)
		CalcIntensity(ncad_threshmask,im_ncad)
		RenameAttr(adhesion_threshmask_intensity_ncad_intensity=ncad_threshmask_intensity)
		
		and(objects.ncad_threshmask,image=objects.contact_region)
		CalcArea(image)
		SetAttr(ncad_thresh_contact_region,image)
		
		CalcAttr("adhesion_ThreshmaskContactRegion_morphology_ncad_NrArea",image_area/contact_region_area)
		CalcIntensity(ncad_thresh_contact_region,im_ncad)
		RenameAttr(adhesion_ThreshmaskContactRegion_intensity_ncad_intensity=ncad_thresh_contact_region_intensity)
		DeleteAttr(image_area)
		Texture::CalcSERFeatures(IM_ncad, 2, "membraneregion")
		renameattr(adhesion_Membrane_texture_ncad_SERbright = SERBright)
		renameattr(adhesion_Membrane_texture_ncad_SERdark = SERdark)
		renameattr(adhesion_Membrane_texture_ncad_SERedge = seredge)
		renameattr(adhesion_Membrane_texture_ncad_serhole = serhole)
		renameattr(adhesion_Membrane_texture_ncad_serridge= serridge)
		renameattr(adhesion_Membrane_texture_ncad_sersaddle= sersaddle)
		renameattr(adhesion_Membrane_texture_ncad_serspot = serspot)
		renameattr(adhesion_Membrane_texture_ncad_servalley = servalley)

		Texture::CalcSERFeatures(IM_ncad, 2, "contact_region")
		renameattr(adhesion_ContactRegion_texture_ncad_SERbright = SERBright)
		renameattr(adhesion_ContactRegion_texture_ncad_SERdark = SERdark)
		renameattr(adhesion_ContactRegion_texture_ncad_SERedge = seredge)
		renameattr(adhesion_ContactRegion_texture_ncad_serhole = serhole)
		renameattr(adhesion_ContactRegion_texture_ncad_serridge= serridge)
		renameattr(adhesion_ContactRegion_texture_ncad_sersaddle= sersaddle)
		renameattr(adhesion_ContactRegion_texture_ncad_serspot = serspot)
		renameattr(adhesion_ContactRegion_texture_ncad_servalley = servalley)

		Texture::CalcSERFeatures(IM_ncad, 2, "cytoplasm")
		renameattr(adhesion_cytoplasm_texture_ncad_SERbright = SERBright)
		renameattr(adhesion_cytoplasm_texture_ncad_SERdark= SERdark)
		renameattr(adhesion_cytoplasm_texture_ncad_SERedge= seredge)
		renameattr(adhesion_cytoplasm_texture_ncad_serhole= serhole)
		renameattr(adhesion_cytoplasm_texture_ncad_serridge = serridge)
		renameattr(adhesion_cytoplasm_texture_ncad_sersaddle= sersaddle)
		renameattr(adhesion_cytoplasm_texture_ncad_serspot = serspot)
		renameattr(adhesion_cytoplasm_texture_ncad_servalley= servalley)
		RenameAttr(adhesion_ContactRegion_context__area=contact_region_area)
		Morphology::CalcTextuMorphoFeatures(objects, "body","centers", image=im_ncad, RequestContainer=RequestContainer,prefix="adhesion_cell_star_ncad_")
		Morphology::CalcTextuMorphoFeatures(objects, "membrane","cytoplasm", image=im_ncad, RequestContainer=RequestContainer,prefix="adhesion_membrane_star_ncad_")
		set(cells_obj=objects)


end()


if (IN_ChanLOK>0)
		set(objects=cells_obj) 
		set(IM_LOK = _["IM_CH" & IN_ChanLOK])
		CalcBorder(contact_region)
		CalcArea(contact_region)
		CalcIntensity(contact_region,IM_LOK)
		CalcIntensity(membraneregion,im_LOK)
		CalcIntensity(Cytoplasm,IM_LOK)
		RenameAttr(adhesion_cytoplasm_intensity_LOK_intensity=Cytoplasm_Intensity)
		RenameAttr(adhesion_membrane_intensity_LOK_intensity=membraneregion_Intensity)
		RenameAttr(adhesion_ContactRegion_intensity_LOK_intensity=contact_region_intensity)
		
		calcattr("Contact_RegionByCytoLOK", adhesion_ContactRegion_intensity_LOK_intensity/adhesion_cytoplasm_intensity_LOK_intensity)
		calcattr("adhesion_membrane_intensity_LOK_NrIntensity2Cyto", adhesion_membrane_intensity_LOK_intensity/adhesion_cytoplasm_intensity_LOK_intensity)
		set(cells_obj=objects)


		calcthreshmask(cytoplasm, Image= IM_LOK, Threshold=(1.8*adhesion_cytoplasm_intensity_LOK_intensity))
		RenameAttr(LOK_threshmask=threshmask)

		CalcArea(LOK_threshmask)
		calcAttr(adhesion_threshmask_morphology_LOK_NrArea,LOK_threshmask_area/area)
		DeleteAttr(LOK_threshmask_area)
		CalcIntensity(LOK_threshmask,im_LOK)
		RenameAttr(adhesion_threshmask_intensity_LOK_intensity=LOK_threshmask_intensity)
		
		and(objects.LOK_threshmask,image=objects.contact_region)
		CalcArea(image)
		SetAttr(LOK_thresh_contact_region,image)
		
		CalcAttr("adhesion_ThreshmaskContactRegion_morphology_LOK_NrArea",image_area/contact_region_area)
		CalcIntensity(LOK_thresh_contact_region,im_LOK)
		RenameAttr(adhesion_ThreshmaskContactRegion_intensity_LOK_intensity=LOK_thresh_contact_region_intensity)
		DeleteAttr(image_area)
		Texture::CalcSERFeatures(IM_LOK, 2, "membraneregion")
		renameattr(adhesion_Membrane_texture_LOK_SERbright = SERBright)
		renameattr(adhesion_Membrane_texture_LOK_SERdark = SERdark)
		renameattr(adhesion_Membrane_texture_LOK_SERedge = seredge)
		renameattr(adhesion_Membrane_texture_LOK_serhole = serhole)
		renameattr(adhesion_Membrane_texture_LOK_serridge= serridge)
		renameattr(adhesion_Membrane_texture_LOK_sersaddle= sersaddle)
		renameattr(adhesion_Membrane_texture_LOK_serspot = serspot)
		renameattr(adhesion_Membrane_texture_LOK_servalley = servalley)

		Texture::CalcSERFeatures(IM_LOK, 2, "contact_region")
		renameattr(adhesion_ContactRegion_texture_LOK_SERbright = SERBright)
		renameattr(adhesion_ContactRegion_texture_LOK_SERdark = SERdark)
		renameattr(adhesion_ContactRegion_texture_LOK_SERedge = seredge)
		renameattr(adhesion_ContactRegion_texture_LOK_serhole = serhole)
		renameattr(adhesion_ContactRegion_texture_LOK_serridge= serridge)
		renameattr(adhesion_ContactRegion_texture_LOK_sersaddle= sersaddle)
		renameattr(adhesion_ContactRegion_texture_LOK_serspot = serspot)
		renameattr(adhesion_ContactRegion_texture_LOK_servalley = servalley)

		Texture::CalcSERFeatures(IM_LOK, 2, "cytoplasm")
		renameattr(adhesion_cytoplasm_texture_LOK_SERbright = SERBright)
		renameattr(adhesion_cytoplasm_texture_LOK_SERdark= SERdark)
		renameattr(adhesion_cytoplasm_texture_LOK_SERedge= seredge)
		renameattr(adhesion_cytoplasm_texture_LOK_serhole= serhole)
		renameattr(adhesion_cytoplasm_texture_LOK_serridge = serridge)
		renameattr(adhesion_cytoplasm_texture_LOK_sersaddle= sersaddle)
		renameattr(adhesion_cytoplasm_texture_LOK_serspot = serspot)
		renameattr(adhesion_cytoplasm_texture_LOK_servalley= servalley)
		RenameAttr(adhesion_ContactRegion_context__area=contact_region_area)
		Morphology::CalcTextuMorphoFeatures(objects, "body","centers", image=im_LOK, RequestContainer=RequestContainer,prefix="adhesion_cell_star_LOK_")
		Morphology::CalcTextuMorphoFeatures(objects, "membrane","cytoplasm", image=im_LOK, RequestContainer=RequestContainer,prefix="adhesion_membrane_star_LOK_")
		set(cells_obj=objects)


end()



set(objects=cells_obj)
DeleteAttr(outerzone) 
DeleteAttr(zone) 


//setAttr(plate_barcode,sourcedata.barcode[0])
//setAttr(plate_platename,sourcedata.platename[0])
//setAttr(plate_DateTime,sourcedata.DateTime[0])

OperaTemplates::CalcObjectCoordinates()

Comment(
if (SaveImg)
		ObjectNumberOnImage(objects,color="black",image=overlay_img)
		Or(image,image=objects.border.mask.image)
		Gamma(1.5)
		Set(IM_analysed=image)

			Set(Well=rep(wellindex," area Sample",""))
			Set (Well=rep(Well,"R",""))
			Set (Well=rep(Well,"C",""))
			Set (Well=rep(Well," ","-"))
			set(imagefile=ImgPath & Well & "-" & _FieldCounter) 	
			WriteImage(imagefile &  ".png","truecolor",image=IM_analysed, imageformat ="png")
End()
)

RenameAttr(cell__morphology__area=area)
RenameAttr(cell__morphology__Eccentricity=Eccentricity)
RenameAttr(cell__morphology__Border=border_area)
setAttr(cytoplasm__morphology__NrArea2CellArea,cytoplasm_area/cell__morphology__Area)
RenameAttr(cell__morphology__length=full_length)
RenameAttr(cell__morphology__NrWidth2Length=width2length)
SetAttr(cell__morphology__width, 2*half_width)

RenameAttr(cell__morphology__Roundness=roundness)

RenameAttr(cell__context__NeighbourDistance=NeighbourDistance)

RenameAttr(nucleus__morphology__area=centers_area)
RenameAttr(nucleus__morphology__border=centers_border_area)
RenameAttr(nucleus__morphology__NumberOfNuclei=numberofnuclei)
RenameAttr(nucleus__morphology__Eccentricity=centers_eccentricity)

RenameAttr(cell__coordinates__MasscentreX=MasscentreX)
RenameAttr(cell__coordinates__MasscentreY=MasscentreY)

//RenameAttr(plate__meta__Barcode=plate_barcode)
//RenameAttr(plate__meta__platename=plate_platename)
//RenameAttr(plate__meta__DateName=plate_dateTime)

Comment(
//Mitotic cells didn't work in Mar screen
CalcAttr(test_NucR,nucleus__morphology__roundness>.83)
CalcAttr(test_NucW,nucleus__morphology__width>7.8)
CalcAttr(test_NucT,nucleus__texture_dapi_SERdark<.01)
CalcAttr(test_NucA,nucleus__morphology__area>200)
CalcAttr(test_Mitotic,test_NucR + test_NucW + test_NucA + test_NucT)
 CalcAttr(MitoticIndex,test_Mitotic<3)
)


//Delete the rest of the attributes

DeleteAttr(voronoi_area)
DeleteAttr(numberofsubobjects)
DeleteAttr(half_width)
DeleteAttr(numberofinnerobjects)
DeleteAttr(numberofborderobjects)
DeleteAttr(type)
DeleteAttr(vax)
DeleteAttr(vax2)
DeleteAttr(vay)
DeleteAttr(vay2)


//delete coordinates


DeleteAttr(centers_min_x1)
DeleteAttr(centers_min_x2)
DeleteAttr(centers_min_y1)
DeleteAttr(centers_min_y2)
DeleteAttr(centers_mj_x1)
DeleteAttr(centers_mj_x2)
DeleteAttr(centers_mj_y1)
DeleteAttr(centers_mj_y2)

DeleteAttr(MajorAxis)
DeleteAttr(MajorAxisX)
DeleteAttr(MajorAxisY)
DeleteAttr(MasscentreX)
DeleteAttr(MasscentreY)
DeleteAttr(MinorAxis)
DeleteAttr(MinorAxisX)
DeleteAttr(MinorAxisY)
DeleteAttr(min_x1)
DeleteAttr(min_x2)
DeleteAttr(min_y1)
DeleteAttr(min_y2)

DeleteAttr(centers_masscentrex)
DeleteAttr(centers_masscentrey)


DeleteAttr(mj_x1)
DeleteAttr(mj_x2)
DeleteAttr(mj_y1)
DeleteAttr(mj_y2)
DeleteAttr(min_1)
DeleteAttr(min_2)
DeleteAttr(mj_1)
DeleteAttr(mj_2)

DeleteAttr(nei_border)
DeleteAttr(masscentre_voronoi_area)


DeleteAttr(cytoplasm_area)
DeleteAttr(centers_majoraxis)
DeleteAttr(centers_majoraxisX)
DeleteAttr(centers_majoraxisY)
DeleteAttr(centers_minoraxis)
DeleteAttr(centers_minoraxisX)
DeleteAttr(centers_minoraxisY)
DeleteAttr(centers_min_1)
DeleteAttr(centers_min_2)
DeleteAttr(centers_mj_1)
DeleteAttr(centers_mj_2)
DeleteAttr(centers_vax)
DeleteAttr(centers_vax2)
DeleteAttr(centers_vay)
DeleteAttr(centers_vay2)
DeleteAttr(x0)
DeleteAttr(y0)

DeleteAttr(membraneregion_skeleton_node_count)
DeleteAttr(membraneregion_skeleton_border_area)



set(cells_obj=objects)

  if (defined("all_objects"))  
   AddObjects(cells_obj, objects=all_objects, CheckOverlap=no)
   set(all_objects=objects)
  else()
   set(all_objects=cells_obj)
  end()

 End()//end of checking for empty object listif(objects.@count>0)
End()
end()   // end of the analysis of valid image fields
end() // end of the foreach loop over image fields


  if (defined("all_objects") )  
if (IN_ChanDAPI>0)
	
	objectfilter(nucleus__intensity_dapi_intensity<IN_DAPIIntensitymax and  nucleus__intensity_dapi_intensity>100  and nucleus__morphology__NrArea2CytoplasmArea <100  , objects=all_objects)
	set(all_AnalyzedCells = objects)
Else()
	set(all_AnalyzedCells = all_objects)
End()



	//Write Single Cells Results to a file
	if( all_AnalyzedCells.count>0 )
		set(filename= DataPath & DataFileName)
		if(writesinglecell)
			OperaTemplates::WriteObjectData(objects=all_AnalyzedCells,out_filename=filename)
		End()
	//output the mean and std for all objects data
	output(all_analyzedcells.count, "Total_cells_analyzed")
	set(AttrNames=all_AnalyzedCells.keys)                           // attributes of the current object list
	foreach(AttrNames)
							set(a1=all_AnalyzedCells.[i])
							if(a1.class=="vector" and a1.class!="intervalvector" and a1.class!="indexvector" and a1.elemtype<8)
									// the currently looked at attribute is something we could output.
									If(lower(i) != "row" and lower(i) != "column" and lower(i) != "field")
											set(attrn=i)
											output(eval("all_analyzedcells." & attrn &".mean"), attrn & "_mean")
											output(eval("all_analyzedcells." & attrn &".stddev"),  attrn & "_stddev")
									End()
							end()
	End()
End()//end of ( all_AnalyzedCells.@count>0 )
End()//end of   if (defined("all_objects"))




proc CalcPearsonsCoefficient(
	Image Channel1 in "Channel 1 image",
	Image Channel2 in "Channel 2 image",
	string Threshold1Name="" in "Optional attribute name for Threshold of channel 1",
	string Threshold2Name="" in "Optional attribute name for Threshold of channel 1",
	objectlist objects in "Objectlist for which the coefficients are calculated",
	string StencilName="body" in "Stencil from the object list, for which the correlation coeffficient is calculated",
	objectlist objects out "The result object list with the Pearson's and Manders' M1 and M2 coefficients added. If a StencilName was provided, the attributes will be prepended with the StencilName, similar to CalcArea() etc.",
	image ColocalizationMap out "The Pearson's colocalization map"
)	Object list attribute creation "This procedure calculates the Pearson's colocalization coefficient, as well as the Manders coefficients M1 and M2. It also returns the Pearson's colocalisation map as a graphical display of colocalisation values. The calculation based on pixels which are higher than a given threshold, if the threshold attributes are provided. Otherwise all pixels in the specified stencil are used. This corresponds to the Threshold Statistics in Volocity - with the added benefit, that it is always calculated on a per object basis.<br/>In this version, typically only pixel brighter than the threshold in both channels do contribute to the result.<br/> See also A.L.Barlow et al.\"Colocalization analysis in fluorescence micrographs: a more accurate calculation of Pearson's correlation coefficient\" "
{
	Set(objects1=objects)
	Eval("stencil2objects(objects." & stencilName & ")")
	if(errorcode!=0)
		error("Attribute with name " & StencilName & " is not present in the input object list or has a wrong type, i.e. is not a stencil. Control the input StencilName.")
	end()

	If(Threshold1Name != "")
		SetAttr("Thresh1", objects1[&Threshold1Name])
	Else()
		CalcAttr("Thresh1", -1)
	End()
	If(Threshold2Name != "")
		SetAttr("Thresh2", objects1[&Threshold2Name])
	Else()
		CalcAttr("Thresh2", -1)
	End()
	CalcThreshMask(Threshold=Thresh1, Image=Channel1)
	RenameAttr(ThreshMask1=Threshmask)
	CalcThreshMask(Threshold=Thresh2, Image=Channel2)
	RenameAttr(ThreshMask2=Threshmask)

	CalcStat("mean",Image=Channel1, Stencil=Threshmask1, AttrName="mean_1")
	CalcStat("mean",Image=Channel2, Stencil=Threshmask2, AttrName="mean_2")

	Blank(channel1.Width, channel1.Height, 0.0)
	Convelems(image, "float", sign="signed")
	Carryobjects(objects.Threshmask1, objects.mean_1, image=result)
	Set(Chan1_avg = image)
	Minus(Channel1, Image, result_type="y_type")
	Mul(x=result, y=objects.threshmask1.mask.image)
	Set(Chan1_offset=result)

	Blank(channel1.Width, channel1.Height, 0.0)
	Convelems(image, "float", sign="signed")
	Carryobjects(objects.Threshmask2, objects.mean_2, image=result)
	Set(Chan2_avg = image)
	Minus(Channel2, Image, result_type="y_type")
	Mul(x=result, y=objects.threshmask2.mask.image)
	Set(Chan2_offset=result)

	Mul(Chan1_offset, Chan2_offset)
	Set(cross_term = result)

	Mul(Chan1_offset, Chan1_offset)
	Set(Chan1_square=result)

	Mul(Chan2_offset, Chan2_offset)
	Set(Chan2_square=result)

	CalcStat("sum", Image=cross_term, AttrName="pear_cross")
	CalcStat("sum", Image=Chan1_square, AttrName="pear_ch1sq")
	CalcStat("sum", Image=Chan2_square, AttrName="pear_ch2sq")
	CalcAttr(Attrname="Pearsons", Formula="pear_cross / sqrt(pear_ch1sq * pear_ch2sq)")

	// Calculating the Pearson colocalization Map
	CalcAttr(Attrname="MapDenom", Formula="1 / sqrt(pear_ch1sq * pear_ch2sq)")
	Blank(channel1.Width, channel1.Height, 0.0)
	Convelems(image, "float", sign="signed")
	Carryobjects(objects.Threshmask1, objects.MapDenom, image=result)
	Mul(cross_term,image)
	Set(ColocalizationMap = result)

	// Calculating the Mander Overlap Coefficients M1 and M2
	Mul(objects.threshmask1.mask.image, objects.threshmask2.mask.image)
	Set(coloc = result)

	Mul(channel1, coloc)
	CalcStat("sum", AttrName="M1coloc", Stencil=threshmask1, Image=result)
	CalcStat("sum", AttrName="M1denom", Stencil=threshmask1, Image=Channel1)
	CalcAttr("M1", "M1coloc / M1denom")
	Mul(channel2, coloc)
	CalcStat("sum", AttrName="M2coloc", Stencil=threshmask2, Image=result)
	CalcStat("sum", AttrName="M2denom", Stencil=threshmask2, Image=Channel2)
	CalcAttr("M2", "M2coloc / M2denom")

	Set(objects_final = objects)

	if(lower(stencilname)=="body")
		set(pref = "")
	else()
		set(pref = stencilname&"_")
	end()

	SetAttr(pref&"Pearsons", objects_final.Pearsons, objects=objects1)
	SetAttr(pref&"M1", objects_final.M1)
	SetAttr(pref&"M2", objects_final.M2)
}


package(Morphology)

/////////////// High level procedures /////////////////////


proc CalcTextuMorphoFeatures(
	objectlist objects explicit inout "Objectlist describing spatial location of objects; in output: feature values as attributes",
	string regionname="body" explicit in "Name describing which stencil will be characterized by features",
	string subregionname="" explicit in "Optional: name of subregion, usually nucleus, needed for calculation of profile images",
	image image=none explicit in "Image as basis of feature calculation; if absent then a constant image is created",
	container RequestContainer explicit in "Container with input parameters and flags describing which feature families are wanted",
	container SupplementaryData=cnt() explicit inout "Container with supplementary data such as texture images, profile images etc. If not given in input but needed then they will be calculated",
	string prefix="" explicit in "Optional prefix for names of features",
	vector featurenames=vec() explicit inout)
Morphology "Envelope procedure for calculation of texture and morphology features"
{
	if(objects.@count==0) return() end()
	if(!defined("objects[regionname]")) warning("Region with name " & regionname & " is absent") return() end()
	if(!defined("image")) 
		blank(objects.@imagewidth, objects.@imageheight, 1) 
		set(RequestContainer.bTextuInten=0, RequestContainer.bTextuProfile=0, RequestContainer.bTextuThresh=0, RequestContainer.bTextuRadial=0, RequestContainer.bTextuAxial=0, RequestContainer.bTextuPolar=0) 
	end()

	if(!defined("RequestContainer.TextureScale")) set(RequestContainer.TextureScale=0.5) end()
	if(!defined("RequestContainer.ProfileDistance")) set(RequestContainer.ProfileDistance=10.0) end()

	set(flagnamesF=GetStarflagnamesF().flagnamesF) // GetStarflagnamesF() has been added, March 5, 2011, Olavi								
	set(flagnamesT=GetStarflagnamesT().flagnamesT) // GetStarflagnamesT() has been added, March 5, 2011, 

	foreach(flagnamesF, "flagname") if(!defined("RequestContainer[flagname]")) set(RequestContainer[flagname]=0) end() end()
	foreach(flagnamesT, "flagname") if(!defined("RequestContainer[flagname]")) set(RequestContainer[flagname]=0) end() end()
	foreach(flagnamesT, "flagname")
		if(RequestContainer[flagname]==1)
			set(tname=substr(flagname, 2))
			push(WantedTextures, tname)
		end()
	end()
	if(defined("WantedTextures")) set(RequestContainer.WantedTextures=WantedTextures) end()
	
	CalcSupplementaryData(objects, regionname, subregionname, image, RequestContainer, SupplementaryData)

	/////// Calculate a new stencil with special name "_combined" /////////
	if(subregionname=="")
		setattr("_combined", objects[regionname])
	else()
		Tabulate("x+1", objects.@count | tmp=result)
		CarryObjects(image=objects[subregionname].image, Stencil=objects[RegionName], Data=tmp | tmp=image)
		SetAttr("_combined", tmp.vector)
	end()

	//// Preparations are finished; we calculate features now
	CalcTextuMorphoFeaturesInner(objects, regionname, image, RequestContainer, SupplementaryData, prefix, featurenames)
}

// GetStarflagnamesF() has been added, March 5, 2011, Olavi
proc GetStarflagnamesF(vector flagnamesF out) [internal]
{
	set(flagnamesF=vec("bArea", 
		"bOrigInten", "bSPInten", "bTextuInten",
		"bOrigProfile", "bSPProfile", "bTextuProfile",
		"bOrigThresh", "bSPThresh", "bTextuThresh",
		"bOrigRadial", "bSPRadial", "bTextuRadial",
		"bOrigAxial", "bSPAxial", "bTextuAxial",
		"bOrigSymm", "bSPSymm", "bTextuSymm"))	
}

// GetStarflagnamesT() has been added, March 5, 2011, Olavi
proc GetStarflagnamesT(vector flagnamesT out) [internal]
{
	set(flagnamesT=vec("bBright", "bDark", "bRidge", "bValley", "bSpot", "bHole", "bSaddle", "bEdge")) 
}


//////////// Internal procedures ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

proc AttributesToTable(
	objectlist objects explicit in,
	vector featurenames explicit in,
	table table=tbl() explicit inout)		/// amendment 20.01.2011
[internal] Morphology "Table is appended by attributes from objectlist"
{
	foreach(featurenames, "name")
		if(defined("objects[name]"))
			set(table[name]=objects[name])
		end()
	end()
}

proc CalcAreaAttributes(
	objectlist objects explicit inout,
	string regionname="body" explicit in,
	string prefix="" explicit in,
	vector FeatureNames=none inout)
[internal] Morphology "Calculation of area and compactness"
{
	set(objects_in=objects)
	if(regionname!="body")
		Stencil2Objects(objects[regionname])
	end()
	CalcArea()
	CalcArea(border)
	set(area=objects.area)
	company("2*sqrt(PI*area)/objects.border_area" | compactness=result)
	rename(objects=objects_in)
	SetAttr(prefix&"Area", area)
	SetAttr(prefix&"Compactness", compactness)
	push(FeatureNames, prefix&"Area", prefix&"Compactness")
}

proc CalcIntenDistribnAttributes(
	objectlist objects explicit inout,
	string regionname="body" explicit in,
	image image explicit in,
	bool bNormalize explicit in,		//// amendment 20.01.2011
	string prefix="" explicit in,
	vector FeatureNames=none explicit inout)
[internal] Morphology "Calculation of intensity attributes"
{
	set(objects_io=objects)
	if(regionname!="body")
		Stencil2Objects(objects[regionname])
	end()
	set(nameM=prefix&"IntenMean")
	set(nameRM=prefix&"IntenRelMean")
	set(nameRD=prefix&"IntenRelDev")
	set(nameSD=prefix&"IntenStdDev")
	CalcStat("mean", Stencil=body, objects=objects, Image=image, AttrName=nameM)
	CalcStat("stddev", Stencil=body, objects=objects, Image=image, AttrName=nameSD)
	company("objects[nameSD]/objects[nameM]")
	SetAttr(&nameRD, result)

//////////////// amended code 20.01.2011 /////////////////////////////////////
	push(NewFeatureNames, nameRD)
	if(bNormalize && defined("objects_io.ReferenceIntensity"))
		company("objects[nameM]/objects_io.ReferenceIntensity")
		SetAttr(&nameRM, result)
		push(NewFeatureNames, nameRM)
	else()
		push(NewFeatureNames, nameM)
	end()
//interactive()
	append(FeatureNames, NewFeatureNames)
	if(regionname=="body") 
		return() 
	else()
		foreach(NewFeatureNames, "name")
			SetAttr(&name, objects[name], objects=objects_io | objects_io=objects)
		end()
		rename(objects=objects_io)
	end()
////////////////////////////////////////////////////////////////////////////////////////////
}

proc CalcRadialDistribnAttributes(
	objectlist objects explicit inout,
	string regionname="body" explicit in,
	image image=none explicit in,
	string prefix="" explicit in,
	vector featurenames explicit inout)
[internal] Morphology "Calculation of mean radius, and radius ratio if reference radius is available"
{
	set(objects_in=objects)
	if(regionname!="body")
		Stencil2Objects(objects[regionname])
		if(defined("objects_in.x0"))
			SetAttr("x0", objects_in.x0)
			SetAttr("y0", objects_in.y0)
		end()
	end()
	set(maxorder=2)	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	if(!defined("image"))
		blank(objects.@imagewidth, objects.@imageheight, 1)
	end()

/// Radial features
	CalcRadialMomentsOfObjectsWithGivenCenter(objects, image, maxorder | RM=RadialMoments)
	company("RM.P1/RM.P0" | RadialMeanVec=result)	
	company("(RM.P2*RM.P0-RM.P1*RM.P1)/(RM.P0*RM.P0)" | RadialVarianceVec=result)
	set(RadialStdDevVec=sqrt(RadialVarianceVec))
	set(RadialRelDevVec=RadialStdDevVec/RadialMeanVec)	
	set(NameRadialMean=prefix&"RadialMean")
	SetAttr(&NameRadialMean, RadialMeanVec, objects=objects_in)	
	set(NameRadialRelDev=prefix&"RadialRelDev")
	SetAttr(&NameRadialRelDev, RadialRelDevVec)	
	push(featurenames, NameRadialMean, NameRadialRelDev)

	if(defined("objects.ReferenceRadius"))
		company("RadialMeanVec/objects.ReferenceRadius" | RadialMeanRatio=result)	
		set(NameRadialMeanRatio=prefix&"RadialMeanRatio")
		SetAttr(&NameRadialMeanRatio, RadialMeanRatio)
		push(featurenames, NameRadialMeanRatio)
	end()
}

proc CalcSymmetryAttributes(
	objectlist objects explicit inout,
	string regionname="body" explicit in,
	image image=none explicit in,
	string prefix="" explicit in,
	vector featurenames explicit inout)
[internal] Morphology "Inner procedure for calculation of radial-polar features"
{
	set(maxradialpower=1)
	set(maxpolenumber=5)
	set(objects_io=objects)
	if(regionname!="body")
		Stencil2Objects(objects[regionname])
		CalcMassCentre()
		SetAttr("x0", objects.masscentrex)
		SetAttr("y0", objects.masscentrey)
		
	end()
	if(!defined("image")) 
		set(image=objects.body.mask.image)
	end()

	///Apply objectmask to image
	And(mask=objects.body.mask.image, image=image | imageM=image)

	/// Calculate coordinate images
	CarryObjects(objects.body, objects.x0, image=image | x0img=image)
	CarryObjects(objects.body, objects.y0, image=image | y0img=image)
	company("x-x0img" | x1img=result)
	And(mask=objects.body.mask.image, image=x1img | x1img=image)
	company("y-y0img" | y1img=result)
	And(mask=objects.body.mask.image, image=y1img | y1img=image)
	company("x1img*x1img+y1img*y1img" | r2img=result)
	company("sqrt(r2img)" | r1img=result)
	company("atan2(x1img, y1img)" | angleimg=result)

	///  Calculate angular moments
	set(wimg=imageM)
	foreach(0..maxradialpower, "ir")
		CalcStat("sum", Image=wimg)
		set(Mra0=objects.sum)
		foreach(2..maxpolenumber, "ip")
			company("wimg*cos(ip*angleimg)" | cosimg=result)
			company("wimg*sin(ip*angleimg)" | sinimg=result)
			CalcStat("sum", Image=cosimg, AttrName="co")
			CalcStat("sum", Image=sinimg, AttrName="si")
			company("sqrt(objects.co*objects.co+objects.si*objects.si)" | ampvec=result)
			company("ampvec/Mra0")
			set(name=prefix&"Symmetry"&ir&ip)
			SetAttr(&name, result, objects=objects_io | objects_io=objects)
			push(featurenames, name)
		end()
		if(ir<maxradialpower)
			company("wimg*r1img" | wimg=result)
		end()
	end()
	rename(objects=objects_io)
//interactive()
}

proc CalcTextuMorphoFeaturesInner(
	objectlist objects explicit inout "Objectlist describing spatial location of objects; in output: feature values as attributes",
	string regionname explicit in "Name describing which stencil will be characterized by features",
	image image explicit in "Image as basis of feature calculation",
	container RequestContainer explicit inout "Container with flags and their names describing which feature families are wanted",
	container SupplementaryData explicit in "Container with texture, SP and profile images calculated from the original image",
	string prefix="" explicit in "Optional prefix for names of attributes",
	vector featurenames=vec() explicit inout "Name list of calculated attributes")
[internal] Morphology "Inner procedure for calculation of texture and morphology attributes"
{
	set(bTexture=RequestContainer.bTextuInten||RequestContainer.bTextuProfile||RequestContainer.bTextuThresh||RequestContainer.bTextuRadial||RequestContainer.bTextuAxial||RequestContainer.bTextuSymm)
	set(bSP=RequestContainer.bSPInten||RequestContainer.bSPProfile||RequestContainer.bSPThresh||RequestContainer.bSPRadial||RequestContainer.bSPAxial||RequestContainer.bSPSymm)
	set(bProfile=RequestContainer.bOrigProfile||RequestContainer.bSPProfile||RequestContainer.bTextuProfile)
	set(bRadial=RequestContainer.bOrigRadial||RequestContainer.bSPRadial||RequestContainer.bTextuRadial)	///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	/////// Calculate mean intensity in the region of interest and set this as ReferenceIntensity attribute
	set(objects=Eval("CalcIntensity(" & regionname & ", image, AttributeName=\"ReferenceIntensity\").objects"))

	if(RequestContainer.CenterMode=="Original")
		CalcMassCenterOfObjects(objects, regionname, image)
	else()
		CalcMassCenterOfObjects(objects, regionname, SupplementaryData.SPImage)
	end()

	if(RequestContainer.bArea==1)
		CalcAreaAttributes(objects, regionname, prefix, featurenames)
	end()

	if(RequestContainer.bOrigInten==1)
		if(regionname!="body") 
			CalcIntenDistribnAttributes(objects, regionname, image, 1, prefix&"", featurenames)
		else()
			CalcIntenDistribnAttributes(objects, regionname, image, 0, prefix&"", featurenames)
		end()
//interactive()
	end()
	if(RequestContainer.bSPInten==1)
		CalcIntenDistribnAttributes(objects, regionname, SupplementaryData.SPImage, 1, prefix&"SP", featurenames)
	end()
	if(RequestContainer.bTextuInten==1)
		set(ntextu=SupplementaryData.Texture.Images.length)
		foreach(0..ntextu-1, "i")
			set(fullprefix=prefix&SupplementaryData.Texture.ImageNames[i])
			CalcIntenDistribnAttributes(objects, regionname, SupplementaryData.Texture.Images[i], 0, fullprefix, featurenames)
		end()
	end()
//Interactive()
	if(RequestContainer.bOrigProfile==1)
		CalcProfileWeightedIntensities(objects, image, 1, prefix&"", SupplementaryData.Profile, featurenames)
	end()
	if(RequestContainer.bSPProfile==1)
		CalcProfileWeightedIntensities(objects, SupplementaryData.SPImage, 1, prefix&"SP", SupplementaryData.Profile, featurenames)
	end()
	if(RequestContainer.bTextuProfile==1)
		set(ntextu=SupplementaryData.Texture.Images.length)
		foreach(0..ntextu-1, "i")
			set(fullprefix=prefix&SupplementaryData.Texture.ImageNames[i])
			CalcProfileWeightedIntensities(objects, SupplementaryData.Texture.Images[i], 0, fullprefix, SupplementaryData.Profile, featurenames)
		end()
	end()
//interactive()

	if(RequestContainer.bOrigRadial==1||(bRadial==1&&RequestContainer.CenterMode=="Original"))
		CalcRadialDistribnAttributes(objects, regionname, image, prefix&"", featurenames)
		if(RequestContainer.CenterMode=="Original")
			SetAttr("ReferenceRadius", objects[prefix&"RadialMean"])
		end()
	end()
	if(RequestContainer.bSPRadial==1||(bRadial==1&&RequestContainer.CenterMode=="SPFiltered"))
		CalcRadialDistribnAttributes(objects, regionname, SupplementaryData.SPImage, prefix&"SP", featurenames)
		if(RequestContainer.CenterMode=="SPFiltered") SetAttr("ReferenceRadius", objects[prefix&"SPRadialMean"]) end()
	end()
	if(RequestContainer.bTextuRadial==1)
		set(ntextu=SupplementaryData.Texture.Images.length)
		foreach(0..ntextu-1, "i")
			set(fullprefix=prefix&SupplementaryData.Texture.ImageNames[i])
			CalcRadialDistribnAttributes(objects, regionname, SupplementaryData.Texture.Images[i], fullprefix, featurenames)
		end()
	end()
//interactive()

	if(RequestContainer.bOrigThresh==1)
		CalcThreshCompactnessAttributes(objects, regionname, image, prefix&"", featurenames)
	end()
	if(RequestContainer.bSPThresh==1)
		CalcThreshCompactnessAttributes(objects, regionname, SupplementaryData.SPImage, prefix&"SP", featurenames)
	end()
	if(RequestContainer.bTextuThresh==1)
		set(ntextu=SupplementaryData.Texture.Images.length)	////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		foreach(0..ntextu-1, "i")
			set(fullprefix=prefix&SupplementaryData.Texture.ImageNames[i])
			CalcThreshCompactnessAttributes(objects, regionname, SupplementaryData.Texture.Images[i], fullprefix, featurenames)
		end()
	end()
//interactive()

	if(RequestContainer.bOrigAxial==1)
		CalcPrincAxAttributesGivenCenter(objects, regionname, image, prefix&"", featurenames)
	end()
	if(RequestContainer.bSPAxial==1)
		CalcPrincAxAttributesGivenCenter(objects, regionname, SupplementaryData.SPImage, prefix&"SP", featurenames)
	end()
	if(RequestContainer.bTextuAxial==1)
		set(ntextu=SupplementaryData.Texture.Images.length)	///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		foreach(0..ntextu-1, "i")
			set(fullprefix=prefix&SupplementaryData.Texture.ImageNames[i])
			CalcPrincAxAttributesGivenCenter(objects, regionname, SupplementaryData.Texture.Images[i], fullprefix, featurenames)
		end()
	end()
//interactive()

	if(RequestContainer.bOrigSymm==1)
		CalcSymmetryAttributes(objects, regionname, image, prefix&"", featurenames)
	end()
	if(RequestContainer.bSPSymm==1)
		CalcSymmetryAttributes(objects, regionname, SupplementaryData.SPImage, prefix&"SP", featurenames)
	end()
	if(RequestContainer.bTextuSymm==1)	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		set(ntextu=SupplementaryData.Texture.Images.length)	///!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		foreach(0..ntextu-1, "i")
			set(fullprefix=prefix&SupplementaryData.Texture.ImageNames[i])
			CalcSymmetryAttributes(objects, regionname, SupplementaryData.Texture.Images[i], fullprefix, featurenames)
		end()
	end()
//interactive()
//stop()
}

proc CalcThreshCompactnessAttributes(
	objectlist objects explicit inout,
	string regionname="body" explicit in,
	image image explicit in,
	string prefix="" explicit in,
	vector featurenames explicit inout)
[internal] Morphology "Calculation of threshold compactness attributes"
{
	set(objects_io=objects)
	if(regionname!="body")
		Stencil2Objects(objects[regionname])
	end()
	ConvElems(image, "integer", 2, "unsigned", stretchdynamic=1, clipoutofrange=1 | illuimage=result)
	set(illuimage.factor=1)

	set(fractionvec=vec(30, 40, 50, 60))
	set(sqrt4pi=2*sqrt(PI))
	CalcStat("max", AttrName="MaxInten", Image=illuimage)
	foreach(fractionvec, "fraction")
		SetAttr("thresh", 0.01*fraction*MaxInten)
		CalcThreshMask(Threshold=objects.thresh, Image=illuimage)
		CalcBorder(Stencil=ThreshMask)
		CalcArea(Stencil=ThreshMask)
		CalcArea(Stencil=ThreshMask_border)
		CompAny("sqrt4pi*sqrt(objects.ThreshMask_area)/objects.ThreshMask_border_area")
		set(name=prefix&"ThreshCmp" & fraction)
		push(featurenames, name)	//bug fixed 29.10.10 12:39
		SetAttr(&name, result, objects=objects_io | objects_io=objects)
	end()
	rename(objects=objects_io)
}

////////////// Local low level procedures /////////////////////////////

proc CalcMassCenterOfObjects(
	objectlist objects explicit inout,
	string regionname="body" explicit in,
	image weightimage=none explicit in)
[local] Morphology "Attributes x0 and y0 are calculated which are mass centers"
{
	set(objects_in=objects)
	if(!defined("weightimage"))
		blank(objects.@imagewidth, objects.@imageheight, 1 | weightimage=image)
	end()
	company("x*weightimage" | wximg=result)
	company("y*weightimage" | wyimg=result)
	Stencil2Objects(objects[regionname])
	CalcIntensity(image=weightimage, AttributeName="wmean")
	CalcIntensity(image=wximg, AttributeName="wxmean")
	CalcIntensity(image=wyimg, AttributeName="wymean")
	Company("objects.wxmean/objects.wmean" | x0v=result)
	Company("objects.wymean/objects.wmean" | y0v=result)
	rename(objects=objects_in)
	SetAttr("x0", x0v)
	SetAttr("y0", y0v)
}

proc CalcMomentsOfObjectsWithGivenCenter(
	objectlist objects explicit in,
	image image explicit in,
	int maxorder explicit in,
	table CentralMoments out)
[local] Morphology "Calculation of central moments assuming centers are precalculated"
{
	///Apply objectmask to image
	And(mask=objects.body.mask.image, image=image | imageM=image)

	/// Calculate coordinate images
	CarryObjects(objects.body, objects.x0, image=imageM | x0img=image)
	CarryObjects(objects.body, objects.y0, image=imageM | y0img=image)
	company("x-x0img" | x1img=result)
	company("y-y0img" | y1img=result)

	///  Calculate table of geometric moments
	set(table=tbl())
	set(Pij0=image)
	foreach(0..maxorder, "i")
		set(Pij=Pij0)
		foreach(0..maxorder-i, "j")
			set(name="P"&i&j)
			CalcStat("sum", Image=Pij)
			set(table[name]=objects.sum)
			if(j<maxorder-i) company("Pij*y1img" | Pij=result) end()
		end()
		if(i<maxorder) company("Pij0*x1img" | Pij0=result) end()
	end()
	Rename(CentralMoments=table)
}

proc CalcPrincAxAttributesGivenCenter(
	objectlist objects explicit inout,
	string regionname="body" explicit in,
	image image explicit in,
	string prefix="" explicit in,
	vector featurenames explicit inout)
[local] Morphology "Calculation of principal axes attributes"
{
	set(objects_io=objects)
	if(regionname!="body")
		Stencil2Objects(objects[regionname])
		CalcMassCentre()
		SetAttr("x0", objects.masscentrex)
		SetAttr("y0", objects.masscentrey)
	end()
	set(maxorder=2)

/// Body principal axis features
	CalcMomentsOfObjectsWithGivenCenter(objects, image, maxorder | CM=CentralMoments)
	set(xx=CM.P20, yy=CM.P02, xy=CM.P11, xxplusyy=CM.P20+CM.P02, xxminusyy=CM.P20-CM.P02)
	company("sqrt(xxminusyy*xxminusyy+4*xy*xy)" | tmp=result)
	company("(xxplusyy-tmp)" | SmallAxVarSum=result)
	company("(xxplusyy+tmp)" | BigAxVarSum=result)
	company("sqrt(SmallAxVarSum/BigAxVarSum)" | AxLenRatioVec=result)
	company("sqrt(SmallAxVarSum/CM.P00)" | SmallAxLenVec=result)
	set(nameALR=prefix&"AxialLengthRatio")
	set(nameSAL=prefix&"AxialSmallLength")
	SetAttr(&nameALR, AxLenRatioVec, objects=objects_io)
	SetAttr(&nameSAL, SmallAxLenVec, objects=objects)
	push(featurenames, nameALR, nameSAL)
//interactive()
}

comment(
proc CalcProfileContainer(
	objectlist objects explicit in "Objectlist describing spatial location of objects",
	string regionname="body" explicit in "Name describing which stencil will be characterized by features",
	string subregionname="" explicit in "Optional: name of subregion, usually nucleus, needed for calculation of profile images",
	double distance explicit in "Characteristic distance of the calculated profile",
	container ProfileContainer out)
[local] Morphology "Calculation of ProfileContainer with profile images"
{
	set(ProfileContainer=cnt())
	if(subregionname=="")
		CalcSlidingParabolaProfile(objects, regionname, distance | Inner=result)
		And(mask=objects[regionname].mask.image, image=1.0-Inner | Outer=image)	
		set(ProfileContainer.Images=vec(Inner, Outer))
		set(ProfileContainer.ImageNames=vec("Profile1of2", "Profile2of2"))
	else()
		and(mask=1-objects[subregionname].mask.image, image=objects[regionname].image | cytstencilimage=image)
		SetAttr("cyt", cytstencilimage.vector)
		CalcSlidingParabolaProfile(objects, regionname, distance | profileCN=result)
		and(mask=objects.cyt.mask.image, image=1.0-profileCN | profileOC=image)
		CalcSlidingParabolaProfile(objects, subregionname, distance | profileIN=result)
		and(mask=objects[&subregionname].mask.image, image=1.0-profileIN | profileON=image)
		SlidingParabolaTransform(1-objects[subregionname].mask.image, 2/(distance*distance) | profileNotN=Background)
		and(mask=objects.cyt.mask.image, image=1.0-profileNotN | profileIC=image)
		Stat::Projection(vec(profileIC, profileOC), "max" | profileIOC=result)
		and(mask=objects.cyt.mask.image, image=1-profileIOC | profileMC=image)
		push(profiles, profileIN, profileON, profileIC, profileMC, profileOC)
		push(profilenames, "Profile1of5", "Profile2of5", "Profile3of5", "Profile4of5", "Profile5of5")
		set(ProfileContainer.Images=profiles, ProfileContainer.ImageNames=profilenames)
	end()
}
)

proc CalcProfileWeightedIntensities(
	objectlist objects explicit inout,
	image image explicit in,
	bool bNormalize explicit in,
	string prefix="" explicit in,
	container ProfileContainer explicit in,
	vector featurenames explicit inout)
[local] Morphology "Calculation of profile weighted intensity features"
{
	if(defined("objects._combined"))
		Stencil2Objects(objects._combined | OL=objects)
	else()
		set(OL=objects)	//must not happen
	end()

	foreach(0..ProfileContainer.Images.length-1, "i")
		set(profile=ProfileContainer.Images[i])
		CalcIntensity(Image=profile*image, AttributeName="m1", objects=OL | OL=objects)
		CalcIntensity(Image=profile, AttributeName="m0", objects=OL | OL=objects)
		if(bNormalize)
			company("OL.m1/(OL.m0*objects.ReferenceIntensity)")
		else()
			company("OL.m1/OL.m0")
		end()
		set(name=prefix&ProfileContainer.ImageNames[i])
		SetAttr(&name, result)
		push(featurenames, name)
	end()
	//DeleteAttr(m0)
	//DeleteAttr(m1)
}


proc CalcRadialMomentsOfObjectsWithGivenCenter(
	objectlist objects explicit in,
	image image=none explicit in,
	int maxorder=1 explicit in,
	table RadialMoments out)
[local] Morphology "Very specific local procedure"
{
	if(!defined("image")) 
		set(image=objects.body.mask.image)
	end()

	///Apply objectmask to image
	And(mask=objects.body.mask.image, image=image | imageM=image)

	/// Calculate coordinate images
	CarryObjects(objects.body, objects.x0, image=imageM | x0img=image)
	CarryObjects(objects.body, objects.y0, image=imageM | y0img=image)
	company("x-x0img" | x1img=result)
	company("y-y0img" | y1img=result)
	company("x1img*x1img+y1img*y1img" | r2img=result)
	company("sqrt(r2img)" | r1img=result)
//interactive()

	///  Calculate table of radial moments
	set(table=tbl())
	CalcStat("sum", Image=image)
	set(table.P0=objects.sum)

	Company("image*r1img")
	CalcStat("sum", Image=result)
	set(table.P1=objects.sum)

	if(maxorder>1)
		Company("image*r2img")
		CalcStat("sum", Image=result)
		set(table.P2=objects.sum)
	end()

	if(maxorder>2)
		foreach(3..maxorder, "i")
			company("result*r1img")
			set(name="P"&i)
			CalcStat("sum", Image=result)
			set(table[name]=objects.sum)
		end()
	end()
	Rename(RadialMoments=table)
}

comment(
proc CalcSlidingParabolaProfile(
	objectlist objects explicit in,
	string stencilname="body" explicit in,
	double distance explicit in,
	image result out)
[local] Morphology "Sliding parabola filter is applied to stencil mask image yielding a function of the distance from the border"
{
	set(Curvature=2/(distance*distance))
	if(stencilname!="body") 
		Stencil2Objects(objects[stencilname])
	end()	
	and(mask=1-objects.border.mask.image, image=objects.body.mask.image | innermask=image)
	//Texture::
	SlidingParabolaTransform(innermask, Curvature | result=Background)	///!!!!!!!!!!!!!!!!!!!!!!!!!!
}
)

// CalcSupplementaryData() type is changed from local to internal, Olavi March 5, 2011 
proc CalcSupplementaryData(
	objectlist objects explicit inout "Objectlist describing spatial location of objects; in output: feature values as attributes",
	string regionname explicit in "Name describing which stencil will be characterized by features",
	string subregionname explicit in "Optional: name of subregion, usually nucleus, needed for calculation of profile images",
	image image explicit in "Image as input for texture filtering",
	container RequestContainer explicit in "Container with input parameters and flags describing which feature families are wanted",
	container SupplementaryData explicit inout "Container with supplementary data such as texture images, sliding parabola-filtered image, profile images etc. If not given in input but needed then they will be calculated")
[internal] Morphology "Inner procedure for calculation of supplementary data such as texture-filtered images, profile images etc"
{
	set(bTexture=RequestContainer.bTextuInten||RequestContainer.bTextuProfile||RequestContainer.bTextuThresh||RequestContainer.bTextuRadial||RequestContainer.bTextuAxial||RequestContainer.bTextuSymm)
	set(bSP=RequestContainer.bSPInten||RequestContainer.bSPProfile||RequestContainer.bSPThresh||RequestContainer.bSPRadial||RequestContainer.bSPAxial||RequestContainer.bSPSymm)
	set(bProfile=RequestContainer.bOrigProfile||RequestContainer.bSPProfile||RequestContainer.bTextuProfile)
	if(!defined("SupplementaryData.Texture.Images") && bTexture==1)
		CalcTextureContainer(image, RequestContainer.TextureScale, RequestContainer.WantedTextures, RequestContainer.NormalizationMode)
		set(SupplementaryData.Texture=TextureContainer)
	end()
	if(!defined("SupplementaryData.SP.Image") && bSP==1)
		SlidingParabolaTransform(image, RequestContainer.ParabolaCurvature | SPImage=Signal)	///////////!!!!!!!!!!!!!!!!!!!!!!!
		set(SupplementaryData.SPImage=SPImage)
	end()
	if(!defined("SupplementaryData.Profile.Images") && bProfile==1)
		CalcProfileContainer(objects, regionname, subregionname, RequestContainer.ProfileDistance)
		set(SupplementaryData.Profile=ProfileContainer)
	end()
}

proc CalcTextureContainer(
	image image explicit in,
	double scale explicit in,
	vector WantedNames explicit in,
	string normalizationmode explicit in,
	container TextureContainer out)
[local] Morphology "Calculation of texture images"
{
	if(NormalizationMode=="kernel") set(normalize=1) else() set(normalize=0) end()
	Texture::TextureFilterSER8n(image, scale, normalize, WantedNames)
	set(TextureContainer=cnt(Images=featureimages, ImageNames=featurenames))	////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}

///////////////////////////////////////////////////////////////////////////////////////////

proc CalcProfileContainer(
	objectlist objects explicit in "Objectlist describing spatial location of objects",
	string regionname="body" explicit in "Name describing which stencil will be characterized by features",
	string subregionname="" explicit in "Optional: name of subregion, usually nucleus, needed for calculation of profile images",
	double distance explicit in "Characteristic distance of the calculated profile",
	container ProfileContainer out)
[local] Morphology "Calculation of ProfileContainer with profile images"
{
	set(ProfileContainer=cnt())
	set(MaxDistance=4*distance)
	set(coef=1/(2*distance*distance))
	if(subregionname=="")

		CalcInnerProfileImage(objects, regionname, distance | Outer=result)
		And(objects[regionname].mask.image, image=1-Outer | Inner=image)
		set(ProfileContainer.Images=vec(Outer,Inner))
		set(ProfileContainer.ImageNames=vec("Profile1of2", "Profile2of2"))

	else()

		/// Ensure that _combined-stencil exists
		if(!defined("objects._combined"))
			Tabulate("x+1", objects.@count | tmp=result)
			CarryObjects(image=objects[subregionname].image, Stencil=objects[RegionName], Data=tmp | tmp=image)
			SetAttr("_combined", tmp.vector)
		end()

		///Three profiles outside subregion
		and(mask=1-objects[subregionname].mask.image, image=objects[regionname].mask.image | cytmask=image)
		CalcInnerProfileImage(objects, "_combined", Distance | InnerR=result)	//high in region near cell outer border
		CalcOuterProfileImage(objects, subregionname, Distance | OuterN=result) //high outside nucleus near nucleus border
		mask(0.01, image=OuterN-InnerR | tmpm=mask)	//// mask of a region outside nucleus where nucleus is closer than cell outer border 
		And(mask=tmpm, image=cytmask | mask3cyt=image)	//// mask of a region in cytoplasm where nucleus is closer than cell outer border 
		And(mask=mask3cyt, image=OuterN | Profile3of5=image)

		And(mask=cytmask, image=1-mask3cyt | tmpm=image)	//// mask of a region in cytoplasm where outer border is closer than nucleus border
		And(mask=tmpm, image=InnerR | Profile1of5=image)
		set(tmp=1-Profile1of5-Profile3of5)
		And(mask=cytmask, image=tmp | Profile2of5=image)

		//// Two profiles inside subregion
		CalcInnerProfileImage(objects, subregionname, distance | Profile4of5=result)
		And(objects[subregionname].mask.image, image=1-Profile4of5 | Profile5of5=image)

		//// Load profile container
		set(ProfileContainer.Images=vec(Profile1of5,Profile2of5,Profile3of5,Profile4of5,Profile5of5))
		set(ProfileContainer.ImageNames=vec("Profile1of5", "Profile2of5", "Profile3of5", "Profile4of5", "Profile5of5"))

	end()
}


proc CalcInnerProfileImage(
	objectlist objects explicit in,
	string stencilname explicit in,
	double Distance explicit in,
	image result out)
[local] Morphology "Using sliding parabola erosion, a function of the inner distance from the border is calculated"
{
	set(MaxDistance=4*distance)
	set(Curvature=2/(MaxDistance*MaxDistance))
	set(coef=MaxDistance*MaxDistance/(2*distance*distance))
	if(stencilname!="body") 
		Stencil2Objects(objects[stencilname])
	end()	
	//////// Create innermask. Neighbour objects must not be in contact, otherwise distance image would have artifacts
	and(mask=1-objects.border.mask.image, image=objects.body.mask.image | innermask=image)
	//////// 
//Timer::Start()
	SlidingParabolaErosion(innermask, Curvature | eroded=result)
	set(tmp=exp(-coef*eroded))
	And(mask=objects.body.mask.image, image=tmp | result=image)
}

proc CalcOuterProfileImage(
	objectlist objects explicit in,
	string stencilname explicit in,
	double Distance explicit in,
	image result out)
[local] Morphology "Using sliding parabola erosion, a function of the outer distance from the border is calculated"
{
	set(MaxDistance=4*distance)
	set(Curvature=2/(MaxDistance*MaxDistance))
	set(coef=MaxDistance*MaxDistance/(2*distance*distance))
	SlidingParabolaErosion(1-objects[stencilname].mask.image, Curvature | eroded=result)
	set(tmp=exp(-coef*eroded))
	And(mask=1-objects[stencilname].mask.image, image=tmp | result=image)
//stop()
}





